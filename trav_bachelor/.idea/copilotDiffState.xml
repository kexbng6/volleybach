<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/v2_0/app/roster_api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/roster_api.py" />
              <option name="updatedContent" value="from flask import Blueprint, request, jsonify, current_app&#10;import logging&#10;import csv&#10;import os&#10;import io&#10;from . import vmix_manager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO,&#10;                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('roster_api')&#10;&#10;bp_roster_api = Blueprint('roster_api', __name__)&#10;&#10;# Initialiser le gestionnaire vMix avec les paramètres par défaut&#10;vmix = vmix_manager.VmixManager()&#10;&#10;@bp_roster_api.route('/api/roster/import-csv', methods=['POST'])&#10;def import_roster_csv():&#10;    &quot;&quot;&quot;Importe une liste de joueurs depuis un fichier CSV et l'envoie à vMix&quot;&quot;&quot;&#10;    try:&#10;        # Vérifier si un fichier a été envoyé&#10;        if 'csvFile' not in request.files:&#10;            return jsonify({&#10;                'success': False,&#10;                'error': &quot;Aucun fichier CSV n'a été fourni&quot;&#10;            }), 400&#10;            &#10;        csv_file = request.files['csvFile']&#10;        team_name = request.form.get('teamName', 'Équipe')&#10;        team_logo = request.form.get('teamLogo', '')&#10;        title_input = request.form.get('titleInput', '')&#10;        &#10;        # Vérifier que le fichier a un nom et une extension valide&#10;        if csv_file.filename == '':&#10;            return jsonify({&#10;                'success': False,&#10;                'error': &quot;Nom de fichier invalide&quot;&#10;            }), 400&#10;            &#10;        if not csv_file.filename.endswith('.csv'):&#10;            return jsonify({&#10;                'success': False,&#10;                'error': &quot;Le fichier doit être au format CSV&quot;&#10;            }), 400&#10;            &#10;        # Lire le contenu du fichier CSV&#10;        csv_content = csv_file.read().decode('utf-8-sig')  # utf-8-sig pour gérer le BOM&#10;        csv_stream = io.StringIO(csv_content)&#10;        csv_reader = csv.reader(csv_stream, delimiter=',')&#10;        &#10;        # Structure pour stocker les données des joueurs&#10;        players = []&#10;        &#10;        # Parcourir les lignes du CSV&#10;        for i, row in enumerate(csv_reader):&#10;            if i &gt;= 9:  # Limiter à 9 joueurs maximum&#10;                break&#10;                &#10;            if len(row) &gt;= 2:  # Au minimum, on a besoin du nom et du numéro&#10;                player_name = row[0].strip()&#10;                player_number = row[1].strip()&#10;                &#10;                players.append({&#10;                    'name': player_name,&#10;                    'number': player_number&#10;                })&#10;        &#10;        # Vérifier que nous avons au moins un joueur&#10;        if not players:&#10;            return jsonify({&#10;                'success': False,&#10;                'error': &quot;Aucun joueur valide trouvé dans le fichier CSV&quot;&#10;            }), 400&#10;            &#10;        # Maintenant, envoyons ces données à vMix&#10;        # D'abord, définir le nom de l'équipe et le logo&#10;        if title_input:&#10;            vmix.set_text(title_input, team_name, 0)  # index 0 pour teamName&#10;            &#10;            if team_logo:&#10;                # Supposons que l'index 1 est pour le logo de l'équipe&#10;                vmix.set_text(title_input, team_logo, 1)&#10;            &#10;            # Ensuite, définir les noms et numéros des joueurs&#10;            for i, player in enumerate(players):&#10;                # Les indices commencent à 2 (après teamName et teamLogo)&#10;                name_index = 2 + (i * 2)  # indices pairs pour les noms&#10;                number_index = 3 + (i * 2)  # indices impairs pour les numéros&#10;                &#10;                vmix.set_text(title_input, player['name'], name_index)&#10;                vmix.set_text(title_input, player['number'], number_index)&#10;                &#10;            # Pour les joueurs manquants (moins de 9), mettre des valeurs vides&#10;            for i in range(len(players), 9):&#10;                name_index = 2 + (i * 2)&#10;                number_index = 3 + (i * 2)&#10;                &#10;                vmix.set_text(title_input, &quot;&quot;, name_index)&#10;                vmix.set_text(title_input, &quot;&quot;, number_index)&#10;                &#10;            return jsonify({&#10;                'success': True,&#10;                'message': f&quot;Liste de {len(players)} joueurs importée avec succès&quot;,&#10;                'players': players,&#10;                'teamName': team_name&#10;            })&#10;        else:&#10;            return jsonify({&#10;                'success': False,&#10;                'error': &quot;Aucun input vMix spécifié pour le titre&quot;&#10;            }), 400&#10;            &#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'importation du roster: {e}&quot;)&#10;        return jsonify({&#10;            'success': False,&#10;            'error': str(e)&#10;        }), 500&#10;&#10;@bp_roster_api.route('/api/roster/vmix-inputs', methods=['GET'])&#10;def get_vmix_title_inputs():&#10;    &quot;&quot;&quot;Récupère la liste des inputs de type 'title' dans vMix&quot;&quot;&quot;&#10;    try:&#10;        inputs = vmix.get_inputs()&#10;        &#10;        # Filtrer pour ne garder que les titres&#10;        title_inputs = [&#10;            {&#10;                'id': input_data['id'],&#10;                'name': input_data['name']&#10;            }&#10;            for input_data in inputs&#10;            if input_data.get('type', '').lower() == 'gt' or 'title' in input_data.get('name', '').lower()&#10;        ]&#10;        &#10;        return jsonify({&#10;            'success': True,&#10;            'inputs': title_inputs&#10;        })&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération des inputs de titre: {e}&quot;)&#10;        return jsonify({&#10;            'success': False,&#10;            'error': str(e)&#10;        }), 500" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v2_0/app/static/js/diffusion_live.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/static/js/diffusion_live.js" />
              <option name="originalContent" value="// Module pour gérer la diffusion en direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    delimiters: ['[[', ']]'], // Pour éviter les conflits avec Jinja&#10;    data() {&#10;        return {&#10;            inputs: [],&#10;            loading: true,&#10;            audioStates: {}, // true = unmute, false = mute&#10;            audioVolumes: {},&#10;            transitionDuration: 500,&#10;            transitionEffect: 'Fade',&#10;            notifications: [],&#10;            notificationCounter: 0,&#10;            &#10;            // Données pour les replays&#10;            replayDuration: 8,&#10;            isRecordingReplay: false,&#10;            eventName: '',&#10;            replayEvents: [],&#10;            lastEventIndex: 0,&#10;&#10;            // Données pour le score de volleyball&#10;            scoreTeamA: 0,&#10;            scoreTeamB: 0,&#10;            setsTeamA: 0,&#10;            setsTeamB: 0,&#10;&#10;            // Compteurs de points sans ralenti&#10;            consecutivePointsA: 0,&#10;            consecutivePointsB: 0,&#10;                }&#10;            } catch (e) {&#10;        suggestReplayForTeamA() {&#10;            // Définir le nom de l'événement pour le replay&#10;&#10;            this.showNotification(`Enregistrement lancé pour la série de points de l'équipe A`, 'info');&#10;            // Réinitialiser le compteur après avoir suggéré un replay&#10;            this.consecutivePointsA = 0;&#10;        },&#10;&#10;            }&#10;            this.startReplayRecording();&#10;            // Afficher une notification pour confirmer l'action&#10;        },&#10;        // Réinitialiser les compteurs de points consécutifs lorsqu'un replay est joué&#10;        resetConsecutivePointsOnReplay() {&#10;            this.consecutivePointsA = 0;&#10;            this.consecutivePointsB = 0;&#10;            const message = `${team} a marqué ${points} points sans ralenti. Lancer un replay?`;&#10;                if (notifElement.parentNode === notifContainer) {&#10;        const socket = io();&#10;            // Rafraîchir les inputs lorsque le statut vMix est mis à jour&#10;        });&#10;&#10;        socket.on('replay_marked', (eventData) =&gt; {&#10;            this.replayEvents.push(eventData);&#10;" />
              <option name="updatedContent" value="// Module pour gérer la diffusion en direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    delimiters: ['[[', ']]'], // Pour éviter les conflits avec Jinja&#10;    data() {&#10;        return {&#10;            inputs: [],&#10;            loading: true,&#10;            audioStates: {}, // true = unmute, false = mute&#10;            audioVolumes: {},&#10;            transitionDuration: 500,&#10;            transitionEffect: 'Fade',&#10;            notifications: [],&#10;            notificationCounter: 0,&#10;            &#10;            // Données pour les replays&#10;            replayDuration: 8,&#10;            isRecordingReplay: false,&#10;            eventName: '',&#10;            replayEvents: [],&#10;            lastEventIndex: 0,&#10;&#10;            // Données pour le score de volleyball&#10;            scoreTeamA: 0,&#10;            scoreTeamB: 0,&#10;            setsTeamA: 0,&#10;            setsTeamB: 0,&#10;&#10;            // Compteurs de points sans ralenti&#10;            consecutivePointsA: 0,&#10;            consecutivePointsB: 0,&#10;            totalPointsSinceReplay: 0, // Compteur total des points depuis le dernier replay&#10;            lastReplayTimestamp: Date.now(),&#10;&#10;            // Noms des équipes (à récupérer ultérieurement depuis la config)&#10;            teamAName: 'Équipe A',&#10;            teamBName: 'Équipe B',&#10;&#10;            // ID du titre vMix pour le scoreboard&#10;            scoreboardTitleId: null&#10;        };&#10;    },&#10;    computed: {&#10;        cameraInputs() {&#10;            return this.inputs.filter(input =&gt; input.category === 'camera');&#10;        },&#10;        videoInputs() {&#10;            return this.inputs.filter(input =&gt; input.category === 'video');&#10;        },&#10;        audioInputs() {&#10;            return this.inputs.filter(input =&gt; input.category === 'audio');&#10;        }&#10;    },&#10;    methods: {&#10;        // Système de notifications&#10;        showNotification(message, type = 'info', duration = 5000) {&#10;            const id = this.notificationCounter++;&#10;            this.notifications.push({ id, message, type });&#10;&#10;            // Auto-supprimer après la durée spécifiée&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, duration);&#10;        },&#10;&#10;        // Chargement des inputs vMix&#10;        async loadInputs() {&#10;            this.loading = true;&#10;            try {&#10;                // Utiliser l'API existante de vmix_manager au lieu de créer un endpoint dupliqué&#10;                const response = await fetch('/api/vmix/inputs');&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.inputs = data.inputs;&#10;&#10;                    // Initialiser les états audio pour toutes les entrées&#10;                    this.inputs.forEach(input =&gt; {&#10;                        // Si nous n'avons pas encore d'état pour cet input, initialiser à true (non muet)&#10;                        if (this.audioStates[input.id] === undefined) {&#10;                            this.audioStates[input.id] = true;&#10;                        }&#10;&#10;                        // Si nous n'avons pas encore de volume pour cet input, initialiser à 100%&#10;                        if (this.audioVolumes[input.id] === undefined) {&#10;                            this.audioVolumes[input.id] = 100;&#10;                        }&#10;&#10;                        // Chercher l'ID du titre vMix pour le scoreboard&#10;                        if (input.type === 'GT' &amp;&amp; input.name &amp;&amp; input.name.toLowerCase().includes('scoreboard')) {&#10;                            this.scoreboardTitleId = input.id;&#10;                        }&#10;                    });&#10;&#10;                    this.showNotification('Sources vMix chargées avec succès', 'success');&#10;                } else {&#10;                    this.showNotification('Erreur lors du chargement des inputs : ' + (data.error || &quot;Erreur inconnue&quot;), 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification('Erreur de communication avec le serveur : ' + e.message, 'danger');&#10;            } finally {&#10;                this.loading = false;&#10;            }&#10;        },&#10;&#10;        // Gestion des caméras&#10;        async cutToCamera(inputId) {&#10;            try {&#10;                const response = await fetch('/api/broadcast/camera/cut', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        input: inputId&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    // Trouver le nom de la caméra pour l'afficher dans la notification&#10;                    const inputName = this.inputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.showNotification(`Changement vers ${inputName} effectué (CUT)`, 'success');&#10;                } else {&#10;                    this.showNotification(`Erreur lors du changement de caméra : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async transitionToCamera(inputId) {&#10;            try {&#10;                const response = await fetch('/api/broadcast/camera/transition', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        input: inputId,&#10;                        duration: this.transitionDuration,&#10;                        effect: this.transitionEffect&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    // Trouver le nom de la caméra pour l'afficher dans la notification&#10;                    const inputName = this.inputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.showNotification(`Transition vers ${inputName} effectuée`, 'success');&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la transition : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Gestion audio&#10;        async toggleAudio(inputId) {&#10;            try {&#10;                const currentState = this.audioStates[inputId];&#10;&#10;                const response = await fetch('/api/broadcast/audio/toggle', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        input: inputId,&#10;                        mute: currentState // Si true (unmuted), on demande de muter&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    // Inverser l'état audio localement&#10;                    this.audioStates[inputId] = !currentState;&#10;&#10;                    // Trouver le nom de la source pour l'afficher dans la notification&#10;                    const inputName = this.inputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    const statusText = this.audioStates[inputId] ? 'activé' : 'désactivé';&#10;                    this.showNotification(`Audio ${statusText} pour ${inputName}`, 'success');&#10;                } else {&#10;                    this.showNotification(`Erreur lors du changement d'état audio : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async adjustVolume(inputId) {&#10;            const volume = this.audioVolumes[inputId];&#10;            try {&#10;                const response = await fetch('/api/broadcast/audio/volume', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        input: inputId,&#10;                        volume: volume&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    // Trouver le nom de la source pour l'afficher dans la notification&#10;                    const inputName = this.inputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.showNotification(`Volume réglé à ${volume}% pour ${inputName}`, 'info');&#10;                } else {&#10;                    this.showNotification(`Erreur lors de l'ajustement du volume : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Contrôle du streaming&#10;        async startStreaming() {&#10;            try {&#10;                const response = await fetch('/api/broadcast/streaming', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        action: 'Start'&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification('Streaming démarré avec succès', 'success');&#10;                } else {&#10;                    this.showNotification(`Erreur lors du démarrage du streaming : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async stopStreaming() {&#10;            try {&#10;                const response = await fetch('/api/broadcast/streaming', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        action: 'Stop'&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification('Streaming arrêté avec succès', 'warning');&#10;                } else {&#10;                    this.showNotification(`Erreur lors de l'arrêt du streaming : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Gestion des replays&#10;        async setReplayDuration() {&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/duration', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        duration: this.replayDuration&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification(`Durée du buffer de replay définie à ${this.replayDuration} secondes`, 'success');&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la définition de la durée du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async startReplayRecording() {&#10;            if (this.isRecordingReplay) {&#10;                this.showNotification('Un replay est déjà en cours d\'enregistrement', 'warning');&#10;                return;&#10;            }&#10;&#10;            this.isRecordingReplay = true;&#10;&#10;            // Démarrer l'enregistrement du replay&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/start', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        duration: this.replayDuration&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification(`Enregistrement du replay démarré (Durée : ${this.replayDuration}s)`, 'success');&#10;                } else {&#10;                    this.isRecordingReplay = false;&#10;                    this.showNotification(`Erreur lors du démarrage de l'enregistrement du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.isRecordingReplay = false;&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async stopReplayRecording() {&#10;            if (!this.isRecordingReplay) {&#10;                this.showNotification('Aucun replay n\'est en cours d\'enregistrement', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Arrêter l'enregistrement du replay&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/stop', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    }&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.isRecordingReplay = false;&#10;                    this.showNotification('Enregistrement du replay arrêté avec succès', 'success');&#10;&#10;                    // Réinitialiser le nom de l'événement&#10;                    this.eventName = '';&#10;                } else {&#10;                    this.showNotification(`Erreur lors de l'arrêt de l'enregistrement du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async markReplayEvent() {&#10;            if (!this.isRecordingReplay) {&#10;                this.showNotification('Aucun replay n\'est en cours d\'enregistrement. Impossible de marquer un événement.', 'warning');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                const eventData = {&#10;                    name: this.eventName || `Événement ${this.replayEvents.length + 1}`,&#10;                    timestamp: Date.now(),&#10;                    // Ajouter la durée du buffer comme référence&#10;                    duration: this.replayDuration&#10;                };&#10;&#10;                const response = await fetch('/api/broadcast/replay/mark', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify(eventData)&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    // Ajout de l'index vMix au marquage pour le retrouver plus facilement&#10;                    eventData.vmixIndex = data.eventIndex || 0;&#10;                    this.replayEvents.push(eventData);&#10;                    this.showNotification(`Événement &quot;${eventData.name}&quot; marqué avec succès`, 'success');&#10;                    this.eventName = ''; // Réinitialiser le nom après marquage&#10;                } else {&#10;                    this.showNotification(`Erreur lors du marquage de l'événement : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async playLastReplay(speed) {&#10;            if (this.replayEvents.length === 0) {&#10;                this.showNotification('Aucun événement de replay disponible', 'warning');&#10;                return;&#10;            }&#10;&#10;            const lastEvent = this.replayEvents[this.replayEvents.length - 1];&#10;            await this.playReplayEvent(this.replayEvents.length - 1, speed);&#10;&#10;            // Réinitialiser les compteurs lorsqu'un replay est joué&#10;            this.resetConsecutivePointsOnReplay();&#10;        },&#10;&#10;        async playReplayEvent(index, speed) {&#10;            const event = this.replayEvents[index];&#10;            if (!event) {&#10;                this.showNotification('Événement de replay non trouvé', 'danger');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/play', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        timestamp: event.timestamp,&#10;                        speed: speed&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification(`Lecture du replay &quot;${event.name}&quot; à ${speed}%`, 'success');&#10;&#10;                    // Réinitialiser les compteurs lorsqu'un replay est joué&#10;                    this.resetConsecutivePointsOnReplay();&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la lecture du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        async pauseReplay() {&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/pause', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    }&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification('Replay mis en pause', 'info');&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la mise en pause du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Chargement des événements de replay&#10;        async loadReplays() {&#10;            try {&#10;                const response = await fetch('/api/broadcast/replays');&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.replayEvents = data.replays;&#10;                } else {&#10;                    this.showNotification('Erreur lors du chargement des replays : ' + (data.error || &quot;Erreur inconnue&quot;), 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification('Erreur de communication avec le serveur : ' + e.message, 'danger');&#10;            }&#10;        },&#10;&#10;        // Suppression d'un événement de replay&#10;        async deleteReplay(event) {&#10;            try {&#10;                const response = await fetch('/api/broadcast/replay/delete', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        timestamp: event.timestamp&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification(`Replay &quot;${event.name}&quot; supprimé`, 'success');&#10;&#10;                    // Mettre à jour la liste des événements de replay&#10;                    this.replayEvents = this.replayEvents.filter(e =&gt; e.timestamp !== event.timestamp);&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la suppression du replay : ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur : ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Nouvelles méthodes pour la gestion du score&#10;&#10;        // Ajouter un point à l'équipe A&#10;        addPointTeamA() {&#10;            this.scoreTeamA++;&#10;            this.consecutivePointsA++;&#10;            this.consecutivePointsB = 0; // Réinitialiser le compteur de l'équipe adverse&#10;            this.totalPointsSinceReplay++; // Incrémenter le compteur total&#10;&#10;            // Vérifier si le set est terminé (en volleyball, un set se termine généralement à 25 points avec 2 points d'écart)&#10;            if (this.scoreTeamA &gt;= 25 &amp;&amp; this.scoreTeamA - this.scoreTeamB &gt;= 2) {&#10;                this.setsTeamA++;&#10;                this.showNotification(`L'équipe A remporte le set: ${this.scoreTeamA}-${this.scoreTeamB}`, 'success');&#10;                this.resetSetScores();&#10;            }&#10;&#10;            // Mettre à jour le score dans vMix&#10;            this.updateScoreInVMix();&#10;&#10;            // Marquer automatiquement un point pour un éventuel ralenti&#10;            this.markPointForReplay(`Point équipe A (${this.scoreTeamA}-${this.scoreTeamB})`);&#10;        },&#10;&#10;        // Retirer un point à l'équipe A (correction)&#10;        removePointTeamA() {&#10;            if (this.scoreTeamA &gt; 0) {&#10;                this.scoreTeamA--;&#10;                this.consecutivePointsA = Math.max(0, this.consecutivePointsA - 1);&#10;                this.updateScoreInVMix();&#10;            }&#10;        },&#10;&#10;        // Ajouter un point à l'équipe B&#10;        addPointTeamB() {&#10;            this.scoreTeamB++;&#10;            this.consecutivePointsB++;&#10;            this.consecutivePointsA = 0; // Réinitialiser le compteur de l'équipe adverse&#10;            this.totalPointsSinceReplay++; // Incrémenter le compteur total&#10;&#10;            // Vérifier si le set est terminé&#10;            if (this.scoreTeamB &gt;= 25 &amp;&amp; this.scoreTeamB - this.scoreTeamA &gt;= 2) {&#10;                this.setsTeamB++;&#10;                this.showNotification(`L'équipe B remporte le set: ${this.scoreTeamB}-${this.scoreTeamA}`, 'success');&#10;                this.resetSetScores();&#10;            }&#10;&#10;            // Mettre à jour le score dans vMix&#10;            this.updateScoreInVMix();&#10;&#10;            // Marquer automatiquement un point pour un éventuel ralenti&#10;            this.markPointForReplay(`Point équipe B (${this.scoreTeamB}-${this.scoreTeamA})`);&#10;        },&#10;&#10;        // Retirer un point à l'équipe B (correction)&#10;        removePointTeamB() {&#10;            if (this.scoreTeamB &gt; 0) {&#10;                this.scoreTeamB--;&#10;                this.consecutivePointsB = Math.max(0, this.consecutivePointsB - 1);&#10;                this.updateScoreInVMix();&#10;            }&#10;        },&#10;&#10;        // Réinitialiser les scores pour un nouveau set&#10;        resetSetScores() {&#10;            this.scoreTeamA = 0;&#10;            this.scoreTeamB = 0;&#10;            this.consecutivePointsA = 0;&#10;            this.consecutivePointsB = 0;&#10;        },&#10;&#10;        // Mettre à jour le score dans vMix&#10;        async updateScoreInVMix() {&#10;            // Vérifier si nous avons trouvé un titre de scoreboard&#10;            if (!this.scoreboardTitleId) {&#10;                this.showNotification(&quot;Impossible de trouver le titre scoreboard dans vMix&quot;, 'warning');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                const response = await fetch('/api/vmix/update-title', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        inputId: this.scoreboardTitleId,&#10;                        values: {&#10;                            TeamAName: this.teamAName,&#10;                            TeamBName: this.teamBName,&#10;                            ScoreA: this.scoreTeamA.toString(),&#10;                            ScoreB: this.scoreTeamB.toString(),&#10;                            SetsA: this.setsTeamA.toString(),&#10;                            SetsB: this.setsTeamB.toString()&#10;                        }&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;                if (data.success) {&#10;                    this.showNotification(&quot;Score mis à jour dans vMix&quot;, 'success', 1500);&#10;                } else {&#10;                    this.showNotification(`Erreur lors de la mise à jour du score: ${data.error || &quot;Erreur inconnue&quot;}`, 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification(`Erreur de communication avec le serveur: ${e.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Suggérer un replay pour l'équipe A après 3+ points consécutifs&#10;        suggestReplayForTeamA() {&#10;            // Mettre en pause l'enregistrement actuel si nécessaire&#10;            if (this.isRecordingReplay) {&#10;                this.stopReplayRecording();&#10;            }&#10;&#10;            // Définir le nom de l'événement pour le replay&#10;            this.eventName = `Série de ${this.consecutivePointsA} points - Équipe A`;&#10;&#10;            // Démarrer l'enregistrement pour le prochain point&#10;            this.startReplayRecording();&#10;&#10;            // Afficher une notification pour confirmer l'action&#10;            this.showNotification(`Enregistrement lancé pour la série de points de l'équipe A`, 'info');&#10;&#10;            // Réinitialiser le compteur après avoir suggéré un replay&#10;            this.consecutivePointsA = 0;&#10;        },&#10;&#10;        // Suggérer un replay pour l'équipe B après 3+ points consécutifs&#10;        suggestReplayForTeamB() {&#10;            // Mettre en pause l'enregistrement actuel si nécessaire&#10;            if (this.isRecordingReplay) {&#10;                this.stopReplayRecording();&#10;            }&#10;&#10;            // Définir le nom de l'événement pour le replay&#10;            this.eventName = `Série de ${this.consecutivePointsB} points - Équipe B`;&#10;&#10;            // Démarrer l'enregistrement pour le prochain point&#10;            this.startReplayRecording();&#10;&#10;            // Afficher une notification pour confirmer l'action&#10;            this.showNotification(`Enregistrement lancé pour la série de points de l'équipe B`, 'info');&#10;&#10;            // Réinitialiser le compteur après avoir suggéré un replay&#10;            this.consecutivePointsB = 0;&#10;        },&#10;&#10;        // Réinitialiser les compteurs de points consécutifs lorsqu'un replay est joué&#10;        resetConsecutivePointsOnReplay() {&#10;            this.consecutivePointsA = 0;&#10;            this.consecutivePointsB = 0;&#10;            this.totalPointsSinceReplay = 0; // Réinitialiser le compteur total&#10;            this.lastReplayTimestamp = Date.now();&#10;        },&#10;&#10;        // Suggérer un replay basé sur le nombre total de points marqués&#10;        suggestReplayForTotalPoints() {&#10;            // Mettre en pause l'enregistrement actuel si nécessaire&#10;            if (this.isRecordingReplay) {&#10;                this.stopReplayRecording();&#10;            }&#10;&#10;            // Définir le nom de l'événement pour le replay&#10;            this.eventName = `Dernier(s) ${this.totalPointsSinceReplay} point(s) - Score: ${this.scoreTeamA}-${this.scoreTeamB}`;&#10;&#10;            // Démarrer l'enregistrement pour le prochain point&#10;            this.startReplayRecording();&#10;&#10;            // Afficher une notification pour confirmer l'action&#10;            this.showNotification(`Enregistrement lancé pour les derniers points`, 'info');&#10;&#10;            // Réinitialiser le compteur total après avoir suggéré un replay&#10;            this.totalPointsSinceReplay = 0;&#10;        },&#10;        // Créer une popup de confirmation pour suggérer un replay&#10;        showReplaySuggestion(team, points) {&#10;            // Créer une notification persistante (durée plus longue)&#10;            const message = `${team} a marqué ${points} points sans ralenti. Lancer un replay?`;&#10;            const id = this.notificationCounter++;&#10;&#10;            // Créer un élément DOM pour la notification spéciale&#10;            const notifElement = document.createElement('div');&#10;            notifElement.className = 'toast show text-bg-warning';&#10;            notifElement.style.zIndex = '1060';&#10;&#10;            notifElement.innerHTML = `&#10;                &lt;div class=&quot;toast-header&quot;&gt;&#10;                    &lt;strong class=&quot;me-auto&quot;&gt;Suggestion de Replay&lt;/strong&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;toast-body&quot;&gt;&#10;                    &lt;p&gt;${message}&lt;/p&gt;&#10;                    &lt;div class=&quot;mt-2 pt-2 border-top&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm&quot; id=&quot;accept-replay&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Lancer un replay&#10;                        &lt;/button&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-sm&quot; id=&quot;reject-replay&quot;&gt;&#10;                            Ignorer&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            `;&#10;&#10;            // Ajouter la notification à la page&#10;            const notifContainer = document.querySelector('.position-fixed.top-0.end-0.p-3');&#10;            notifContainer.appendChild(notifElement);&#10;&#10;            // Gérer les boutons de la notification&#10;            notifElement.querySelector('#accept-replay').addEventListener('click', () =&gt; {&#10;                if (team === 'Équipe A') {&#10;                    this.suggestReplayForTeamA();&#10;                } else {&#10;                    this.suggestReplayForTeamB();&#10;                }&#10;                notifContainer.removeChild(notifElement);&#10;            });&#10;&#10;            notifElement.querySelector('#reject-replay, .btn-close').addEventListener('click', () =&gt; {&#10;                notifContainer.removeChild(notifElement);&#10;            });&#10;&#10;            // Auto-supprimer après 15 secondes&#10;            setTimeout(() =&gt; {&#10;                if (notifElement.parentNode === notifContainer) {&#10;                    notifContainer.removeChild(notifElement);&#10;                }&#10;            }, 15000);&#10;        },&#10;&#10;        // Créer une popup de confirmation pour suggérer un replay basé sur le nombre total de points&#10;        showTotalPointsReplaySuggestion(totalPoints) {&#10;            // Créer une notification persistante (durée plus longue)&#10;            const message = `${totalPoints} points ont été marqués depuis le dernier ralenti.`;&#10;            const id = this.notificationCounter++;&#10;&#10;            // Créer un élément DOM pour la notification spéciale&#10;            const notifElement = document.createElement('div');&#10;            notifElement.className = 'toast show text-bg-warning';&#10;            notifElement.style.zIndex = '1060';&#10;&#10;            notifElement.innerHTML = `&#10;                &lt;div class=&quot;toast-header&quot;&gt;&#10;                    &lt;strong class=&quot;me-auto&quot;&gt;Suggestion de Replay&lt;/strong&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;toast-body&quot;&gt;&#10;                    &lt;p&gt;${message}&lt;/p&gt;&#10;                    &lt;div class=&quot;mt-2 pt-2 border-top&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm&quot; id=&quot;accept-replay&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Lancer un replay&#10;                        &lt;/button&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-sm&quot; id=&quot;reject-replay&quot;&gt;&#10;                            Ignorer&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            `;&#10;&#10;            // Ajouter la notification à la page&#10;            const notifContainer = document.querySelector('.position-fixed.top-0.end-0.p-3');&#10;            notifContainer.appendChild(notifElement);&#10;&#10;            // Gérer les boutons de la notification&#10;            notifElement.querySelector('#accept-replay').addEventListener('click', () =&gt; {&#10;                this.suggestReplayForTotalPoints();&#10;                notifContainer.removeChild(notifElement);&#10;            });&#10;&#10;            notifElement.querySelector('#reject-replay, .btn-close').addEventListener('click', () =&gt; {&#10;                notifContainer.removeChild(notifElement);&#10;            });&#10;&#10;            // Auto-supprimer après 15 secondes&#10;            setTimeout(() =&gt; {&#10;                if (notifElement.parentNode === notifContainer) {&#10;                    notifContainer.removeChild(notifElement);&#10;                }&#10;            }, 15000);&#10;        },&#10;&#10;        // Méthode pour charger les équipes actuelles depuis la configuration&#10;        async loadTeamNames() {&#10;            try {&#10;                const response = await fetch('/api/setup/teams');&#10;                const data = await response.json();&#10;&#10;                if (data.success &amp;&amp; data.teams &amp;&amp; data.teams.length &gt;= 2) {&#10;                    // Récupérer les noms des deux premières équipes&#10;                    this.teamAName = data.teams[0].name || 'Équipe A';&#10;                    this.teamBName = data.teams[1].name || 'Équipe B';&#10;&#10;                    // Mettre à jour le score dans vMix avec les nouveaux noms&#10;                    this.updateScoreInVMix();&#10;                }&#10;            } catch (e) {&#10;                console.error('Erreur lors du chargement des équipes:', e);&#10;                // Utiliser les noms par défaut&#10;            }&#10;        },&#10;&#10;        // Marquer automatiquement chaque point pour un ralenti potentiel&#10;        markPointForReplay(pointName) {&#10;            // Si un enregistrement est déjà en cours, marquer le point comme événement&#10;            if (this.isRecordingReplay) {&#10;                // Sauvegarder le nom d'événement actuel&#10;                const currentEventName = this.eventName;&#10;&#10;                // Définir le nom de l'événement pour ce point&#10;                this.eventName = pointName;&#10;&#10;                // Marquer l'événement&#10;                this.markReplayEvent();&#10;&#10;                // Restaurer le nom d'événement précédent&#10;                this.eventName = currentEventName;&#10;            } else {&#10;                // Si aucun enregistrement n'est en cours, démarrer un nouvel enregistrement&#10;                // et se préparer à marquer ce point et les suivants&#10;                this.eventName = pointName;&#10;                this.startReplayRecording();&#10;&#10;                // Ajouter une notification discrète pour indiquer que l'enregistrement a commencé&#10;                this.showNotification(`Enregistrement démarré pour &quot;${pointName}&quot;`, 'info', 2000);&#10;&#10;                // Marquer ce point après un court délai pour s'assurer que l'enregistrement est démarré&#10;                setTimeout(() =&gt; {&#10;                    if (this.isRecordingReplay) {&#10;                        this.markReplayEvent();&#10;                    }&#10;                }, 500);&#10;            }&#10;        }&#10;    },&#10;    mounted() {&#10;        // Charger les inputs au démarrage&#10;        this.loadInputs();&#10;&#10;        // Charger les replays existants&#10;        this.loadReplays();&#10;&#10;        // Charger les noms des équipes&#10;        this.loadTeamNames();&#10;&#10;        // Mettre en place un rafraîchissement périodique&#10;        setInterval(() =&gt; {&#10;            this.loadInputs();&#10;        }, 10000); // Rafraîchir toutes les 10 secondes&#10;&#10;        // Écouter les événements de socket.io si nécessaire&#10;        const socket = io();&#10;        socket.on('vmix_status_update', (data) =&gt; {&#10;            // Rafraîchir les inputs lorsque le statut vMix est mis à jour&#10;            this.loadInputs();&#10;        });&#10;&#10;        socket.on('replay_marked', (eventData) =&gt; {&#10;            // Ajouter un nouvel événement de replay à la liste&#10;            this.replayEvents.push(eventData);&#10;            this.showNotification(`Nouvel événement de replay reçu: ${eventData.name}`, 'info');&#10;        });&#10;&#10;        // Observer les points consécutifs et suggérer un replay si nécessaire&#10;        this.$watch('totalPointsSinceReplay', (newValue, oldValue) =&gt; {&#10;            if (newValue &gt;= 3 &amp;&amp; newValue &gt; oldValue) {&#10;                // Suggérer un replay après 3 points au total&#10;                this.showTotalPointsReplaySuggestion(newValue);&#10;            }&#10;        });&#10;&#10;        // Conserver les observateurs individuels également pour offrir plus de possibilités&#10;        this.$watch('consecutivePointsA', (newValue, oldValue) =&gt; {&#10;            if (newValue &gt;= 3 &amp;&amp; newValue &gt; oldValue) {&#10;                // Suggérer un replay après 3 points ou plus&#10;                this.showReplaySuggestion('Équipe A', newValue);&#10;            }&#10;        });&#10;&#10;        this.$watch('consecutivePointsB', (newValue, oldValue) =&gt; {&#10;            if (newValue &gt;= 3 &amp;&amp; newValue &gt; oldValue) {&#10;                // Suggérer un replay après 3 points ou plus&#10;                this.showReplaySuggestion('Équipe B', newValue);&#10;            }&#10;        });&#10;    }&#10;}).mount('#diffusion-app');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v2_0/app/static/js/roster_import.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/static/js/roster_import.js" />
              <option name="updatedContent" value="// Module pour gérer l'importation des listes de joueurs&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    delimiters: ['[[', ']]'], // Pour éviter les conflits avec Jinja&#10;    data() {&#10;        return {&#10;            loading: false,&#10;            isSubmitting: false,&#10;            teamName: '',&#10;            teamLogo: '',&#10;            selectedTitleInput: '',&#10;            titleInputs: [],&#10;            notifications: [],&#10;            notificationCounter: 0,&#10;            importedPlayers: [],&#10;            importedTeamName: ''&#10;        };&#10;    },&#10;    methods: {&#10;        // Système de notifications&#10;        showNotification(message, type = 'info', duration = 5000) {&#10;            const id = this.notificationCounter++;&#10;            this.notifications.push({ id, message, type });&#10;            &#10;            // Auto-supprimer après la durée spécifiée&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, duration);&#10;        },&#10;        &#10;        // Chargement des inputs vMix de type titre&#10;        async loadTitleInputs() {&#10;            this.loading = true;&#10;            try {&#10;                const response = await fetch('/api/roster/vmix-inputs');&#10;                const data = await response.json();&#10;                &#10;                if (data.success) {&#10;                    this.titleInputs = data.inputs;&#10;                    if (this.titleInputs.length === 0) {&#10;                        this.showNotification('Aucun titre vMix trouvé. Veuillez créer un titre dans vMix.', 'warning');&#10;                    }&#10;                } else {&#10;                    this.showNotification('Erreur lors du chargement des titres vMix : ' + (data.error || &quot;Erreur inconnue&quot;), 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification('Erreur de communication avec le serveur : ' + e.message, 'danger');&#10;            } finally {&#10;                this.loading = false;&#10;            }&#10;        },&#10;        &#10;        // Import de la liste de joueurs&#10;        async importRoster() {&#10;            if (!this.selectedTitleInput) {&#10;                this.showNotification('Veuillez sélectionner un titre vMix', 'warning');&#10;                return;&#10;            }&#10;            &#10;            const fileInput = this.$refs.csvFileInput;&#10;            if (!fileInput.files || fileInput.files.length === 0) {&#10;                this.showNotification('Veuillez sélectionner un fichier CSV', 'warning');&#10;                return;&#10;            }&#10;            &#10;            this.isSubmitting = true;&#10;            &#10;            try {&#10;                const formData = new FormData();&#10;                formData.append('csvFile', fileInput.files[0]);&#10;                formData.append('teamName', this.teamName);&#10;                formData.append('teamLogo', this.teamLogo);&#10;                formData.append('titleInput', this.selectedTitleInput);&#10;                &#10;                const response = await fetch('/api/roster/import-csv', {&#10;                    method: 'POST',&#10;                    body: formData&#10;                });&#10;                &#10;                const data = await response.json();&#10;                &#10;                if (data.success) {&#10;                    this.showNotification(data.message, 'success');&#10;                    this.importedPlayers = data.players;&#10;                    this.importedTeamName = data.teamName;&#10;                    &#10;                    // Réinitialiser le champ de fichier&#10;                    fileInput.value = '';&#10;                } else {&#10;                    this.showNotification('Erreur lors de l\'importation : ' + (data.error || &quot;Erreur inconnue&quot;), 'danger');&#10;                }&#10;            } catch (e) {&#10;                this.showNotification('Erreur de communication avec le serveur : ' + e.message, 'danger');&#10;            } finally {&#10;                this.isSubmitting = false;&#10;            }&#10;        }&#10;    },&#10;    mounted() {&#10;        this.loadTitleInputs();&#10;        &#10;        // Écouter les événements de socket.io si nécessaire&#10;        const socket = io();&#10;        socket.on('vmix_status_update', () =&gt; {&#10;            this.loadTitleInputs();&#10;        });&#10;    }&#10;}).mount('#roster-app');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v2_0/app/static/js/setup_team.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/static/js/setup_team.js" />
              <option name="originalContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const teamForm = document.getElementById('team-form');&#10;    const messageDiv = document.getElementById('message');&#10;&#10;    // Vérifier si l'élément teamForm existe avant d'ajouter un écouteur d'événement&#10;    if (teamForm) {&#10;        teamForm.addEventListener('submit', function(e) {&#10;            e.preventDefault();&#10;&#10;            // Créer un FormData pour envoyer les fichiers&#10;            const formData = new FormData(teamForm);&#10;&#10;            // Envoyer les données au serveur avec le bon chemin&#10;            fetch('/team/create_team', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    messageDiv.innerHTML = `&lt;div class=&quot;error&quot;&gt;${data.error}&lt;/div&gt;`;&#10;                } else {&#10;                    messageDiv.innerHTML = `&lt;div class=&quot;success&quot;&gt;${data.message}&lt;/div&gt;`;&#10;                    // Réinitialiser le formulaire&#10;                    teamForm.reset();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                messageDiv.innerHTML = `&lt;div class=&quot;error&quot;&gt;Erreur: ${error.message}&lt;/div&gt;`;&#10;            });&#10;        });&#10;    }&#10;});&#10;&#10;// Configuration du socket.io&#10;const socket = io();&#10;&#10;// Application Vue pour la gestion des équipes&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // Gestion des notifications&#10;            notifications: [],&#10;            notificationId: 0,&#10;&#10;            // Liste des équipes existantes&#10;            teams: [],&#10;&#10;            // Nouvelle équipe (pour l'ajout d'équipe)&#10;            newTeam: {&#10;                name: '',&#10;                logo: null,&#10;                players: null&#10;            },&#10;&#10;            // Équipe A (domicile)&#10;            teamA: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Équipe B (visiteur)&#10;            teamB: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Sélection des joueurs pour l'affichage des détails&#10;            selectedTeamId: '',&#10;            teamPlayers: [],&#10;            selectedPlayerId: ''&#10;        }&#10;    },&#10;&#10;    computed: {&#10;        // Propriété calculée pour obtenir les détails du joueur sélectionné&#10;        selectedPlayer() {&#10;            if (this.selectedPlayerId === '' || !this.teamPlayers[this.selectedPlayerId]) {&#10;                return {};&#10;            }&#10;            return this.teamPlayers[this.selectedPlayerId];&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Charger la liste des équipes existantes&#10;        this.loadTeams();&#10;&#10;        // Écouter les événements socket&#10;        socket.on('connect', () =&gt; {&#10;            this.addNotification('Connexion établie avec le serveur', 'success');&#10;        });&#10;&#10;        socket.on('disconnect', () =&gt; {&#10;            this.addNotification('Connexion perdue avec le serveur', 'danger');&#10;        });&#10;&#10;        // Configuration du socket.io et gestion des événements&#10;        socket.on('team_created', (teamData) =&gt; {&#10;            this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été créée avec succès`, 'success');&#10;            this.teams.push(teamData);&#10;        });&#10;&#10;        socket.on('team_updated', (teamData) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === teamData.id);&#10;            if (index !== -1) {&#10;                this.teams[index] = teamData;&#10;                this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été mise à jour`, 'success');&#10;            }&#10;        });&#10;&#10;        socket.on('team_deleted', (data) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === data.id);&#10;            if (index !== -1) {&#10;                const teamName = this.teams[index].name;&#10;                this.teams.splice(index, 1);&#10;                this.addNotification(`L'équipe &quot;${teamName}&quot; a été supprimée`, 'warning');&#10;            }&#10;        });&#10;&#10;        // Initialiser la navigation par onglets&#10;        this.initTabs();&#10;    },&#10;&#10;    methods: {&#10;        // Gestion des notifications&#10;        addNotification(message, type = 'info') {&#10;            const id = this.notificationId++;&#10;            this.notifications.push({ id, message, type });&#10;&#10;            // Supprimer automatiquement après 5 secondes&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, 5000);&#10;        },&#10;&#10;        // Initialiser la navigation par onglets&#10;        initTabs() {&#10;            document.querySelectorAll('.nav-link').forEach(link =&gt; {&#10;                link.addEventListener('click', (e) =&gt; {&#10;                    e.preventDefault();&#10;&#10;                    // Retirer la classe active de tous les liens&#10;                    document.querySelectorAll('.nav-link').forEach(l =&gt; {&#10;                        l.classList.remove('active');&#10;                    });&#10;&#10;                    // Ajouter la classe active au lien cliqué&#10;                    e.target.classList.add('active');&#10;&#10;                    // Afficher la section correspondante&#10;                    const targetId = e.target.getAttribute('href');&#10;                    document.querySelectorAll('.card').forEach(card =&gt; {&#10;                        if (card.id &amp;&amp; card.id === targetId.substring(1)) {&#10;                            card.style.display = 'block';&#10;                        } else if (card.id) {&#10;                            card.style.display = 'none';&#10;                        }&#10;                    });&#10;                });&#10;            });&#10;        },&#10;&#10;        // Charger la liste des équipes existantes&#10;        loadTeams() {&#10;            fetch('/team/teams')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.teams = data.teams || [];&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors du chargement des équipes: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Créer une nouvelle équipe (depuis la section gestion des équipes)&#10;        createTeam(event) {&#10;            event.preventDefault();&#10;&#10;            if (!this.newTeam.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            const formData = new FormData();&#10;            formData.append('team_name', this.newTeam.name);&#10;&#10;            if (this.newTeam.logo) {&#10;                formData.append('team_logo', this.newTeam.logo);&#10;            }&#10;&#10;            if (this.newTeam.players) {&#10;                formData.append('players_csv', this.newTeam.players);&#10;            }&#10;&#10;            // Envoi via l'API&#10;            fetch('/team/create_team', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(`Équipe &quot;${this.newTeam.name}&quot; créée avec succès`, 'success');&#10;                    // Réinitialisation du formulaire&#10;                    this.newTeam.name = '';&#10;                    this.newTeam.logo = null;&#10;                    this.newTeam.players = null;&#10;                    document.getElementById('team_logo').value = '';&#10;                    document.getElementById('players_csv').value = '';&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                this.addNotification(`Erreur lors de la création de l'équipe: ${error.message}`, 'danger');&#10;            });&#10;        },&#10;&#10;        // Gérer l'upload du logo pour la nouvelle équipe&#10;        handleNewTeamLogoUpload(event) {&#10;            this.newTeam.logo = event.target.files[0];&#10;        },&#10;&#10;        // Gérer l'upload du fichier CSV pour la nouvelle équipe&#10;        handleNewTeamCsvUpload(event) {&#10;            this.newTeam.players = event.target.files[0];&#10;        },&#10;&#10;        // Gérer l'upload du logo pour les équipes A et B&#10;        handleLogoUpload(team) {&#10;            const file = event.target.files[0];&#10;            if (team === 'A') {&#10;                this.teamA.logo = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.logo = file;&#10;            }&#10;        },&#10;&#10;        // Gérer l'upload du fichier CSV pour les équipes A et B&#10;        handleCsvUpload(team) {&#10;            const file = event.target.files[0];&#10;            if (team === 'A') {&#10;                this.teamA.players = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.players = file;&#10;            }&#10;        },&#10;&#10;        // Sélectionner une équipe existante comme équipe A&#10;        selectTeamA() {&#10;            if (!this.teamA.selectedId) return;&#10;&#10;            // Désactiver la création d'une nouvelle équipe si une équipe existante est sélectionnée&#10;            if (this.teamA.selectedId) {&#10;                this.teamA.createNew = false;&#10;            }&#10;&#10;            // Trouver l'équipe dans la liste&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamA.selectedId);&#10;            if (selectedTeam) {&#10;                this.teamA.name = selectedTeam.name;&#10;                this.teamA.logo = selectedTeam.logo;&#10;                this.teamA.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;            }&#10;        },&#10;&#10;        // Sélectionner une équipe existante comme équipe B&#10;        selectTeamB() {&#10;            if (!this.teamB.selectedId) return;&#10;&#10;            // Désactiver la création d'une nouvelle équipe si une équipe existante est sélectionnée&#10;            if (this.teamB.selectedId) {&#10;                this.teamB.createNew = false;&#10;            }&#10;&#10;            // Trouver l'équipe dans la liste&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamB.selectedId);&#10;            if (selectedTeam) {&#10;                this.teamB.name = selectedTeam.name;&#10;                this.teamB.logo = selectedTeam.logo;&#10;                this.teamB.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;            }&#10;        },&#10;&#10;        // Envoyer le roster vers vMix&#10;        async sendRosterToVmix(team) {&#10;            let teamData = team === 'A' ? this.teamA : this.teamB;&#10;&#10;            if (!teamData.players) {&#10;                this.addNotification('Aucun fichier CSV de joueurs sélectionné', 'warning');&#10;                return;&#10;            }&#10;&#10;            if (!teamData.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Créer un FormData pour envoyer le fichier CSV et les informations de l'équipe&#10;                const formData = new FormData();&#10;                formData.append('csvFile', teamData.players);&#10;                formData.append('teamName', teamData.name);&#10;&#10;                // Ajouter le logo si disponible&#10;                if (teamData.logo) {&#10;                    formData.append('teamLogo', teamData.logo);&#10;                }&#10;&#10;                // Faire une requête pour récupérer les titres vMix disponibles&#10;                const titlesResponse = await fetch('/api/vmix-inputs');&#10;                const titlesData = await titlesResponse.json();&#10;&#10;                // Chercher le titre &quot;roster.gtzip&quot; parmi les inputs&#10;                let rosterTitleInput = null;&#10;                if (titlesData.success &amp;&amp; titlesData.inputs) {&#10;                    // Chercher un input qui contient &quot;roster&quot; dans son nom&#10;                    rosterTitleInput = titlesData.inputs.find(input =&gt;&#10;                        input.name &amp;&amp; input.name.toLowerCase().includes('roster'));&#10;                }&#10;&#10;                if (!rosterTitleInput) {&#10;                    this.addNotification('Impossible de trouver le titre &quot;roster&quot; dans vMix. Assurez-vous qu\'il est chargé.', 'danger');&#10;                    return;&#10;                }&#10;&#10;                // Ajouter l'ID du titre vMix au formData&#10;                formData.append('titleInput', rosterTitleInput.id);&#10;&#10;                // Envoyer les données au serveur pour mise à jour dans vMix&#10;                const response = await fetch('/team/update_roster_in_vmix', {&#10;                    method: 'POST',&#10;                    body: formData&#10;                });&#10;&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.addNotification(`Liste de joueurs de ${teamData.name} envoyée vers vMix avec succès`, 'success');&#10;                } else {&#10;                    this.addNotification(`Erreur: ${data.error || 'Échec de la mise à jour dans vMix'}`, 'danger');&#10;                }&#10;            } catch (error) {&#10;                this.addNotification(`Erreur lors de l'envoi des données: ${error.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Configurer les équipes pour le match&#10;        saveMatchTeams() {&#10;            // Valider que les équipes A et B sont configurées&#10;            if ((!this.teamA.selectedId &amp;&amp; !this.teamA.createNew) ||&#10;                (!this.teamB.selectedId &amp;&amp; !this.teamB.createNew)) {&#10;                this.addNotification('Veuillez configurer les deux équipes pour le match', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Valider que les noms des nouvelles équipes sont renseignés&#10;            if ((this.teamA.createNew &amp;&amp; !this.teamA.name) ||&#10;                (this.teamB.createNew &amp;&amp; !this.teamB.name)) {&#10;                this.addNotification('Veuillez saisir le nom des équipes', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Vérifier que les équipes sont différentes&#10;            if (!this.teamA.createNew &amp;&amp; !this.teamB.createNew &amp;&amp;&#10;                this.teamA.selectedId === this.teamB.selectedId) {&#10;                this.addNotification('Veuillez sélectionner deux équipes différentes', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Construire les données à envoyer&#10;            const matchData = {&#10;                teamA: this.teamA.createNew ? null : this.teamA.selectedId,&#10;                teamB: this.teamB.createNew ? null : this.teamB.selectedId,&#10;                newTeamA: this.teamA.createNew ? { name: this.teamA.name } : null,&#10;                newTeamB: this.teamB.createNew ? { name: this.teamB.name } : null&#10;            };&#10;&#10;            // Créer un FormData pour les fichiers si nécessaire&#10;            const formData = new FormData();&#10;            formData.append('match_data', JSON.stringify(matchData));&#10;&#10;            // Ajouter les fichiers pour la nouvelle équipe A si nécessaire&#10;            if (this.teamA.createNew) {&#10;                if (this.teamA.logo) formData.append('teamA_logo', this.teamA.logo);&#10;                if (this.teamA.players) formData.append('teamA_players', this.teamA.players);&#10;            }&#10;&#10;            // Ajouter les fichiers pour la nouvelle équipe B si nécessaire&#10;            if (this.teamB.createNew) {&#10;                if (this.teamB.logo) formData.append('teamB_logo', this.teamB.logo);&#10;                if (this.teamB.players) formData.append('teamB_players', this.teamB.players);&#10;            }&#10;&#10;            // Envoyer les données au serveur&#10;            fetch('/api/match/setup-teams', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Configuration des équipes du match enregistrée avec succès', 'success');&#10;                        // Rediriger vers la page de configuration du match si nécessaire&#10;                        if (data.redirect) {&#10;                            window.location.href = data.redirect;&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors de la configuration des équipes: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Voir les détails d'une équipe&#10;        viewTeam(team) {&#10;            // À implémenter: afficher une modal avec les détails de l'équipe&#10;            this.addNotification(`Affichage des détails de l'équipe &quot;${team.name}&quot; - Fonctionnalité à venir`, 'info');&#10;        },&#10;&#10;        // Supprimer une équipe&#10;        deleteTeam(team) {&#10;            if (confirm(`Êtes-vous sûr de vouloir supprimer l'équipe &quot;${team.name}&quot; ?`)) {&#10;                fetch(`/team/teams/${team.id}`, {&#10;                    method: 'DELETE'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    }&#10;                    // La mise à jour de la liste sera gérée par l'événement WebSocket team_deleted&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors de la suppression de l'équipe: ${error.message}`, 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Charger les joueurs d'une équipe sélectionnée&#10;        loadTeamPlayers() {&#10;            if (!this.selectedTeamId) {&#10;                this.teamPlayers = [];&#10;                this.selectedPlayerId = '';&#10;                return;&#10;            }&#10;&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.selectedTeamId);&#10;            if (selectedTeam &amp;&amp; selectedTeam.players) {&#10;                this.teamPlayers = selectedTeam.players;&#10;                this.selectedPlayerId = ''; // Réinitialiser la sélection du joueur&#10;            } else {&#10;                this.teamPlayers = [];&#10;                this.selectedPlayerId = '';&#10;                this.addNotification('Aucun joueur trouvé pour cette équipe', 'warning');&#10;            }&#10;        },&#10;&#10;        // Envoyer les détails d'un joueur vers vMix&#10;        async showPlayerDetailsInVmix() {&#10;            if (this.selectedPlayerId === '') {&#10;                this.addNotification('Veuillez sélectionner un joueur', 'warning');&#10;                return;&#10;            }&#10;&#10;            const player = this.teamPlayers[this.selectedPlayerId];&#10;            if (!player) {&#10;                this.addNotification('Joueur non trouvé', 'danger');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Faire une requête pour récupérer les titres vMix disponibles&#10;                const titlesResponse = await fetch('/api/vmix-inputs');&#10;                const titlesData = await titlesResponse.json();&#10;&#10;                // Chercher le titre &quot;detailPlayer.gtzip&quot; parmi les inputs&#10;                let detailPlayerTitleInput = null;&#10;                if (titlesData.success &amp;&amp; titlesData.inputs) {&#10;                    // Chercher un input qui contient &quot;detailPlayer&quot; dans son nom&#10;                    detailPlayerTitleInput = titlesData.inputs.find(input =&gt;&#10;                        input.name &amp;&amp; input.name.toLowerCase().includes('detailplayer'));&#10;                }&#10;&#10;                if (!detailPlayerTitleInput) {&#10;                    this.addNotification('Impossible de trouver le titre &quot;detailPlayer&quot; dans vMix. Assurez-vous qu\'il est chargé.', 'danger');&#10;                    return;&#10;                }&#10;&#10;                // Préparer les données du joueur à envoyer&#10;                const playerData = {&#10;                    ...player,&#10;                    titleInput: detailPlayerTitleInput.id&#10;                };&#10;&#10;                // Envoyer les données au serveur&#10;                const response = await fetch('/team/show_player_details_in_vmix', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify(playerData)&#10;                });&#10;&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.addNotification(`Détails du joueur ${player.prenom} ${player.nom.toUpperCase()} affichés dans vMix avec succès`, 'success');&#10;                } else {&#10;                    this.addNotification(`Erreur: ${data.error || 'Échec de l\'affichage des détails du joueur dans vMix'}`, 'danger');&#10;                }&#10;            } catch (error) {&#10;                this.addNotification(`Erreur lors de l'envoi des détails du joueur: ${error.message}`, 'danger');&#10;            }&#10;        }&#10;    }&#10;}).mount('#setup-team-app');&#10;" />
              <option name="updatedContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const teamForm = document.getElementById('team-form');&#10;    const messageDiv = document.getElementById('message');&#10;&#10;    // Vérifier si l'élément teamForm existe avant d'ajouter un écouteur d'événement&#10;    if (teamForm) {&#10;        teamForm.addEventListener('submit', function(e) {&#10;            e.preventDefault();&#10;&#10;            // Créer un FormData pour envoyer les fichiers&#10;            const formData = new FormData(teamForm);&#10;&#10;            // Envoyer les données au serveur avec le bon chemin&#10;            fetch('/team/create_team', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    messageDiv.innerHTML = `&lt;div class=&quot;error&quot;&gt;${data.error}&lt;/div&gt;`;&#10;                } else {&#10;                    messageDiv.innerHTML = `&lt;div class=&quot;success&quot;&gt;${data.message}&lt;/div&gt;`;&#10;                    // Réinitialiser le formulaire&#10;                    teamForm.reset();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                messageDiv.innerHTML = `&lt;div class=&quot;error&quot;&gt;Erreur: ${error.message}&lt;/div&gt;`;&#10;            });&#10;        });&#10;    }&#10;});&#10;&#10;// Configuration du socket.io&#10;const socket = io();&#10;&#10;// Application Vue pour la gestion des équipes&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // Gestion des notifications&#10;            notifications: [],&#10;            notificationId: 0,&#10;&#10;            // Liste des équipes existantes&#10;            teams: [],&#10;&#10;            // Nouvelle équipe (pour l'ajout d'équipe)&#10;            newTeam: {&#10;                name: '',&#10;                logo: null,&#10;                players: null&#10;            },&#10;&#10;            // Équipe A (domicile)&#10;            teamA: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Équipe B (visiteur)&#10;            teamB: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Sélection des joueurs pour l'affichage des détails&#10;            selectedTeamId: '',&#10;            teamPlayers: [],&#10;            selectedPlayerId: ''&#10;        }&#10;    },&#10;&#10;    computed: {&#10;        // Propriété calculée pour obtenir les détails du joueur sélectionné&#10;        selectedPlayer() {&#10;            if (this.selectedPlayerId === '' || !this.teamPlayers[this.selectedPlayerId]) {&#10;                return {};&#10;            }&#10;            return this.teamPlayers[this.selectedPlayerId];&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Charger la liste des équipes existantes&#10;        this.loadTeams();&#10;&#10;        // Écouter les événements socket&#10;        socket.on('connect', () =&gt; {&#10;            this.addNotification('Connexion établie avec le serveur', 'success');&#10;        });&#10;&#10;        socket.on('disconnect', () =&gt; {&#10;            this.addNotification('Connexion perdue avec le serveur', 'danger');&#10;        });&#10;&#10;        // Configuration du socket.io et gestion des événements&#10;        socket.on('team_created', (teamData) =&gt; {&#10;            this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été créée avec succès`, 'success');&#10;            this.teams.push(teamData);&#10;        });&#10;&#10;        socket.on('team_updated', (teamData) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === teamData.id);&#10;            if (index !== -1) {&#10;                this.teams[index] = teamData;&#10;                this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été mise à jour`, 'success');&#10;            }&#10;        });&#10;&#10;        socket.on('team_deleted', (data) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === data.id);&#10;            if (index !== -1) {&#10;                const teamName = this.teams[index].name;&#10;                this.teams.splice(index, 1);&#10;                this.addNotification(`L'équipe &quot;${teamName}&quot; a été supprimée`, 'warning');&#10;            }&#10;        });&#10;&#10;        // Initialiser la navigation par onglets&#10;        this.initTabs();&#10;    },&#10;&#10;    methods: {&#10;        // Gestion des notifications&#10;        addNotification(message, type = 'info') {&#10;            const id = this.notificationId++;&#10;            this.notifications.push({ id, message, type });&#10;&#10;            // Supprimer automatiquement après 5 secondes&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, 5000);&#10;        },&#10;&#10;        // Initialiser la navigation par onglets&#10;        initTabs() {&#10;            document.querySelectorAll('.nav-link').forEach(link =&gt; {&#10;                link.addEventListener('click', (e) =&gt; {&#10;                    e.preventDefault();&#10;&#10;                    // Retirer la classe active de tous les liens&#10;                    document.querySelectorAll('.nav-link').forEach(l =&gt; {&#10;                        l.classList.remove('active');&#10;                    });&#10;&#10;                    // Ajouter la classe active au lien cliqué&#10;                    e.target.classList.add('active');&#10;&#10;                    // Afficher la section correspondante&#10;                    const targetId = e.target.getAttribute('href');&#10;                    document.querySelectorAll('.card').forEach(card =&gt; {&#10;                        if (card.id &amp;&amp; card.id === targetId.substring(1)) {&#10;                            card.style.display = 'block';&#10;                        } else if (card.id) {&#10;                            card.style.display = 'none';&#10;                        }&#10;                    });&#10;                });&#10;            });&#10;        },&#10;&#10;        // Charger la liste des équipes existantes&#10;        loadTeams() {&#10;            fetch('/team/teams')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.teams = data.teams || [];&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors du chargement des équipes: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Créer une nouvelle équipe (depuis la section gestion des équipes)&#10;        createTeam(event) {&#10;            event.preventDefault();&#10;&#10;            if (!this.newTeam.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            const formData = new FormData();&#10;            formData.append('team_name', this.newTeam.name);&#10;&#10;            if (this.newTeam.logo) {&#10;                formData.append('team_logo', this.newTeam.logo);&#10;            }&#10;&#10;            if (this.newTeam.players) {&#10;                formData.append('players_csv', this.newTeam.players);&#10;            }&#10;&#10;            // Envoi via l'API&#10;            fetch('/team/create_team', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(`Équipe &quot;${this.newTeam.name}&quot; créée avec succès`, 'success');&#10;                    // Réinitialisation du formulaire&#10;                    this.newTeam.name = '';&#10;                    this.newTeam.logo = null;&#10;                    this.newTeam.players = null;&#10;                    document.getElementById('team_logo').value = '';&#10;                    document.getElementById('players_csv').value = '';&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                this.addNotification(`Erreur lors de la création de l'équipe: ${error.message}`, 'danger');&#10;            });&#10;        },&#10;&#10;        // Gérer l'upload du logo pour la nouvelle équipe&#10;        handleNewTeamLogoUpload(event) {&#10;            this.newTeam.logo = event.target.files[0];&#10;        },&#10;&#10;        // Gérer l'upload du fichier CSV pour la nouvelle équipe&#10;        handleNewTeamCsvUpload(event) {&#10;            this.newTeam.players = event.target.files[0];&#10;        },&#10;&#10;        // Gérer l'upload du logo pour les équipes A et B&#10;        handleLogoUpload(team, event) {&#10;            const file = event.target.files[0];&#10;            if (team === 'A') {&#10;                this.teamA.logo = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.logo = file;&#10;            }&#10;        },&#10;&#10;        // Gérer l'upload du fichier CSV pour les équipes A et B&#10;        handleCsvUpload(team, event) {&#10;            const file = event.target.files[0];&#10;            if (team === 'A') {&#10;                this.teamA.players = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.players = file;&#10;            }&#10;        },&#10;&#10;        // Sélectionner une équipe existante comme équipe A&#10;        selectTeamA() {&#10;            if (!this.teamA.selectedId) return;&#10;&#10;            // Désactiver la création d'une nouvelle équipe si une équipe existante est sélectionnée&#10;            if (this.teamA.selectedId) {&#10;                this.teamA.createNew = false;&#10;            }&#10;&#10;            // Trouver l'équipe dans la liste&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamA.selectedId);&#10;            if (selectedTeam) {&#10;                this.teamA.name = selectedTeam.name;&#10;                this.teamA.logo = selectedTeam.logo;&#10;                this.teamA.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;            }&#10;        },&#10;&#10;        // Sélectionner une équipe existante comme équipe B&#10;        selectTeamB() {&#10;            if (!this.teamB.selectedId) return;&#10;&#10;            // Désactiver la création d'une nouvelle équipe si une équipe existante est sélectionnée&#10;            if (this.teamB.selectedId) {&#10;                this.teamB.createNew = false;&#10;            }&#10;&#10;            // Trouver l'équipe dans la liste&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamB.selectedId);&#10;            if (selectedTeam) {&#10;                this.teamB.name = selectedTeam.name;&#10;                this.teamB.logo = selectedTeam.logo;&#10;                this.teamB.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;            }&#10;        },&#10;&#10;        // Envoyer le roster vers vMix&#10;        async sendRosterToVmix(team) {&#10;            let teamData = team === 'A' ? this.teamA : this.teamB;&#10;&#10;            if (!teamData.players) {&#10;                this.addNotification('Aucun fichier CSV de joueurs sélectionné', 'warning');&#10;                return;&#10;            }&#10;&#10;            if (!teamData.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Créer un FormData pour envoyer le fichier CSV et les informations de l'équipe&#10;                const formData = new FormData();&#10;                formData.append('csvFile', teamData.players);&#10;                formData.append('teamName', teamData.name);&#10;&#10;                // Ajouter le logo si disponible&#10;                if (teamData.logo) {&#10;                    formData.append('teamLogo', teamData.logo);&#10;                }&#10;&#10;                // Faire une requête pour récupérer les titres vMix disponibles&#10;                const titlesResponse = await fetch('/api/vmix-inputs');&#10;                const titlesData = await titlesResponse.json();&#10;&#10;                // Chercher le titre &quot;roster.gtzip&quot; parmi les inputs&#10;                let rosterTitleInput = null;&#10;                if (titlesData.success &amp;&amp; titlesData.inputs) {&#10;                    // Chercher un input qui contient &quot;roster&quot; dans son nom&#10;                    rosterTitleInput = titlesData.inputs.find(input =&gt;&#10;                        input.name &amp;&amp; input.name.toLowerCase().includes('roster'));&#10;                }&#10;&#10;                if (!rosterTitleInput) {&#10;                    this.addNotification('Impossible de trouver le titre &quot;roster&quot; dans vMix. Assurez-vous qu\'il est chargé.', 'danger');&#10;                    return;&#10;                }&#10;&#10;                // Ajouter l'ID du titre vMix au formData&#10;                formData.append('titleInput', rosterTitleInput.id);&#10;&#10;                // Envoyer les données au serveur pour mise à jour dans vMix&#10;                const response = await fetch('/team/update_roster_in_vmix', {&#10;                    method: 'POST',&#10;                    body: formData&#10;                });&#10;&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.addNotification(`Liste de joueurs de ${teamData.name} envoyée vers vMix avec succès`, 'success');&#10;                } else {&#10;                    this.addNotification(`Erreur: ${data.error || 'Échec de la mise à jour dans vMix'}`, 'danger');&#10;                }&#10;            } catch (error) {&#10;                this.addNotification(`Erreur lors de l'envoi des données: ${error.message}`, 'danger');&#10;            }&#10;        },&#10;&#10;        // Configurer les équipes pour le match&#10;        saveMatchTeams() {&#10;            // Valider que les équipes A et B sont configurées&#10;            if ((!this.teamA.selectedId &amp;&amp; !this.teamA.createNew) ||&#10;                (!this.teamB.selectedId &amp;&amp; !this.teamB.createNew)) {&#10;                this.addNotification('Veuillez configurer les deux équipes pour le match', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Valider que les noms des nouvelles équipes sont renseignés&#10;            if ((this.teamA.createNew &amp;&amp; !this.teamA.name) ||&#10;                (this.teamB.createNew &amp;&amp; !this.teamB.name)) {&#10;                this.addNotification('Veuillez saisir le nom des équipes', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Vérifier que les équipes sont différentes&#10;            if (!this.teamA.createNew &amp;&amp; !this.teamB.createNew &amp;&amp;&#10;                this.teamA.selectedId === this.teamB.selectedId) {&#10;                this.addNotification('Veuillez sélectionner deux équipes différentes', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Construire les données à envoyer&#10;            const matchData = {&#10;                teamA: this.teamA.createNew ? null : this.teamA.selectedId,&#10;                teamB: this.teamB.createNew ? null : this.teamB.selectedId,&#10;                newTeamA: this.teamA.createNew ? { name: this.teamA.name } : null,&#10;                newTeamB: this.teamB.createNew ? { name: this.teamB.name } : null&#10;            };&#10;&#10;            // Créer un FormData pour les fichiers si nécessaire&#10;            const formData = new FormData();&#10;            formData.append('match_data', JSON.stringify(matchData));&#10;&#10;            // Ajouter les fichiers pour la nouvelle équipe A si nécessaire&#10;            if (this.teamA.createNew) {&#10;                if (this.teamA.logo) formData.append('teamA_logo', this.teamA.logo);&#10;                if (this.teamA.players) formData.append('teamA_players', this.teamA.players);&#10;            }&#10;&#10;            // Ajouter les fichiers pour la nouvelle équipe B si nécessaire&#10;            if (this.teamB.createNew) {&#10;                if (this.teamB.logo) formData.append('teamB_logo', this.teamB.logo);&#10;                if (this.teamB.players) formData.append('teamB_players', this.teamB.players);&#10;            }&#10;&#10;            // Envoyer les données au serveur&#10;            fetch('/api/match/setup-teams', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Configuration des équipes du match enregistrée avec succès', 'success');&#10;                        // Rediriger vers la page de configuration du match si nécessaire&#10;                        if (data.redirect) {&#10;                            window.location.href = data.redirect;&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors de la configuration des équipes: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Voir les détails d'une équipe&#10;        viewTeam(team) {&#10;            // À implémenter: afficher une modal avec les détails de l'équipe&#10;            this.addNotification(`Affichage des détails de l'équipe &quot;${team.name}&quot; - Fonctionnalité à venir`, 'info');&#10;        },&#10;&#10;        // Supprimer une équipe&#10;        deleteTeam(team) {&#10;            if (confirm(`Êtes-vous sûr de vouloir supprimer l'équipe &quot;${team.name}&quot; ?`)) {&#10;                fetch(`/team/teams/${team.id}`, {&#10;                    method: 'DELETE'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    }&#10;                    // La mise à jour de la liste sera gérée par l'événement WebSocket team_deleted&#10;                })&#10;                .catch(error =&gt; {&#10;                    this.addNotification(`Erreur lors de la suppression de l'équipe: ${error.message}`, 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Charger les joueurs d'une équipe sélectionnée&#10;        loadTeamPlayers() {&#10;            if (!this.selectedTeamId) {&#10;                this.teamPlayers = [];&#10;                this.selectedPlayerId = '';&#10;                return;&#10;            }&#10;&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.selectedTeamId);&#10;            if (selectedTeam &amp;&amp; selectedTeam.players) {&#10;                this.teamPlayers = selectedTeam.players;&#10;                this.selectedPlayerId = ''; // Réinitialiser la sélection du joueur&#10;            } else {&#10;                this.teamPlayers = [];&#10;                this.selectedPlayerId = '';&#10;                this.addNotification('Aucun joueur trouvé pour cette équipe', 'warning');&#10;            }&#10;        },&#10;&#10;        // Envoyer les détails d'un joueur vers vMix&#10;        async showPlayerDetailsInVmix() {&#10;            if (this.selectedPlayerId === '') {&#10;                this.addNotification('Veuillez sélectionner un joueur', 'warning');&#10;                return;&#10;            }&#10;&#10;            const player = this.teamPlayers[this.selectedPlayerId];&#10;            if (!player) {&#10;                this.addNotification('Joueur non trouvé', 'danger');&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Faire une requête pour récupérer les titres vMix disponibles&#10;                const titlesResponse = await fetch('/api/vmix-inputs');&#10;                const titlesData = await titlesResponse.json();&#10;&#10;                // Chercher le titre &quot;detailPlayer.gtzip&quot; parmi les inputs&#10;                let detailPlayerTitleInput = null;&#10;                if (titlesData.success &amp;&amp; titlesData.inputs) {&#10;                    // Chercher un input qui contient &quot;detailPlayer&quot; dans son nom&#10;                    detailPlayerTitleInput = titlesData.inputs.find(input =&gt;&#10;                        input.name &amp;&amp; input.name.toLowerCase().includes('detailplayer'));&#10;                }&#10;&#10;                if (!detailPlayerTitleInput) {&#10;                    this.addNotification('Impossible de trouver le titre &quot;detailPlayer&quot; dans vMix. Assurez-vous qu\'il est chargé.', 'danger');&#10;                    return;&#10;                }&#10;&#10;                // Préparer les données du joueur à envoyer&#10;                const playerData = {&#10;                    ...player,&#10;                    titleInput: detailPlayerTitleInput.id&#10;                };&#10;&#10;                // Envoyer les données au serveur&#10;                const response = await fetch('/team/show_player_details_in_vmix', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify(playerData)&#10;                });&#10;&#10;                const data = await response.json();&#10;&#10;                if (data.success) {&#10;                    this.addNotification(`Détails du joueur ${player.prenom} ${player.nom.toUpperCase()} affichés dans vMix avec succès`, 'success');&#10;                } else {&#10;                    this.addNotification(`Erreur: ${data.error || 'Échec de l\'affichage des détails du joueur dans vMix'}`, 'danger');&#10;                }&#10;            } catch (error) {&#10;                this.addNotification(`Erreur lors de l'envoi des détails du joueur: ${error.message}`, 'danger');&#10;            }&#10;        }&#10;    }&#10;}).mount('#setup-team-app');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v2_0/app/templates/diffusion_live.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/templates/diffusion_live.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Diffusion Live&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='style.css') }}&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        /* Styles spécifiques pour la page de diffusion live */&#10;        .dashboard-card {&#10;            height: 100%;&#10;            transition: all 0.2s;&#10;        }&#10;        .dashboard-card:hover {&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;&#10;        }&#10;        .card-header {&#10;            font-weight: bold;&#10;        }&#10;        .compact-control {&#10;            font-size: 0.9rem;&#10;        }&#10;        .section-title {&#10;            border-bottom: 2px solid #dee2e6;&#10;            padding-bottom: 0.5rem;&#10;            margin-bottom: 1.5rem;&#10;        }&#10;        /* Styles pour fixer la hauteur des cards des inputs */&#10;        .input-card {&#10;            height: 100%;&#10;            min-height: 160px;&#10;        }&#10;        /* Style pour assurer que la navigation en haut reste visible */&#10;        .tab-navigation {&#10;            position: sticky;&#10;            top: 56px; /* Ajuster selon la hauteur de votre navbar */&#10;            z-index: 100;&#10;            background-color: #f8f9fa;&#10;            padding: 10px 0;&#10;            margin-bottom: 20px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light text-dark&quot;&gt;&#10;    {% include 'nav.html' %}&#10;    &lt;div id=&quot;diffusion-app&quot;&gt;&#10;        &lt;!-- Système de notifications --&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;          &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;            &lt;div class=&quot;toast-body&quot;&gt;&#10;              [[ notification.message ]]&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;container-fluid py-3&quot;&gt;&#10;            &lt;h1 class=&quot;text-center mb-3&quot;&gt;Diffusion Live&lt;/h1&gt;&#10;&#10;            &lt;div v-if=&quot;loading&quot; class=&quot;text-center my-5&quot;&gt;&#10;                &lt;div class=&quot;spinner-border text-primary&quot; role=&quot;status&quot;&gt;&#10;                    &lt;span class=&quot;visually-hidden&quot;&gt;Chargement...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;Chargement des sources vMix...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-if=&quot;!loading&quot;&gt;&#10;                &lt;div class=&quot;row g-3&quot;&gt;&#10;                    &lt;!-- Section des caméras - prend 1/2 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-6&quot; id=&quot;cameras&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-primary text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-camera-video me-2&quot;&gt;&lt;/i&gt; Gestion des Caméras&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-light text-primary&quot;&gt;[[ cameraInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!cameraInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune caméra disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-6 col-xl-4&quot; v-for=&quot;input in cameraInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card input-card border-primary h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;span class=&quot;badge bg-info&quot;&gt;CAM&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-1&quot;&gt;&#10;                                                    &lt;button @click=&quot;cutToCamera(input.id)&quot; class=&quot;btn btn-danger btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;transitionToCamera(input.id)&quot; class=&quot;btn btn-primary btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section vidéos - prend 1/2 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-success text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-film me-2&quot;&gt;&lt;/i&gt; Sources Vidéo&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-light text-success&quot;&gt;[[ videoInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!videoInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune source vidéo disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-6 col-xl-4&quot; v-for=&quot;input in videoInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card input-card border-success h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-success bg-opacity-10 text-success py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;span class=&quot;badge bg-info&quot; :title=&quot;input.type&quot;&gt;[[input.type.substring(0,4)]]&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-1&quot;&gt;&#10;                                                    &lt;button @click=&quot;cutToCamera(input.id)&quot; class=&quot;btn btn-danger btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;transitionToCamera(input.id)&quot; class=&quot;btn btn-primary btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section audio - prend 2/3 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-8&quot; id=&quot;audio&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-warning text-dark d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-mic me-2&quot;&gt;&lt;/i&gt; Gestion Audio&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-dark&quot;&gt;[[ audioInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!audioInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune source audio disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-md-6 col-xl-4&quot; v-for=&quot;input in audioInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card border-warning h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-warning bg-opacity-10 text-dark py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;button @click=&quot;toggleAudio(input.id)&quot; class=&quot;btn btn-sm p-1&quot; :class=&quot;audioStates[input.id] ? 'btn-success' : 'btn-outline-danger'&quot;&gt;&#10;                                                        &lt;i class=&quot;bi&quot; :class=&quot;audioStates[input.id] ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;div class=&quot;d-flex justify-content-between align-items-center mb-1&quot;&gt;&#10;                                                        &lt;small&gt;Volume:&lt;/small&gt;&#10;                                                        &lt;span class=&quot;badge bg-primary&quot;&gt;[[ audioVolumes[input.id] || 100 ]]%&lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &lt;input type=&quot;range&quot; class=&quot;form-range&quot; :id=&quot;'volume-' + input.id&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;1&quot;&#10;                                                           v-model=&quot;audioVolumes[input.id]&quot; @change=&quot;adjustVolume(input.id)&quot;&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section contrôle streaming - prend 1/3 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-4&quot; id=&quot;streaming&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-danger text-white&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Contrôle Streaming&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                    &lt;button @click=&quot;startStreaming&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-play-circle me-2&quot;&gt;&lt;/i&gt; Démarrer le Streaming&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;stopStreaming&quot; class=&quot;btn btn-danger&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-stop-circle me-2&quot;&gt;&lt;/i&gt; Arrêter le Streaming&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section Replays - prend toute la largeur en bas --&gt;&#10;                    &lt;div class=&quot;col-12&quot; id=&quot;replays&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-info text-white&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-arrow-counterclockwise me-2&quot;&gt;&lt;/i&gt; Gestion des Replays&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;row&quot;&gt;&#10;                                    &lt;!-- Configuration du Replay --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Configuration&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;label for=&quot;replayDuration&quot; class=&quot;form-label&quot;&gt;Durée du buffer (secondes)&lt;/label&gt;&#10;                                                &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                                    &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;replayDuration&quot; v-model=&quot;replayDuration&quot; min=&quot;1&quot; max=&quot;60&quot;&gt;&#10;                                                    &lt;button class=&quot;btn btn-outline-secondary&quot; type=&quot;button&quot; @click=&quot;setReplayDuration&quot;&gt;Appliquer&lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;!-- Contrôles d'enregistrement --&gt;&#10;                                                &lt;div class=&quot;d-grid gap-2 mt-3&quot;&gt;&#10;                                                    &lt;button @click=&quot;startReplayRecording&quot; class=&quot;btn&quot; :class=&quot;isRecordingReplay ? 'btn-danger' : 'btn-outline-danger'&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-record-circle me-1&quot;&gt;&lt;/i&gt;&#10;                                                        &lt;span v-if=&quot;isRecordingReplay&quot;&gt;Enregistrement...&lt;/span&gt;&#10;                                                        &lt;span v-else&gt;Démarrer l'enregistrement&lt;/span&gt;&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;stopReplayRecording&quot; class=&quot;btn btn-outline-secondary&quot; :disabled=&quot;!isRecordingReplay&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter l'enregistrement&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Lecture du dernier replay --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Lecture du dernier replay&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(100)&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Replay (100%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(50)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (50%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(25)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (25%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;pauseReplay&quot; class=&quot;btn btn-outline-secondary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-pause-circle me-1&quot;&gt;&lt;/i&gt; Pause&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Marquage d'événements --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Marquage d'événements&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Nom de l'événement&quot; v-model=&quot;eventName&quot;&gt;&#10;                                                    &lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; @click=&quot;markReplayEvent&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-bookmark-plus&quot;&gt;&lt;/i&gt; Marquer&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;form-text mb-3&quot;&gt;Marquez des moments importants pour les rejouer plus tard&lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;!-- Liste des événements marqués --&gt;&#10;                                &lt;div v-if=&quot;replayEvents.length&quot; class=&quot;mt-3&quot;&gt;&#10;                                    &lt;h4 class=&quot;h6 border-top pt-3&quot;&gt;Événements marqués&lt;/h4&gt;&#10;                                    &lt;div class=&quot;table-responsive&quot;&gt;&#10;                                        &lt;table class=&quot;table table-sm table-hover&quot;&gt;&#10;                                            &lt;thead&gt;&#10;                                                &lt;tr&gt;&#10;                                                    &lt;th&gt;#&lt;/th&gt;&#10;                                                    &lt;th&gt;Nom&lt;/th&gt;&#10;                                                    &lt;th&gt;Horodatage&lt;/th&gt;&#10;                                                    &lt;th&gt;Actions&lt;/th&gt;&#10;                                                &lt;/tr&gt;&#10;                                            &lt;/thead&gt;&#10;                                            &lt;tbody&gt;&#10;                                                &lt;tr v-for=&quot;(event, index) in replayEvents&quot; :key=&quot;index&quot;&gt;&#10;                                                    &lt;td&gt;[[ index + 1 ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;[[ event.name || 'Événement ' + (index + 1) ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;[[ new Date(event.timestamp).toLocaleTimeString() ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;&#10;                                                        &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                                            &lt;button @click=&quot;playReplayEvent(index, 100)&quot; class=&quot;btn btn-sm btn-outline-primary&quot;&gt;&#10;                                                                &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt;&#10;                                                            &lt;/button&gt;&#10;                                                            &lt;button @click=&quot;playReplayEvent(index, 50)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                                &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 50%&#10;                                                            &lt;/button&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/td&gt;&#10;                                                &lt;/tr&gt;&#10;                                            &lt;/tbody&gt;&#10;                                        &lt;/table&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Diffusion Live&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='style.css') }}&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        /* Styles spécifiques pour la page de diffusion live */&#10;        .dashboard-card {&#10;            height: 100%;&#10;            transition: all 0.2s;&#10;        }&#10;        .dashboard-card:hover {&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;&#10;        }&#10;        .card-header {&#10;            font-weight: bold;&#10;        }&#10;        .compact-control {&#10;            font-size: 0.9rem;&#10;        }&#10;        .section-title {&#10;            border-bottom: 2px solid #dee2e6;&#10;            padding-bottom: 0.5rem;&#10;            margin-bottom: 1.5rem;&#10;        }&#10;        /* Styles pour fixer la hauteur des cards des inputs */&#10;        .input-card {&#10;            height: 100%;&#10;            min-height: 160px;&#10;        }&#10;        /* Style pour assurer que la navigation en haut reste visible */&#10;        .tab-navigation {&#10;            position: sticky;&#10;            top: 56px; /* Ajuster selon la hauteur de votre navbar */&#10;            z-index: 100;&#10;            background-color: #f8f9fa;&#10;            padding: 10px 0;&#10;            margin-bottom: 20px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light text-dark&quot;&gt;&#10;    {% include 'nav.html' %}&#10;    &lt;div id=&quot;diffusion-app&quot;&gt;&#10;        &lt;!-- Système de notifications --&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;          &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;            &lt;div class=&quot;toast-body&quot;&gt;&#10;              [[ notification.message ]]&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;container-fluid py-3&quot;&gt;&#10;            &lt;h1 class=&quot;text-center mb-3&quot;&gt;Diffusion Live&lt;/h1&gt;&#10;&#10;            &lt;div v-if=&quot;loading&quot; class=&quot;text-center my-5&quot;&gt;&#10;                &lt;div class=&quot;spinner-border text-primary&quot; role=&quot;status&quot;&gt;&#10;                    &lt;span class=&quot;visually-hidden&quot;&gt;Chargement...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;Chargement des sources vMix...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-if=&quot;!loading&quot;&gt;&#10;                &lt;div class=&quot;row g-3&quot;&gt;&#10;                    &lt;!-- Section des caméras - prend 1/2 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-6&quot; id=&quot;cameras&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-primary text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-camera-video me-2&quot;&gt;&lt;/i&gt; Gestion des Caméras&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-light text-primary&quot;&gt;[[ cameraInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!cameraInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune caméra disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-6 col-xl-4&quot; v-for=&quot;input in cameraInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card input-card border-primary h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;span class=&quot;badge bg-info&quot;&gt;CAM&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-1&quot;&gt;&#10;                                                    &lt;button @click=&quot;cutToCamera(input.id)&quot; class=&quot;btn btn-danger btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;transitionToCamera(input.id)&quot; class=&quot;btn btn-primary btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section vidéos - prend 1/2 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-success text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-film me-2&quot;&gt;&lt;/i&gt; Sources Vidéo&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-light text-success&quot;&gt;[[ videoInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!videoInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune source vidéo disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-6 col-xl-4&quot; v-for=&quot;input in videoInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card input-card border-success h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-success bg-opacity-10 text-success py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;span class=&quot;badge bg-info&quot; :title=&quot;input.type&quot;&gt;[[input.type.substring(0,4)]]&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-1&quot;&gt;&#10;                                                    &lt;button @click=&quot;cutToCamera(input.id)&quot; class=&quot;btn btn-danger btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;transitionToCamera(input.id)&quot; class=&quot;btn btn-primary btn-sm compact-control&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section audio - prend 2/3 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-8&quot; id=&quot;audio&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-warning text-dark d-flex justify-content-between align-items-center&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-mic me-2&quot;&gt;&lt;/i&gt; Gestion Audio&lt;/h2&gt;&#10;                                &lt;span class=&quot;badge bg-dark&quot;&gt;[[ audioInputs.length ]] sources&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div v-if=&quot;!audioInputs.length&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-exclamation-triangle-fill me-2&quot;&gt;&lt;/i&gt; Aucune source audio disponible&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;row g-2&quot; v-else&gt;&#10;                                    &lt;div class=&quot;col-md-6 col-xl-4&quot; v-for=&quot;input in audioInputs&quot; :key=&quot;input.id&quot;&gt;&#10;                                        &lt;div class=&quot;card border-warning h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-warning bg-opacity-10 text-dark py-1 px-2&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                                                    &lt;h3 class=&quot;h6 mb-0 text-truncate&quot; :title=&quot;input.name&quot;&gt;[[ input.name ]]&lt;/h3&gt;&#10;                                                    &lt;button @click=&quot;toggleAudio(input.id)&quot; class=&quot;btn btn-sm p-1&quot; :class=&quot;audioStates[input.id] ? 'btn-success' : 'btn-outline-danger'&quot;&gt;&#10;                                                        &lt;i class=&quot;bi&quot; :class=&quot;audioStates[input.id] ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;div class=&quot;d-flex justify-content-between align-items-center mb-1&quot;&gt;&#10;                                                        &lt;small&gt;Volume:&lt;/small&gt;&#10;                                                        &lt;span class=&quot;badge bg-primary&quot;&gt;[[ audioVolumes[input.id] || 100 ]]%&lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &lt;input type=&quot;range&quot; class=&quot;form-range&quot; :id=&quot;'volume-' + input.id&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;1&quot;&#10;                                                           v-model=&quot;audioVolumes[input.id]&quot; @change=&quot;adjustVolume(input.id)&quot;&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section contrôle streaming - prend 1/3 de l'écran sur grands écrans --&gt;&#10;                    &lt;div class=&quot;col-md-4&quot; id=&quot;streaming&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-danger text-white&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Contrôle Streaming&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                    &lt;button @click=&quot;startStreaming&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-play-circle me-2&quot;&gt;&lt;/i&gt; Démarrer le Streaming&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;stopStreaming&quot; class=&quot;btn btn-danger&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-stop-circle me-2&quot;&gt;&lt;/i&gt; Arrêter le Streaming&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Section Replays - prend toute la largeur en bas --&gt;&#10;                    &lt;div class=&quot;col-12&quot; id=&quot;replays&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-info text-white&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-arrow-counterclockwise me-2&quot;&gt;&lt;/i&gt; Gestion des Replays&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;row&quot;&gt;&#10;                                    &lt;!-- Configuration du Replay --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Configuration&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;label for=&quot;replayDuration&quot; class=&quot;form-label&quot;&gt;Durée du buffer (secondes)&lt;/label&gt;&#10;                                                &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                                    &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;replayDuration&quot; v-model=&quot;replayDuration&quot; min=&quot;1&quot; max=&quot;60&quot;&gt;&#10;                                                    &lt;button class=&quot;btn btn-outline-secondary&quot; type=&quot;button&quot; @click=&quot;setReplayDuration&quot;&gt;Appliquer&lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                                &#10;                                                &lt;!-- Contrôles d'enregistrement --&gt;&#10;                                                &lt;div class=&quot;d-grid gap-2 mt-3&quot;&gt;&#10;                                                    &lt;button @click=&quot;startReplayRecording&quot; class=&quot;btn&quot; :class=&quot;isRecordingReplay ? 'btn-danger' : 'btn-outline-danger'&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-record-circle me-1&quot;&gt;&lt;/i&gt; &#10;                                                        &lt;span v-if=&quot;isRecordingReplay&quot;&gt;Enregistrement...&lt;/span&gt;&#10;                                                        &lt;span v-else&gt;Démarrer l'enregistrement&lt;/span&gt;&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;stopReplayRecording&quot; class=&quot;btn btn-outline-secondary&quot; :disabled=&quot;!isRecordingReplay&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter l'enregistrement&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &#10;                                    &lt;!-- Lecture du dernier replay --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Lecture du dernier replay&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(100)&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Replay (100%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(50)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (50%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playLastReplay(25)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (25%)&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;pauseReplay&quot; class=&quot;btn btn-outline-secondary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-pause-circle me-1&quot;&gt;&lt;/i&gt; Pause&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &#10;                                    &lt;!-- Marquage d'événements --&gt;&#10;                                    &lt;div class=&quot;col-md-4 mb-3&quot;&gt;&#10;                                        &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Marquage d'événements&lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Nom de l'événement&quot; v-model=&quot;eventName&quot;&gt;&#10;                                                    &lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; @click=&quot;markReplayEvent&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-bookmark-plus&quot;&gt;&lt;/i&gt; Marquer&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;form-text mb-3&quot;&gt;Marquez des moments importants pour les rejouer plus tard&lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &#10;                                &lt;!-- Liste des événements marqués --&gt;&#10;                                &lt;div v-if=&quot;replayEvents.length&quot; class=&quot;mt-3&quot;&gt;&#10;                                    &lt;h4 class=&quot;h6 border-top pt-3&quot;&gt;Événements marqués&lt;/h4&gt;&#10;                                    &lt;div class=&quot;table-responsive&quot;&gt;&#10;                                        &lt;table class=&quot;table table-sm table-hover&quot;&gt;&#10;                                            &lt;thead&gt;&#10;                                                &lt;tr&gt;&#10;                                                    &lt;th&gt;#&lt;/th&gt;&#10;                                                    &lt;th&gt;Nom&lt;/th&gt;&#10;                                                    &lt;th&gt;Horodatage&lt;/th&gt;&#10;                                                    &lt;th&gt;Actions&lt;/th&gt;&#10;                                                &lt;/tr&gt;&#10;                                            &lt;/thead&gt;&#10;                                            &lt;tbody&gt;&#10;                                                &lt;tr v-for=&quot;(event, index) in replayEvents&quot; :key=&quot;index&quot;&gt;&#10;                                                    &lt;td&gt;[[ index + 1 ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;[[ event.name || 'Événement ' + (index + 1) ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;[[ new Date(event.timestamp).toLocaleTimeString() ]]&lt;/td&gt;&#10;                                                    &lt;td&gt;&#10;                                                        &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                                            &lt;button @click=&quot;playReplayEvent(index, 100)&quot; class=&quot;btn btn-sm btn-outline-primary&quot;&gt;&#10;                                                                &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt;&#10;                                                            &lt;/button&gt;&#10;                                                            &lt;button @click=&quot;playReplayEvent(index, 50)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                                &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 50%&#10;                                                            &lt;/button&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/td&gt;&#10;                                                &lt;/tr&gt;&#10;                                            &lt;/tbody&gt;&#10;                                        &lt;/table&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Nouvelle section: Gestion du Score --&gt;&#10;                    &lt;div class=&quot;col-12 mt-3&quot;&gt;&#10;                        &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-trophy me-2&quot;&gt;&lt;/i&gt; Gestion du Score&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;row&quot;&gt;&#10;                                    &lt;!-- Équipe A --&gt;&#10;                                    &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                        &lt;div class=&quot;card border-primary&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary&quot;&gt;&#10;                                                Équipe A&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                                    &lt;h3 class=&quot;me-3 mb-0&quot;&gt;[[ scoreTeamA ]]&lt;/h3&gt;&#10;                                                    &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                        &lt;button @click=&quot;addPointTeamA&quot; class=&quot;btn btn-success btn-sm&quot;&gt;&#10;                                                            &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                        &lt;/button&gt;&#10;                                                        &lt;button @click=&quot;removePointTeamA&quot; class=&quot;btn btn-danger btn-sm&quot; :disabled=&quot;scoreTeamA &lt;= 0&quot;&gt;&#10;                                                            &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                        &lt;/button&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsA &gt;= 3&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                                    &lt;strong&gt;[[ consecutivePointsA ]] points&lt;/strong&gt; sans ralenti pour l'équipe A&#10;                                                    &lt;button @click=&quot;suggestReplayForTeamA&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Proposer un ralenti&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Zone centrale - Sets --&gt;&#10;                                    &lt;div class=&quot;col-md-2&quot;&gt;&#10;                                        &lt;div class=&quot;card h-100 border-secondary&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-secondary bg-opacity-10 text-secondary text-center&quot;&gt;&#10;                                                Sets&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                                &lt;h3&gt;[[ setsTeamA ]] - [[ setsTeamB ]]&lt;/h3&gt;&#10;                                                &lt;button @click=&quot;updateScoreInVMix&quot; class=&quot;btn btn-primary btn-sm mt-2&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-up-circle me-1&quot;&gt;&lt;/i&gt; Mettre à jour vMix&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Équipe B --&gt;&#10;                                    &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                        &lt;div class=&quot;card border-danger&quot;&gt;&#10;                                            &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;&#10;                                                Équipe B&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                                &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                                    &lt;h3 class=&quot;me-3 mb-0&quot;&gt;[[ scoreTeamB ]]&lt;/h3&gt;&#10;                                                    &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                        &lt;button @click=&quot;addPointTeamB&quot; class=&quot;btn btn-success btn-sm&quot;&gt;&#10;                                                            &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                        &lt;/button&gt;&#10;                                                        &lt;button @click=&quot;removePointTeamB&quot; class=&quot;btn btn-danger btn-sm&quot; :disabled=&quot;scoreTeamB &lt;= 0&quot;&gt;&#10;                                                            &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                        &lt;/button&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsB &gt;= 3&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                                    &lt;strong&gt;[[ consecutivePointsB ]] points&lt;/strong&gt; sans ralenti pour l'équipe B&#10;                                                    &lt;button @click=&quot;suggestReplayForTeamB&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Proposer un ralenti&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/diffusion_live.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v2_0/app/vmix_replay_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v2_0/app/vmix_replay_manager.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/__init__.py" />
              <option name="originalContent" value="import os&#10;&#10;from flask import Flask, Blueprint, render_template, redirect&#10;from flask_socketio import SocketIO&#10;from .api import api_bp  # Importer le Blueprint api&#10;&#10;#api_bp = Blueprint(&quot;api&quot;, __name__, template_folder = &quot;&quot;)&#10;core_bp = Blueprint(&quot;core&quot;, __name__, template_folder = &quot;templates&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;&#10;from flask import Flask, Blueprint, render_template, redirect&#10;from flask_socketio import SocketIO&#10;from .api import api_bp  # Importer le Blueprint api&#10;&#10;# Chemin vers le dossier statique&#10;static_folder = os.path.join(os.path.dirname(__file__), 'static')&#10;&#10;# Création du blueprint principal avec le dossier statique configuré&#10;core_bp = Blueprint(&quot;core&quot;, __name__, &#10;                   template_folder=&quot;templates&quot;,&#10;                   static_folder=static_folder,&#10;                   static_url_path='/static')&#10;&#10;socketio = SocketIO()&#10;&#10;@core_bp.route(&quot;/&quot;)&#10;def index():&#10;    return render_template(&quot;core/index.html&quot;)&#10;&#10;@core_bp.route(&quot;/team-setup&quot;)&#10;def team_setup():&#10;    return render_template(&quot;core/team_setup.html&quot;)&#10;&#10;@core_bp.route(&quot;/live-setup&quot;)&#10;def live_setup():&#10;    return render_template(&quot;core/live_setup.html&quot;)&#10;&#10;@core_bp.route(&quot;/live-broadcast&quot;)&#10;def live_broadcast():&#10;    return render_template(&quot;core/live_broadcast.html&quot;)&#10;&#10;@core_bp.route(&quot;/settings&quot;)&#10;def settings():&#10;    return render_template(&quot;core/settings.html&quot;)&#10;&#10;# Routes de test à supprimer ultérieurement&#10;@core_bp.route(&quot;/hello&quot;)&#10;def hello():&#10;    return &quot;Hello again&quot;&#10;&#10;@core_bp.route(&quot;/hellohtml&quot;)&#10;def hello_html():&#10;    return render_template(&quot;core/hello.html&quot;)&#10;&#10;def create_app(test_config=None):&#10;    # create and configure the app&#10;    app = Flask(__name__, instance_relative_config=True) #app = Flask(__name__)&#10;    app.config.from_mapping(&#10;        SECRET_KEY='dev',&#10;    )&#10;    #socketio code&#10;&#10;    if test_config is None:&#10;        # load the instance config, if it exists, when not testing&#10;        app.config.from_pyfile('config.py', silent=True)&#10;    else:&#10;        # load the test config if passed in&#10;        app.config.from_mapping(test_config)&#10;&#10;    # ensure the instance folder exists&#10;    try:&#10;        os.makedirs(app.instance_path)&#10;    except OSError:&#10;        pass&#10;&#10;    #blueprint for every routes&#10;    app.register_blueprint(core_bp)&#10;    app.register_blueprint(api_bp, url_prefix='/api')&#10;&#10;    return app" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/api/replay.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/api/replay.py" />
              <option name="originalContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;import logging&#10;from ..core.replay_manager import ReplayManager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('replay_api')&#10;&#10;replay_bp = Blueprint('replay', __name__)&#10;&#10;# Instance du gestionnaire de replay&#10;replay_manager = ReplayManager()&#10;&#10;@replay_bp.route('/config', methods=['GET'])&#10;def get_replay_config():&#10;    &quot;&quot;&quot;Récupérer la configuration des replays&quot;&quot;&quot;&#10;    try:&#10;        config = replay_manager.load_config()&#10;        return jsonify({&quot;config&quot;: config})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération de la configuration des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération de la configuration&quot;}), 500&#10;&#10;@replay_bp.route('/set-duration', methods=['POST'])&#10;def set_replay_duration():&#10;    &quot;&quot;&quot;Définir la durée du buffer de replay&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valider les données&#10;        if not data or 'duration' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;La durée du buffer est requise&quot;}), 400&#10;&#10;        duration = int(data['duration'])&#10;&#10;        # Vérifier la plage&#10;        if duration &lt; 5 or duration &gt; 60:&#10;            return jsonify({&quot;error&quot;: &quot;La durée doit être entre 5 et 60 secondes&quot;}), 400&#10;&#10;        # Définir la durée&#10;        result = replay_manager.set_duration(duration)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Durée du buffer définie à {duration} secondes&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la définition de la durée du buffer&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la définition de la durée du buffer: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la définition de la durée du buffer: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/start-recording', methods=['POST'])&#10;def start_replay_recording():&#10;    &quot;&quot;&quot;Démarrer l'enregistrement des replays&quot;&quot;&quot;&#10;    try:&#10;        # Démarrer l'enregistrement&#10;        result = replay_manager.start_recording()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Enregistrement des replays démarré&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage de l'enregistrement des replays&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/stop-recording', methods=['POST'])&#10;def stop_replay_recording():&#10;    &quot;&quot;&quot;Arrêter l'enregistrement des replays&quot;&quot;&quot;&#10;    try:&#10;        # Arrêter l'enregistrement&#10;        result = replay_manager.stop_recording()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Enregistrement des replays arrêté&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt de l'enregistrement des replays&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/play-last', methods=['POST'])&#10;def play_last_replay():&#10;    &quot;&quot;&quot;Lire le dernier replay enregistré&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Vitesse par défaut&#10;        speed = 100&#10;&#10;        # Si une vitesse est spécifiée&#10;        if data and 'speed' in data:&#10;            speed = int(data['speed'])&#10;&#10;            # Vérifier la validité de la vitesse&#10;            if speed not in [25, 50, 75, 100]:&#10;                return jsonify({&quot;error&quot;: &quot;La vitesse doit être l'une des valeurs suivantes: 25, 50, 75, 100&quot;}), 400&#10;&#10;        # Lire le dernier replay&#10;        result = replay_manager.play_last_replay(speed)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Lecture du dernier replay à {speed}%&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la lecture du dernier replay&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/pause', methods=['POST'])&#10;def pause_replay():&#10;    &quot;&quot;&quot;Mettre en pause la lecture du replay&quot;&quot;&quot;&#10;    try:&#10;        # Mettre en pause le replay&#10;        result = replay_manager.pause_replay()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Replay mis en pause&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la mise en pause du replay&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/mark', methods=['POST'])&#10;def mark_replay_event():&#10;    &quot;&quot;&quot;Marquer un événement de replay&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valeurs par défaut&#10;        name = &quot;&quot;&#10;        event_type = &quot;custom&quot;&#10;&#10;        # Si un nom est spécifié&#10;        if data and 'name' in data:&#10;            name = data['name']&#10;&#10;        # Si un type est spécifié&#10;        if data and 'type' in data:&#10;            event_type = data['type']&#10;&#10;        # Marquer l'événement&#10;        result, events = replay_manager.mark_event(name, event_type)&#10;&#10;        if result:&#10;            return jsonify({&#10;                &quot;status&quot;: &quot;success&quot;,&#10;                &quot;message&quot;: &quot;Événement marqué avec succès&quot;,&#10;                &quot;events&quot;: events&#10;            })&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du marquage de l'événement&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/play-event', methods=['POST'])&#10;def play_replay_event():&#10;    &quot;&quot;&quot;Lire un événement de replay spécifique&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valider les données&#10;        if not data or 'eventIndex' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;L'index de l'événement est requis&quot;}), 400&#10;&#10;        event_index = int(data['eventIndex'])&#10;&#10;        # Vitesse par défaut&#10;        speed = 100&#10;&#10;        # Si une vitesse est spécifiée&#10;        if 'speed' in data:&#10;            speed = int(data['speed'])&#10;&#10;            # Vérifier la validité de la vitesse&#10;            if speed not in [25, 50, 75, 100]:&#10;                return jsonify({&quot;error&quot;: &quot;La vitesse doit être l'une des valeurs suivantes: 25, 50, 75, 100&quot;}), 400&#10;&#10;        # Lire l'événement&#10;        result = replay_manager.play_event(event_index, speed)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Lecture de l'événement {event_index} à {speed}%&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la lecture de l'événement&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/events', methods=['GET'])&#10;def get_replay_events():&#10;    &quot;&quot;&quot;Récupérer la liste des événements de replay&quot;&quot;&quot;&#10;    try:&#10;        events = replay_manager.load_events()&#10;        return jsonify({&quot;events&quot;: events})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération des événements de replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération des événements&quot;}), 500&#10;&#10;@replay_bp.route('/status', methods=['GET'])&#10;def get_replay_status():&#10;    &quot;&quot;&quot;Récupérer l'état actuel du système de replay&quot;&quot;&quot;&#10;    try:&#10;        status = replay_manager.get_status()&#10;        return jsonify(status)&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération du statut des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération du statut&quot;}), 500&#10;&#10;@replay_bp.route('/delete-event', methods=['POST'])&#10;def delete_replay_event():&#10;    &quot;&quot;&quot;Supprimer un événement de replay spécifique&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valider les données&#10;        if not data or 'eventIndex' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;L'index de l'événement est requis&quot;}), 400&#10;&#10;        event_index = int(data['eventIndex'])&#10;&#10;        # Supprimer l'événement&#10;        success, events = replay_manager.delete_event(event_index)&#10;&#10;        if success:&#10;            return jsonify({&#10;                &quot;status&quot;: &quot;success&quot;,&#10;                &quot;message&quot;: &quot;Événement supprimé avec succès&quot;,&#10;            })&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la suppression de l'événement&quot;}), 500&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la suppression de l'événement&quot;}), 500&#10;        logger.error(f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;}), 500&#10;" />
              <option name="updatedContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;import logging&#10;from ..core.replay_manager import ReplayManager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('replay_api')&#10;&#10;replay_bp = Blueprint('replay', __name__)&#10;&#10;# Instance du gestionnaire de replay&#10;replay_manager = ReplayManager()&#10;&#10;@replay_bp.route('/config', methods=['GET'])&#10;def get_replay_config():&#10;    &quot;&quot;&quot;Récupérer la configuration des replays&quot;&quot;&quot;&#10;    try:&#10;        config = replay_manager.load_config()&#10;        return jsonify({&quot;config&quot;: config})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération de la configuration des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération de la configuration&quot;}), 500&#10;&#10;@replay_bp.route('/set-duration', methods=['POST'])&#10;def set_replay_duration():&#10;    &quot;&quot;&quot;Définir la durée du buffer de replay&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valider les données&#10;        if not data or 'duration' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;La durée du buffer est requise&quot;}), 400&#10;&#10;        duration = int(data['duration'])&#10;&#10;        # Vérifier la plage&#10;        if duration &lt; 5 or duration &gt; 60:&#10;            return jsonify({&quot;error&quot;: &quot;La durée doit être entre 5 et 60 secondes&quot;}), 400&#10;&#10;        # Définir la durée&#10;        result = replay_manager.set_duration(duration)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Durée du buffer définie à {duration} secondes&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la définition de la durée du buffer&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la définition de la durée du buffer: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la définition de la durée du buffer: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/start-recording', methods=['POST'])&#10;def start_replay_recording():&#10;    &quot;&quot;&quot;Démarrer l'enregistrement des replays&quot;&quot;&quot;&#10;    try:&#10;        # Démarrer l'enregistrement&#10;        result = replay_manager.start_recording()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Enregistrement des replays démarré&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage de l'enregistrement des replays&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/stop-recording', methods=['POST'])&#10;def stop_replay_recording():&#10;    &quot;&quot;&quot;Arrêter l'enregistrement des replays&quot;&quot;&quot;&#10;    try:&#10;        # Arrêter l'enregistrement&#10;        result = replay_manager.stop_recording()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Enregistrement des replays arrêté&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt de l'enregistrement des replays&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/play-last', methods=['POST'])&#10;def play_last_replay():&#10;    &quot;&quot;&quot;Lire le dernier replay enregistré&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Vitesse par défaut&#10;        speed = 100&#10;&#10;        # Si une vitesse est spécifiée&#10;        if data and 'speed' in data:&#10;            speed = int(data['speed'])&#10;&#10;            # Vérifier la validité de la vitesse&#10;            if speed not in [25, 50, 75, 100]:&#10;                return jsonify({&quot;error&quot;: &quot;La vitesse doit être l'une des valeurs suivantes: 25, 50, 75, 100&quot;}), 400&#10;&#10;        # Lire le dernier replay&#10;        result = replay_manager.play_last_replay(speed)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Lecture du dernier replay à {speed}%&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la lecture du dernier replay&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/pause', methods=['POST'])&#10;def pause_replay():&#10;    &quot;&quot;&quot;Mettre en pause la lecture du replay&quot;&quot;&quot;&#10;    try:&#10;        # Mettre en pause le replay&#10;        result = replay_manager.pause_replay()&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Replay mis en pause&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la mise en pause du replay&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/mark', methods=['POST'])&#10;def mark_replay_event():&#10;    &quot;&quot;&quot;Marquer un événement de replay&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valeurs par défaut&#10;        name = &quot;&quot;&#10;        event_type = &quot;custom&quot;&#10;&#10;        # Si un nom est spécifié&#10;        if data and 'name' in data:&#10;            name = data['name']&#10;&#10;        # Si un type est spécifié&#10;        if data and 'type' in data:&#10;            event_type = data['type']&#10;&#10;        # Marquer l'événement&#10;        result, events = replay_manager.mark_event(name, event_type)&#10;&#10;        if result:&#10;            return jsonify({&#10;                &quot;status&quot;: &quot;success&quot;,&#10;                &quot;message&quot;: &quot;Événement marqué avec succès&quot;,&#10;                &quot;events&quot;: events&#10;            })&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du marquage de l'événement&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/play-event', methods=['POST'])&#10;def play_replay_event():&#10;    &quot;&quot;&quot;Lire un événement de replay spécifique&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;&#10;        # Valider les données&#10;        if not data or 'eventIndex' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;L'index de l'événement est requis&quot;}), 400&#10;&#10;        event_index = int(data['eventIndex'])&#10;&#10;        # Vitesse par défaut&#10;        speed = 100&#10;&#10;        # Si une vitesse est spécifiée&#10;        if 'speed' in data:&#10;            speed = int(data['speed'])&#10;&#10;            # Vérifier la validité de la vitesse&#10;            if speed not in [25, 50, 75, 100]:&#10;                return jsonify({&quot;error&quot;: &quot;La vitesse doit être l'une des valeurs suivantes: 25, 50, 75, 100&quot;}), 400&#10;&#10;        # Lire l'événement&#10;        result = replay_manager.play_event(event_index, speed)&#10;&#10;        if result:&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: f&quot;Lecture de l'événement {event_index} à {speed}%&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de la lecture de l'événement&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;}), 500&#10;&#10;@replay_bp.route('/events', methods=['GET'])&#10;def get_replay_events():&#10;    &quot;&quot;&quot;Récupérer la liste des événements de replay&quot;&quot;&quot;&#10;    try:&#10;        events = replay_manager.load_events()&#10;        return jsonify({&quot;events&quot;: events})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération des événements de replay: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération des événements&quot;}), 500&#10;&#10;@replay_bp.route('/status', methods=['GET'])&#10;def get_replay_status():&#10;    &quot;&quot;&quot;Récupérer l'état actuel du système de replay&quot;&quot;&quot;&#10;    try:&#10;        status = replay_manager.get_status()&#10;        return jsonify(status)&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération du statut des replays: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération du statut&quot;}), 500&#10;&#10;@replay_bp.route('/delete-event', methods=['POST'])&#10;def delete_replay_event():&#10;    &quot;&quot;&quot;Supprimer un événement de replay spécifique&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        &#10;        # Valider les données&#10;        if not data or 'eventIndex' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;L'index de l'événement est requis&quot;}), 400&#10;        &#10;        event_index = int(data['eventIndex'])&#10;        &#10;        # Supprimer l'événement&#10;        success, events, warning = replay_manager.delete_event(event_index)&#10;        &#10;        if success:&#10;            return jsonify({&#10;                &quot;status&quot;: &quot;success&quot;, &#10;                &quot;message&quot;: &quot;Événement supprimé avec succès&quot;,&#10;                &quot;warning&quot;: warning,  # Message d'avertissement pour l'interface utilisateur&#10;                &quot;events&quot;: events&#10;            })&#10;        else:&#10;            return jsonify({&quot;error&quot;: warning}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;}), 500" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/api/stream.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/api/stream.py" />
              <option name="originalContent" value="from flask import Blueprint, request, jsonify, current_app&#10;import os&#10;import json&#10;from werkzeug.utils import secure_filename&#10;import uuid&#10;import logging&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('stream_api')&#10;&#10;stream_bp = Blueprint('stream', __name__)&#10;&#10;# Chemin pour les données de configuration&#10;CONFIG_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data', 'stream_config.json')&#10;THUMBNAILS_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data', 'thumbnails')&#10;&#10;# Créer les répertoires s'ils n'existent pas&#10;os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)&#10;os.makedirs(THUMBNAILS_DIR, exist_ok=True)&#10;&#10;# Initialiser le fichier de configuration s'il n'existe pas&#10;if not os.path.exists(CONFIG_FILE):&#10;    with open(CONFIG_FILE, 'w') as f:&#10;        json.dump({&#10;            'title': '',&#10;            'service': 'custom',&#10;            'quality': '1080p30',&#10;            'rtmpUrl': '',&#10;            'streamKey': '',&#10;            'description': '',&#10;            'autoStartRecording': False,&#10;            'autoStartStreaming': False,&#10;            'thumbnailUrl': None&#10;        }, f, indent=2)&#10;&#10;@stream_bp.route('/config', methods=['GET'])&#10;def get_stream_config():&#10;    &quot;&quot;&quot;Récupérer la configuration du streaming&quot;&quot;&quot;&#10;    try:&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            config = json.load(f)&#10;&#10;            # Ne pas renvoyer la clé de stream complète pour des raisons de sécurité&#10;            if 'streamKey' in config and config['streamKey']:&#10;                config['streamKey'] = '••••••••••••••••'&#10;&#10;            return jsonify({&quot;config&quot;: config})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération de la configuration du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération de la configuration&quot;}), 500&#10;&#10;@stream_bp.route('/config', methods=['POST'])&#10;def save_stream_config():&#10;    &quot;&quot;&quot;Enregistrer la configuration du streaming&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer la configuration existante&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            existing_config = json.load(f)&#10;&#10;        # Mettre à jour les champs simples&#10;        for field in ['title', 'service', 'quality', 'rtmpUrl', 'description']:&#10;            if field in request.form:&#10;                existing_config[field] = request.form[field]&#10;&#10;        # Traiter les booléens&#10;        existing_config['autoStartRecording'] = 'autoStartRecording' in request.form and request.form['autoStartRecording'].lower() == 'true'&#10;        existing_config['autoStartStreaming'] = 'autoStartStreaming' in request.form and request.form['autoStartStreaming'].lower() == 'true'&#10;&#10;        # Traiter la clé de stream (ne pas écraser si vide)&#10;        if 'streamKey' in request.form and request.form['streamKey'] and request.form['streamKey'] != '••••••••••••••••':&#10;            existing_config['streamKey'] = request.form['streamKey']&#10;&#10;        # Traiter la miniature si fournie&#10;        if 'thumbnail' in request.files and request.files['thumbnail'].filename:&#10;            thumbnail_file = request.files['thumbnail']&#10;&#10;            # Sécuriser le nom de fichier&#10;            filename = secure_filename(thumbnail_file.filename)&#10;            # Ajouter un identifiant unique pour éviter les collisions&#10;            unique_filename = f&quot;{uuid.uuid4()}_{filename}&quot;&#10;            # Chemin complet&#10;            filepath = os.path.join(THUMBNAILS_DIR, unique_filename)&#10;&#10;            # Enregistrer le fichier&#10;            thumbnail_file.save(filepath)&#10;&#10;            # Mettre à jour l'URL dans la configuration&#10;            existing_config['thumbnailUrl'] = f&quot;/static/thumbnails/{unique_filename}&quot;&#10;&#10;            # Créer un lien symbolique vers le dossier static si nécessaire&#10;            static_thumbnails_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'thumbnails')&#10;            os.makedirs(static_thumbnails_dir, exist_ok=True)&#10;&#10;            # Copier le fichier dans le dossier static&#10;            import shutil&#10;            shutil.copy2(filepath, os.path.join(static_thumbnails_dir, unique_filename))&#10;&#10;        # Enregistrer la configuration mise à jour&#10;        with open(CONFIG_FILE, 'w') as f:&#10;            json.dump(existing_config, f, indent=2)&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: &quot;Configuration du streaming enregistrée avec succès&quot;,&#10;            &quot;thumbnailUrl&quot;: existing_config.get('thumbnailUrl')&#10;        })&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'enregistrement de la configuration du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'enregistrement de la configuration: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/start', methods=['POST'])&#10;def start_streaming():&#10;    &quot;&quot;&quot;Démarrer le streaming&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer la configuration&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            config = json.load(f)&#10;&#10;        # Importer le gestionnaire vMix&#10;        from ..core.vmix_manager import VMixManager&#10;        vmix_manager = VMixManager()&#10;&#10;        # Vérifier la connexion à vMix&#10;        if not vmix_manager.check_connection():&#10;            return jsonify({&quot;error&quot;: &quot;Impossible de se connecter à vMix&quot;}), 500&#10;&#10;        # Démarrer le streaming&#10;        success = vmix_manager.start_streaming()&#10;&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Streaming démarré avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage du streaming&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/stop', methods=['POST'])&#10;def stop_streaming():&#10;    &quot;&quot;&quot;Arrêter le streaming&quot;&quot;&quot;&#10;    try:&#10;        # Importer le gestionnaire vMix&#10;        from ..core.vmix_manager import VMixManager&#10;        vmix_manager = VMixManager()&#10;&#10;        # Vérifier la connexion à vMix&#10;        if not vmix_manager.check_connection():&#10;            return jsonify({&quot;error&quot;: &quot;Impossible de se connecter à vMix&quot;}), 500&#10;&#10;        # Arrêter le streaming&#10;        success = vmix_manager.start_streaming(&quot;Stop&quot;)&#10;&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Streaming arrêté avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt du streaming&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/thumbnail/toggle', methods=['POST'])&#10;def toggle_thumbnail():&#10;    &quot;&quot;&quot;Activer/désactiver la miniature du match&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        show = data.get('show', False)&#10;&#10;" />
              <option name="updatedContent" value="from flask import Blueprint, request, jsonify, current_app&#10;import os&#10;import json&#10;from werkzeug.utils import secure_filename&#10;import uuid&#10;import logging&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('stream_api')&#10;&#10;stream_bp = Blueprint('stream', __name__)&#10;&#10;# Chemin pour les données de configuration&#10;CONFIG_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data', 'stream_config.json')&#10;THUMBNAILS_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data', 'thumbnails')&#10;&#10;# Créer les répertoires s'ils n'existent pas&#10;os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)&#10;os.makedirs(THUMBNAILS_DIR, exist_ok=True)&#10;&#10;# Initialiser le fichier de configuration s'il n'existe pas&#10;if not os.path.exists(CONFIG_FILE):&#10;    with open(CONFIG_FILE, 'w') as f:&#10;        json.dump({&#10;            'title': '',&#10;            'service': 'custom',&#10;            'quality': '1080p30',&#10;            'rtmpUrl': '',&#10;            'streamKey': '',&#10;            'description': '',&#10;            'autoStartRecording': False,&#10;            'autoStartStreaming': False,&#10;            'thumbnailUrl': None&#10;        }, f, indent=2)&#10;&#10;@stream_bp.route('/config', methods=['GET'])&#10;def get_stream_config():&#10;    &quot;&quot;&quot;Récupérer la configuration du streaming&quot;&quot;&quot;&#10;    try:&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            config = json.load(f)&#10;&#10;            # Ne pas renvoyer la clé de stream complète pour des raisons de sécurité&#10;            if 'streamKey' in config and config['streamKey']:&#10;                config['streamKey'] = '••••••••••••••••'&#10;&#10;            return jsonify({&quot;config&quot;: config})&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la récupération de la configuration du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de la récupération de la configuration&quot;}), 500&#10;&#10;@stream_bp.route('/config', methods=['POST'])&#10;def save_stream_config():&#10;    &quot;&quot;&quot;Enregistrer la configuration du streaming&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer la configuration existante&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            existing_config = json.load(f)&#10;&#10;        # Mettre à jour les champs simples&#10;        for field in ['title', 'service', 'quality', 'rtmpUrl', 'description']:&#10;            if field in request.form:&#10;                existing_config[field] = request.form[field]&#10;&#10;        # Traiter les booléens&#10;        existing_config['autoStartRecording'] = 'autoStartRecording' in request.form and request.form['autoStartRecording'].lower() == 'true'&#10;        existing_config['autoStartStreaming'] = 'autoStartStreaming' in request.form and request.form['autoStartStreaming'].lower() == 'true'&#10;&#10;        # Traiter la clé de stream (ne pas écraser si vide)&#10;        if 'streamKey' in request.form and request.form['streamKey'] and request.form['streamKey'] != '••••••••••••••••':&#10;            existing_config['streamKey'] = request.form['streamKey']&#10;&#10;        # Traiter la miniature si fournie&#10;        if 'thumbnail' in request.files and request.files['thumbnail'].filename:&#10;            thumbnail_file = request.files['thumbnail']&#10;&#10;            # Sécuriser le nom de fichier&#10;            filename = secure_filename(thumbnail_file.filename)&#10;            # Ajouter un identifiant unique pour éviter les collisions&#10;            unique_filename = f&quot;{uuid.uuid4()}_{filename}&quot;&#10;            # Chemin complet&#10;            filepath = os.path.join(THUMBNAILS_DIR, unique_filename)&#10;&#10;            # Enregistrer le fichier&#10;            thumbnail_file.save(filepath)&#10;&#10;            # Mettre à jour l'URL dans la configuration&#10;            existing_config['thumbnailUrl'] = f&quot;/static/thumbnails/{unique_filename}&quot;&#10;&#10;            # Créer un lien symbolique vers le dossier static si nécessaire&#10;            static_thumbnails_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'thumbnails')&#10;            os.makedirs(static_thumbnails_dir, exist_ok=True)&#10;&#10;            # Copier le fichier dans le dossier static&#10;            import shutil&#10;            shutil.copy2(filepath, os.path.join(static_thumbnails_dir, unique_filename))&#10;&#10;        # Enregistrer la configuration mise à jour&#10;        with open(CONFIG_FILE, 'w') as f:&#10;            json.dump(existing_config, f, indent=2)&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: &quot;Configuration du streaming enregistrée avec succès&quot;,&#10;            &quot;thumbnailUrl&quot;: existing_config.get('thumbnailUrl')&#10;        })&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'enregistrement de la configuration du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'enregistrement de la configuration: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/start', methods=['POST'])&#10;def start_streaming():&#10;    &quot;&quot;&quot;Démarrer le streaming&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer la configuration&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            config = json.load(f)&#10;&#10;        # Importer le gestionnaire vMix&#10;        from ..core.vmix_manager import VMixManager&#10;        vmix_manager = VMixManager()&#10;&#10;        # Vérifier la connexion à vMix&#10;        if not vmix_manager.check_connection():&#10;            return jsonify({&quot;error&quot;: &quot;Impossible de se connecter à vMix&quot;}), 500&#10;&#10;        # Démarrer le streaming&#10;        success = vmix_manager.start_streaming()&#10;&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Streaming démarré avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage du streaming&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/stop', methods=['POST'])&#10;def stop_streaming():&#10;    &quot;&quot;&quot;Arrêter le streaming&quot;&quot;&quot;&#10;    try:&#10;        # Importer le gestionnaire vMix&#10;        from ..core.vmix_manager import VMixManager&#10;        vmix_manager = VMixManager()&#10;&#10;        # Vérifier la connexion à vMix&#10;        if not vmix_manager.check_connection():&#10;            return jsonify({&quot;error&quot;: &quot;Impossible de se connecter à vMix&quot;}), 500&#10;&#10;        # Arrêter le streaming&#10;        success = vmix_manager.start_streaming(&quot;Stop&quot;)&#10;&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Streaming arrêté avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt du streaming&quot;}), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;)&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;}), 500&#10;&#10;@stream_bp.route('/thumbnail/toggle', methods=['POST'])&#10;def toggle_thumbnail():&#10;    &quot;&quot;&quot;Activer/désactiver la miniature du match&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        show = data.get('show', False)&#10;&#10;        # Mettre à jour la configuration&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            config = json.load(f)&#10;&#10;        config['thumbnailVisible'] = show&#10;&#10;        with open(CONFIG_FILE, 'w') as f:&#10;            json.dump(config, f, indent=2)&#10;&#10;        # Importer le gestionnaire vMix&#10;        from ..core.vmix_manager import VMixManager&#10;        vmix_manager = VMixManager()&#10;&#10;        # Récupérer l'input pour la miniature (par défaut, on utilise &quot;Thumbnail&quot;)&#10;        thumbnail_input = data.get('input', 'Thumbnail')&#10;        overlay_number = data.get('overlay', 1)&#10;&#10;        # Activer ou désactiver la miniature&#10;        if show:&#10;            success = vmix_manager.set_overlay(thumbnail_input, overlay_number, True)&#10;            message = &quot;Miniature activée&quot;&#10;        else:&#10;            success = vmix_manager.set_overlay(thumbnail_input, overlay_number, False)&#10;            message = &quot;Miniature désactivée&quot;&#10;&#10;        if success:&#10;            return jsonify({&#10;                &quot;success&quot;: True,&#10;                &quot;message&quot;: message&#10;            })&#10;        else:&#10;            return jsonify({&#10;                &quot;success&quot;: False,&#10;                &quot;message&quot;: f&quot;Erreur lors de la {message.lower()}&quot;&#10;            }), 500&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la manipulation de la miniature: {str(e)}&quot;)&#10;        return jsonify({&#10;            &quot;success&quot;: False,&#10;            &quot;message&quot;: f&quot;Erreur: {str(e)}&quot;&#10;        }), 500&#10;&#10;@stream_bp.route('/upload-thumbnail', methods=['POST'])&#10;def upload_thumbnail():&#10;    &quot;&quot;&quot;Télécharger une miniature&quot;&quot;&quot;&#10;    try:&#10;        if 'thumbnail' not in request.files or not request.files['thumbnail'].filename:&#10;            return jsonify({&#10;                &quot;success&quot;: False,&#10;                &quot;message&quot;: &quot;Aucun fichier fourni&quot;&#10;            }), 400&#10;&#10;        thumbnail_file = request.files['thumbnail']&#10;&#10;        # Vérifier le type de fichier&#10;        if not thumbnail_file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):&#10;            return jsonify({&#10;                &quot;success&quot;: False,&#10;                &quot;message&quot;: &quot;Format de fichier non supporté. Utilisez PNG, JPG, JPEG ou GIF.&quot;&#10;            }), 400&#10;&#10;        # Récupérer la configuration existante&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            existing_config = json.load(f)&#10;&#10;        # Supprimer l'ancienne miniature si elle existe&#10;        if 'thumbnailUrl' in existing_config and existing_config['thumbnailUrl']:&#10;            try:&#10;                old_filename = os.path.basename(existing_config['thumbnailUrl'])&#10;                old_filepath = os.path.join(THUMBNAILS_DIR, old_filename)&#10;                if os.path.exists(old_filepath):&#10;                    os.remove(old_filepath)&#10;&#10;                # Supprimer également du dossier static&#10;                static_thumbnails_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'thumbnails')&#10;                old_static_filepath = os.path.join(static_thumbnails_dir, old_filename)&#10;                if os.path.exists(old_static_filepath):&#10;                    os.remove(old_static_filepath)&#10;            except Exception as e:&#10;                logger.warning(f&quot;Erreur lors de la suppression de l'ancienne miniature: {str(e)}&quot;)&#10;&#10;        # Sécuriser le nom de fichier&#10;        filename = secure_filename(thumbnail_file.filename)&#10;        # Ajouter un identifiant unique pour éviter les collisions&#10;        unique_filename = f&quot;{uuid.uuid4()}_{filename}&quot;&#10;        # Chemin complet&#10;        filepath = os.path.join(THUMBNAILS_DIR, unique_filename)&#10;&#10;        # Enregistrer le fichier&#10;        thumbnail_file.save(filepath)&#10;&#10;        # Mettre à jour l'URL dans la configuration&#10;        existing_config['thumbnailUrl'] = f&quot;/static/thumbnails/{unique_filename}&quot;&#10;&#10;        # Créer un lien symbolique vers le dossier static si nécessaire&#10;        static_thumbnails_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'thumbnails')&#10;        os.makedirs(static_thumbnails_dir, exist_ok=True)&#10;&#10;        # Copier le fichier dans le dossier static&#10;        import shutil&#10;        shutil.copy2(filepath, os.path.join(static_thumbnails_dir, unique_filename))&#10;&#10;        # Enregistrer la configuration mise à jour&#10;        with open(CONFIG_FILE, 'w') as f:&#10;            json.dump(existing_config, f, indent=2)&#10;&#10;        return jsonify({&#10;            &quot;success&quot;: True,&#10;            &quot;message&quot;: &quot;Miniature téléchargée avec succès&quot;,&#10;            &quot;thumbnailUrl&quot;: existing_config['thumbnailUrl']&#10;        })&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors du téléchargement de la miniature: {str(e)}&quot;)&#10;        return jsonify({&#10;            &quot;success&quot;: False,&#10;            &quot;message&quot;: f&quot;Erreur lors du téléchargement de la miniature: {str(e)}&quot;&#10;        }), 500&#10;&#10;@stream_bp.route('/remove-thumbnail', methods=['POST'])&#10;def remove_thumbnail():&#10;    &quot;&quot;&quot;Supprimer la miniature actuelle&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer la configuration existante&#10;        with open(CONFIG_FILE, 'r') as f:&#10;            existing_config = json.load(f)&#10;&#10;        # Vérifier si une miniature existe&#10;        if 'thumbnailUrl' not in existing_config or not existing_config['thumbnailUrl']:&#10;            return jsonify({&#10;                &quot;success&quot;: False,&#10;                &quot;message&quot;: &quot;Aucune miniature à supprimer&quot;&#10;            }), 400&#10;&#10;        # Supprimer le fichier&#10;        try:&#10;            filename = os.path.basename(existing_config['thumbnailUrl'])&#10;            filepath = os.path.join(THUMBNAILS_DIR, filename)&#10;            if os.path.exists(filepath):&#10;                os.remove(filepath)&#10;&#10;            # Supprimer également du dossier static&#10;            static_thumbnails_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'thumbnails')&#10;            static_filepath = os.path.join(static_thumbnails_dir, filename)&#10;            if os.path.exists(static_filepath):&#10;                os.remove(static_filepath)&#10;        except Exception as e:&#10;            logger.warning(f&quot;Erreur lors de la suppression du fichier de miniature: {str(e)}&quot;)&#10;&#10;        # Mettre à jour la configuration&#10;        existing_config['thumbnailUrl'] = None&#10;        existing_config['thumbnailVisible'] = False&#10;&#10;        # Enregistrer la configuration mise à jour&#10;        with open(CONFIG_FILE, 'w') as f:&#10;            json.dump(existing_config, f, indent=2)&#10;&#10;        # Désactiver la miniature dans vMix si elle était activée&#10;        try:&#10;            from ..core.vmix_manager import VMixManager&#10;            vmix_manager = VMixManager()&#10;            vmix_manager.set_overlay('Thumbnail', 1, False)&#10;        except Exception as e:&#10;            logger.warning(f&quot;Erreur lors de la désactivation de la miniature dans vMix: {str(e)}&quot;)&#10;&#10;        return jsonify({&#10;            &quot;success&quot;: True,&#10;            &quot;message&quot;: &quot;Miniature supprimée avec succès&quot;&#10;        })&#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la suppression de la miniature: {str(e)}&quot;)&#10;        return jsonify({&#10;            &quot;success&quot;: False,&#10;            &quot;message&quot;: f&quot;Erreur lors de la suppression de la miniature: {str(e)}&quot;&#10;        }), 500&#10;&#10;@stream_bp.route('/update-score', methods=['POST'])&#10;def update_score():&#10;    &quot;&quot;&quot;Mettre à jour le score dans vMix&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        &#10;        # Vérifier si les données nécessaires sont présentes&#10;        if not data or 'teamA' not in data or 'teamB' not in data:&#10;            return jsonify({&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;Données incomplètes&quot;}), 400&#10;        &#10;        # Récupérer les informations des équipes&#10;        team_a = data['teamA']&#10;        team_b = data['teamB']&#10;        &#10;        # Vérifier si vmix_manager est disponible dans l'application&#10;        if not hasattr(current_app, 'vmix_manager'):&#10;            from app.core.vmix_manager import VMixManager&#10;            current_app.vmix_manager = VMixManager()&#10;        &#10;        vmix_manager = current_app.vmix_manager&#10;        &#10;        # Mettre à jour le scoreboard dans vMix&#10;        # Le title_input est &quot;scoreboard&quot; pour scoreboard.gtzip&#10;        result = vmix_manager.update_scoreboard(&#10;            team_a_name=team_a.get('name', 'Équipe A'),&#10;            team_b_name=team_b.get('name', 'Équipe B'),&#10;            score_a=team_a.get('score', 0),&#10;            score_b=team_b.get('score', 0),&#10;            sets_a=team_a.get('sets', 0),&#10;            sets_b=team_b.get('sets', 0),&#10;            title_input=&quot;scoreboard&quot;&#10;        )&#10;        &#10;        if result:&#10;            logger.info(f&quot;Score mis à jour: {team_a.get('name')} {team_a.get('score')}-{team_b.get('score')} {team_b.get('name')}, sets: {team_a.get('sets')}-{team_b.get('sets')}&quot;)&#10;            return jsonify({&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Score mis à jour avec succès&quot;})&#10;        else:&#10;            logger.error(&quot;Échec de la mise à jour du score dans vMix&quot;)&#10;            return jsonify({&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;Échec de la mise à jour du score&quot;}), 500&#10;    &#10;    except Exception as e:&#10;        logger.error(f&quot;Erreur lors de la mise à jour du score: {str(e)}&quot;)&#10;        return jsonify({&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: f&quot;Erreur: {str(e)}&quot;}), 500" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/api/teams.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/api/teams.py" />
              <option name="originalContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;import uuid&#10;import csv&#10;import io&#10;from werkzeug.utils import secure_filename&#10;from ..core.team_manager import TeamManager&#10;&#10;teams_bp = Blueprint('teams', __name__)&#10;team_manager = TeamManager()&#10;&#10;@teams_bp.route('', methods=['GET'])&#10;def get_teams():&#10;    &quot;&quot;&quot;Récupérer la liste des équipes&quot;&quot;&quot;&#10;    teams = team_manager.get_all_teams()&#10;    return jsonify({&quot;teams&quot;: teams})&#10;&#10;@teams_bp.route('/create', methods=['POST'])&#10;def create_team():&#10;    &quot;&quot;&quot;Créer une nouvelle équipe&quot;&quot;&quot;&#10;" />
              <option name="updatedContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;import uuid&#10;import csv&#10;import io&#10;from werkzeug.utils import secure_filename&#10;from ..core.team_manager import TeamManager&#10;&#10;teams_bp = Blueprint('teams', __name__)&#10;team_manager = TeamManager()&#10;&#10;@teams_bp.route('', methods=['GET'])&#10;def get_teams():&#10;    &quot;&quot;&quot;Récupérer la liste des équipes&quot;&quot;&quot;&#10;    teams = team_manager.get_all_teams()&#10;    return jsonify({&quot;teams&quot;: teams})&#10;&#10;@teams_bp.route('/create', methods=['POST'])&#10;def create_team():&#10;    &quot;&quot;&quot;Créer une nouvelle équipe&quot;&quot;&quot;&#10;    print(&quot;DEBUG: Appel de la route /api/teams/create&quot;)&#10;    print(f&quot;DEBUG: Contenu du formulaire: {request.form}&quot;)&#10;    print(f&quot;DEBUG: Fichiers reçus: {request.files}&quot;)&#10;    &#10;    if 'team_name' not in request.form:&#10;        print(&quot;DEBUG: Erreur - Le nom de l'équipe est requis&quot;)&#10;        return jsonify({&quot;error&quot;: &quot;Le nom de l'équipe est requis&quot;}), 400&#10;&#10;    team_name = request.form['team_name']&#10;    team_logo = None&#10;    players = []&#10;&#10;    # Gérer le logo de l'équipe s'il est fourni&#10;    if 'team_logo' in request.files and request.files['team_logo'].filename:&#10;        logo_file = request.files['team_logo']&#10;        print(f&quot;DEBUG: Logo reçu: {logo_file.filename}&quot;)&#10;        # Sauvegarder le logo et obtenir son chemin&#10;        team_logo = team_manager.save_team_logo(logo_file)&#10;        print(f&quot;DEBUG: Chemin du logo sauvegardé: {team_logo}&quot;)&#10;&#10;    # Gérer le fichier CSV des joueurs s'il est fourni&#10;    if 'players_csv' in request.files and request.files['players_csv'].filename:&#10;        csv_file = request.files['players_csv']&#10;        print(f&quot;DEBUG: Fichier CSV reçu: {csv_file.filename}&quot;)&#10;        # Lire et parser le CSV&#10;        players = team_manager.parse_players_csv(csv_file)&#10;        print(f&quot;DEBUG: Nombre de joueurs parsés: {len(players)}&quot;)&#10;&#10;    # Créer l'équipe&#10;    team_id = team_manager.create_team(team_name, team_logo, players)&#10;    print(f&quot;DEBUG: Équipe créée avec ID: {team_id}&quot;)&#10;&#10;    return jsonify({&#10;        &quot;message&quot;: f&quot;Équipe '{team_name}' créée avec succès&quot;,&#10;        &quot;team&quot;: {&#10;            &quot;id&quot;: team_id,&#10;            &quot;name&quot;: team_name,&#10;            &quot;logo&quot;: team_logo,&#10;            &quot;players&quot;: players&#10;        }&#10;    })&#10;&#10;@teams_bp.route('/&lt;team_id&gt;', methods=['GET'])&#10;def get_team(team_id):&#10;    &quot;&quot;&quot;Récupérer les détails d'une équipe&quot;&quot;&quot;&#10;    team = team_manager.get_team(team_id)&#10;    if not team:&#10;        return jsonify({&quot;error&quot;: &quot;Équipe non trouvée&quot;}), 404&#10;&#10;    return jsonify({&quot;team&quot;: team})&#10;&#10;@teams_bp.route('/&lt;team_id&gt;/delete', methods=['DELETE'])&#10;def delete_team(team_id):&#10;    &quot;&quot;&quot;Supprimer une équipe&quot;&quot;&quot;&#10;    success = team_manager.delete_team(team_id)&#10;    if not success:&#10;        return jsonify({&quot;error&quot;: &quot;Équipe non trouvée ou impossible à supprimer&quot;}), 404&#10;&#10;    return jsonify({&quot;message&quot;: &quot;Équipe supprimée avec succès&quot;})&#10;&#10;@teams_bp.route('/&lt;team_id&gt;/players', methods=['GET'])&#10;def get_team_players(team_id):&#10;    &quot;&quot;&quot;Récupérer les joueurs d'une équipe&quot;&quot;&quot;&#10;    players = team_manager.get_team_players(team_id)&#10;    if players is None:&#10;        return jsonify({&quot;error&quot;: &quot;Équipe non trouvée&quot;}), 404&#10;&#10;    return jsonify({&quot;players&quot;: players})&#10;&#10;@teams_bp.route('/match/configure', methods=['POST'])&#10;def configure_match_teams():&#10;    &quot;&quot;&quot;Configurer les équipes pour un match&quot;&quot;&quot;&#10;    # Si nous avons des fichiers (nouvelles équipes), utiliser FormData&#10;    if request.files:&#10;        if 'match_data' not in request.form:&#10;            return jsonify({&quot;error&quot;: &quot;Les données du match sont requises&quot;}), 400&#10;&#10;        try:&#10;            match_data = json.loads(request.form['match_data'])&#10;        except:&#10;            return jsonify({&quot;error&quot;: &quot;Format de données invalide&quot;}), 400&#10;&#10;        # Traiter les données des équipes A et B&#10;        for team_key in ['teamA', 'teamB']:&#10;            if match_data[team_key]['createNew']:&#10;                team_name = match_data[team_key]['name']&#10;                team_logo = None&#10;                players = []&#10;&#10;                # Traiter le logo&#10;                if f'{team_key}_logo' in request.files:&#10;                    logo_file = request.files[f'{team_key}_logo']&#10;                    if logo_file.filename:&#10;                        team_logo = team_manager.save_team_logo(logo_file)&#10;&#10;                # Traiter le CSV des joueurs&#10;                if f'{team_key}_players' in request.files:&#10;                    csv_file = request.files[f'{team_key}_players']&#10;                    if csv_file.filename:&#10;                        players = team_manager.parse_players_csv(csv_file)&#10;&#10;                # Créer l'équipe&#10;                team_id = team_manager.create_team(team_name, team_logo, players)&#10;                match_data[team_key]['id'] = team_id&#10;&#10;        # Sauvegarder la configuration du match&#10;        team_manager.set_match_teams(match_data['teamA']['id'], match_data['teamB']['id'])&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: &quot;Configuration du match enregistrée avec succès&quot;,&#10;            &quot;redirect&quot;: &quot;/live-setup&quot;&#10;        })&#10;&#10;    # Si nous n'avons pas de fichiers (équipes existantes), utiliser JSON&#10;    else:&#10;        try:&#10;            match_data = request.json&#10;        except:&#10;            return jsonify({&quot;error&quot;: &quot;Format de données invalide&quot;}), 400&#10;&#10;        # Vérifier que les IDs des équipes sont fournis&#10;        if not match_data.get('teamA', {}).get('id') or not match_data.get('teamB', {}).get('id'):&#10;            return jsonify({&quot;error&quot;: &quot;Les IDs des équipes sont requis&quot;}), 400&#10;&#10;        # Sauvegarder la configuration du match&#10;        team_manager.set_match_teams(match_data['teamA']['id'], match_data['teamB']['id'])&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: &quot;Configuration du match enregistrée avec succès&quot;,&#10;            &quot;redirect&quot;: &quot;/live-setup&quot;&#10;        })&#10;&#10;@teams_bp.route('/match/current', methods=['GET'])&#10;def get_current_match():&#10;    &quot;&quot;&quot;Récupérer les équipes du match actuel&quot;&quot;&quot;&#10;    current_match = team_manager.get_current_match()&#10;&#10;    # Si aucune équipe n'est configurée, renvoyer un objet vide&#10;    if not current_match or not current_match.get('team_a') or not current_match.get('team_b'):&#10;        return jsonify({&#10;            &quot;team_a&quot;: None,&#10;            &quot;team_b&quot;: None&#10;        })&#10;&#10;    return jsonify({&#10;        &quot;team_a&quot;: current_match.get('team_a'),&#10;        &quot;team_b&quot;: current_match.get('team_b')&#10;    })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/api/vmix.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/api/vmix.py" />
              <option name="originalContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;from ..core.vmix_manager import VMixManager&#10;from ..core.team_manager import TeamManager&#10;&#10;vmix_bp = Blueprint('vmix', __name__)&#10;vmix_manager = VMixManager()&#10;team_manager = TeamManager()&#10;&#10;@vmix_bp.route('/status', methods=['GET'])&#10;def get_vmix_status():&#10;    &quot;&quot;&quot;Vérifier le statut de connexion à vMix&quot;&quot;&quot;&#10;    status = vmix_manager.check_connection()&#10;    host = '127.0.0.1'  # Par défaut&#10;    port = 8088  # Par défaut&#10;&#10;    # Si la connexion est établie, récupérer les infos de connexion&#10;    if status:&#10;        host = vmix_manager.host&#10;        port = vmix_manager.port&#10;&#10;    return jsonify({&#10;        &quot;connected&quot;: status,&#10;        &quot;host&quot;: host,&#10;        &quot;port&quot;: port&#10;    })&#10;&#10;@vmix_bp.route('/send-roster', methods=['POST'])&#10;def send_roster_to_vmix():&#10;    &quot;&quot;&quot;Envoyer un roster d'équipe vers vMix depuis un fichier CSV&quot;&quot;&quot;&#10;    if 'team_name' not in request.form:&#10;        return jsonify({&quot;error&quot;: &quot;Le nom de l'équipe est requis&quot;}), 400&#10;&#10;    if 'players_csv' not in request.files or not request.files['players_csv'].filename:&#10;        return jsonify({&quot;error&quot;: &quot;Un fichier CSV des joueurs est requis&quot;}), 400&#10;&#10;    team_name = request.form['team_name']&#10;    csv_file = request.files['players_csv']&#10;&#10;    # Parser le CSV pour obtenir la liste des joueurs&#10;    players = team_manager.parse_players_csv(csv_file)&#10;&#10;    # Envoyer les données à vMix&#10;    success = vmix_manager.send_roster_to_vmix(team_name, players)&#10;&#10;    if success:&#10;        return jsonify({&quot;message&quot;: f&quot;Roster de l'équipe '{team_name}' envoyé avec succès à vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'envoi du roster à vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/send-roster/&lt;team_id&gt;', methods=['POST'])&#10;def send_team_roster_to_vmix(team_id):&#10;    &quot;&quot;&quot;Envoyer le roster d'une équipe existante vers vMix&quot;&quot;&quot;&#10;    # Récupérer les détails de l'équipe&#10;    team = team_manager.get_team(team_id)&#10;    if not team:&#10;        return jsonify({&quot;error&quot;: &quot;Équipe non trouvée&quot;}), 404&#10;&#10;    # Récupérer les joueurs de l'équipe&#10;    players = team_manager.get_team_players(team_id)&#10;    if not players:&#10;        return jsonify({&quot;error&quot;: &quot;Aucun joueur trouvé pour cette équipe&quot;}), 404&#10;&#10;    # Envoyer les données à vMix&#10;    success = vmix_manager.send_roster_to_vmix(team['name'], players)&#10;&#10;    if success:&#10;        return jsonify({&quot;message&quot;: f&quot;Roster de l'équipe '{team['name']}' envoyé avec succès à vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'envoi du roster à vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/show-player', methods=['POST'])&#10;def show_player_in_vmix():&#10;    &quot;&quot;&quot;Afficher les détails d'un joueur dans vMix&quot;&quot;&quot;&#10;    data = request.json&#10;    if not data or 'player' not in data:&#10;        return jsonify({&quot;error&quot;: &quot;Les données du joueur sont requises&quot;}), 400&#10;&#10;    player = data['player']&#10;    team_id = data.get('teamId')&#10;&#10;    # Si l'ID de l'équipe est fourni, récupérer les détails de l'équipe&#10;    team_name = None&#10;    if team_id:&#10;        team = team_manager.get_team(team_id)&#10;        if team:&#10;            team_name = team['name']&#10;&#10;    # Envoyer les détails du joueur à vMix&#10;    success = vmix_manager.show_player_details(player, team_name)&#10;&#10;    if success:&#10;        player_name = f&quot;{player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;        return jsonify({&quot;message&quot;: f&quot;Détails du joueur '{player_name}' affichés dans vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'affichage des détails du joueur dans vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/inputs', methods=['GET'])&#10;def get_vmix_inputs():&#10;    &quot;&quot;&quot;Récupérer la liste des inputs disponibles dans vMix avec option de rafraîchissement forcé&quot;&quot;&quot;&#10;    # Vérifier si on demande un rafraîchissement&#10;    should_refresh = request.args.get('refresh', 'false').lower() == 'true'&#10;&#10;    try:&#10;        if should_refresh:&#10;            # Forcer une nouvelle connexion à vMix pour obtenir des données fraîches&#10;            vmix_manager.check_connection()&#10;&#10;        inputs = vmix_manager.get_inputs()&#10;&#10;        # Catégoriser les inputs&#10;        categorized_inputs = {&#10;            'video': [],&#10;            'audio': [],&#10;            'title': [],&#10;            'other': []&#10;        }&#10;&#10;        for input_data in inputs:&#10;            input_type = input_data.get('type', '').lower()&#10;            name = input_data.get('title', '').lower()&#10;&#10;            # Déterminer la catégorie de l'input&#10;            if any(keyword in input_type for keyword in ['capture', 'camera', 'video']):&#10;                category = 'video'&#10;            elif any(keyword in input_type for keyword in ['audio', 'sound']) or \&#10;                 any(keyword in name for keyword in ['mic', 'audio', 'sound', 'comment', 'ambiance']):&#10;                category = 'audio'&#10;            elif any(keyword in input_type for keyword in ['title', 'gt']):&#10;                category = 'title'&#10;            else:&#10;                category = 'other'&#10;&#10;            # Ajouter l'input à sa catégorie avec toutes les informations nécessaires&#10;            categorized_inputs[category].append({&#10;                'id': input_data.get('number'),&#10;                'name': input_data.get('title'),&#10;                'type': input_data.get('type'),&#10;                'state': input_data.get('state')&#10;            })&#10;&#10;        return jsonify(categorized_inputs)&#10;&#10;    except Exception as e:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la récupération des inputs vMix: {str(e)}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/start-streaming', methods=['POST'])&#10;def start_streaming():&#10;    &quot;&quot;&quot;Démarrer le streaming dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer le canal de streaming spécifié dans la requête (par défaut: 0)&#10;        data = request.json or {}&#10;        channel = data.get('channel', 0)&#10;&#10;        success = vmix_manager.start_streaming(channel)&#10;        if success:&#10;            return jsonify({&quot;message&quot;: f&quot;Streaming démarré avec succès sur le canal {channel if channel else 'par défaut'}&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage du streaming&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/stop-streaming', methods=['POST'])&#10;def stop_streaming():&#10;    &quot;&quot;&quot;Arrêter le streaming dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer le canal de streaming spécifié dans la requête (par défaut: 0)&#10;        data = request.json or {}&#10;        channel = data.get('channel', 0)&#10;&#10;        success = vmix_manager.stop_streaming(channel)&#10;        if success:&#10;            return jsonify({&quot;message&quot;: f&quot;Streaming arrêté avec succès sur le canal {channel if channel else 'par défaut'}&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt du streaming&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/start-recording', methods=['POST'])&#10;def start_recording():&#10;    &quot;&quot;&quot;Démarrer l'enregistrement dans vMix&quot;&quot;&quot;&#10;    try:&#10;        success = vmix_manager.start_recording()&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Enregistrement démarré avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage de l'enregistrement&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage de l'enregistrement: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/stop-recording', methods=['POST'])&#10;def stop_recording():&#10;    &quot;&quot;&quot;Arrêter l'enregistrement dans vMix&quot;&quot;&quot;&#10;    try:&#10;        success = vmix_manager.stop_recording()&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Enregistrement arrêté avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt de l'enregistrement&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt de l'enregistrement: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/streaming-status', methods=['GET'])&#10;def get_streaming_status():&#10;    &quot;&quot;&quot;Récupérer le statut du streaming et de l'enregistrement&quot;&quot;&quot;&#10;    try:&#10;        streaming_status = vmix_manager.get_streaming_status()&#10;        recording_status = vmix_manager.get_recording_status()&#10;&#10;        return jsonify({&#10;            &quot;isStreaming&quot;: streaming_status,&#10;            &quot;isRecording&quot;: recording_status,&#10;            &quot;streamingStartTime&quot;: None,  # À implémenter si nécessaire&#10;            &quot;recordingStartTime&quot;: None   # À implémenter si nécessaire&#10;        })&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la récupération du statut: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/load-teams', methods=['POST'])&#10;def load_teams_to_vmix():&#10;    &quot;&quot;&quot;Charger les équipes du match actuel dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer les IDs des équipes depuis la requête&#10;        data = request.json&#10;        team_a_id = data.get('teamA')&#10;        team_b_id = data.get('teamB')&#10;&#10;        # Si les IDs ne sont pas fournis, utiliser les équipes du match actuel&#10;        if not team_a_id or not team_b_id:&#10;            current_match = team_manager.get_current_match()&#10;            if not current_match or not current_match.get('team_a') or not current_match.get('team_b'):&#10;                return jsonify({&quot;error&quot;: &quot;Aucune équipe configurée pour le match&quot;}), 400&#10;&#10;            team_a_id = current_match['team_a']['id']&#10;            team_b_id = current_match['team_b']['id']&#10;&#10;        # Récupérer les détails des équipes&#10;        team_a = team_manager.get_team(team_a_id)&#10;        team_b = team_manager.get_team(team_b_id)&#10;&#10;        if not team_a or not team_b:&#10;            return jsonify({&quot;error&quot;: &quot;Une ou plusieurs équipes non trouvées&quot;}), 404&#10;&#10;        # Envoyer les informations des équipes vers vMix&#10;&#10;        # 1. Envoyer les noms des équipes pour le score&#10;        score_success = vmix_manager.update_title_multiple(&quot;ScoreOverlay&quot;, {&#10;            &quot;TeamA&quot;: team_a['name'],&#10;            &quot;TeamB&quot;: team_b['name'],&#10;            &quot;ScoreA&quot;: &quot;0&quot;,&#10;            &quot;ScoreB&quot;: &quot;0&quot;,&#10;            &quot;Sets&quot;: &quot;0-0&quot;&#10;        })&#10;&#10;        # 2. Envoyer les logos des équipes si disponibles&#10;        logo_success = True&#10;        if team_a.get('logo'):&#10;            logo_success = logo_success and vmix_manager.set_image(&quot;ScoreOverlay&quot;, &quot;LogoA&quot;, team_a['logo'])&#10;        if team_b.get('logo'):&#10;            logo_success = logo_success and vmix_manager.set_image(&quot;ScoreOverlay&quot;, &quot;LogoB&quot;, team_b['logo'])&#10;&#10;        # 3. Envoyer les rosters des équipes&#10;        roster_a_success = True&#10;        roster_b_success = True&#10;&#10;        players_a = team_manager.get_team_players(team_a_id)&#10;        if players_a:&#10;            roster_a_success = vmix_manager.send_roster_to_vmix(team_a['name'], players_a)&#10;&#10;        players_b = team_manager.get_team_players(team_b_id)&#10;        if players_b:&#10;            roster_b_success = vmix_manager.send_roster_to_vmix(team_b['name'], players_b)&#10;&#10;        # Vérifier si toutes les opérations ont réussi&#10;        if score_success and logo_success and roster_a_success and roster_b_success:&#10;            return jsonify({&quot;message&quot;: &quot;Équipes chargées avec succès dans vMix&quot;})&#10;        else:&#10;            # Identifier quelles opérations ont échoué&#10;            errors = []&#10;            if not score_success:&#10;                errors.append(&quot;Erreur lors de la mise à jour du score&quot;)&#10;            if not logo_success:&#10;                errors.append(&quot;Erreur lors du chargement des logos&quot;)&#10;            if not roster_a_success:&#10;                errors.append(f&quot;Erreur lors du chargement du roster de l'équipe {team_a['name']}&quot;)&#10;            if not roster_b_success:&#10;                errors.append(f&quot;Erreur lors du chargement du roster de l'équipe {team_b['name']}&quot;)&#10;&#10;            return jsonify({&#10;                &quot;message&quot;: &quot;Équipes partiellement chargées dans vMix&quot;,&#10;                &quot;errors&quot;: errors&#10;            }), 500&#10;&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du chargement des équipes dans vMix: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/toggle-audio', methods=['POST'])&#10;def toggle_audio():&#10;    &quot;&quot;&quot;Active ou désactive l'audio d'une entrée spécifique&quot;&quot;&quot;&#10;    data = request.json&#10;&#10;    if not data or 'inputId' not in data:&#10;        return jsonify({&quot;error&quot;: &quot;L'ID de l'input est requis&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;&#10;    input_id = data['inputId']&#10;    mute_state = data.get('mute')  # True pour mute, False pour unmute, None pour toggle&#10;&#10;    success = vmix_manager.toggle_audio(input_id, mute_state)&#10;&#10;    if success:&#10;        action = &quot;modifié&quot;&#10;        if mute_state is not None:&#10;            action = &quot;coupé&quot; if mute_state else &quot;activé&quot;&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: f&quot;Audio de l'input {input_id} {action} avec succès&quot;,&#10;            &quot;status&quot;: &quot;success&quot;&#10;        })&#10;    else:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la modification de l'audio pour l'input {input_id}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/audio/volume', methods=['POST'])&#10;def adjust_audio_volume():&#10;    &quot;&quot;&quot;Ajuste le volume d'une entrée audio&quot;&quot;&quot;&#10;    data = request.json&#10;&#10;    if not data or 'inputId' not in data or 'volume' not in data:&#10;        return jsonify({&#10;            &quot;error&quot;: &quot;L'ID de l'input et le volume sont requis&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 400&#10;&#10;    input_id = data['inputId']&#10;    volume = data['volume']&#10;&#10;    # Vérifier que le volume est un nombre entre 0 et 100&#10;    try:&#10;        volume = float(volume)&#10;        if volume &lt; 0 or volume &gt; 100:&#10;            raise ValueError(&quot;Le volume doit être entre 0 et 100&quot;)&#10;    except ValueError as e:&#10;        return jsonify({&#10;            &quot;error&quot;: str(e),&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 400&#10;&#10;    success = vmix_manager.adjust_audio_volume(input_id, volume)&#10;&#10;    if success:&#10;        return jsonify({&#10;            &quot;message&quot;: f&quot;Volume de l'input {input_id} ajusté à {volume}%&quot;,&#10;            &quot;status&quot;: &quot;success&quot;&#10;        })&#10;    else:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de l'ajustement du volume pour l'input {input_id}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/audio/status', methods=['GET'])&#10;def get_audio_status():&#10;    &quot;&quot;&quot;Récupère le statut audio des entrées vMix&quot;&quot;&quot;&#10;    input_id = request.args.get('inputId')  # Optionnel, pour filtrer un seul input&#10;&#10;    audio_status = vmix_manager.get_audio_status(input_id)&#10;&#10;    if audio_status is None:&#10;        return jsonify({&#10;            &quot;error&quot;: &quot;Erreur lors de la récupération du statut audio&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;    return jsonify({&#10;        &quot;audioStatus&quot;: audio_status,&#10;        &quot;status&quot;: &quot;success&quot;&#10;    })&#10;&#10;@vmix_bp.route('/update-score', methods=['POST'])&#10;def update_score():&#10;    &quot;&quot;&quot;&#10;    Met à jour le score et les noms des équipes dans vMix&#10;    &#10;    Attend un JSON avec le format suivant:&#10;    {&#10;        &quot;teamA&quot;: {&#10;            &quot;name&quot;: &quot;Nom Équipe A&quot;,&#10;            &quot;score&quot;: 10,&#10;            &quot;sets&quot;: 2&#10;        },&#10;        &quot;teamB&quot;: {&#10;            &quot;name&quot;: &quot;Nom Équipe B&quot;,&#10;            &quot;score&quot;: 8,&#10;            &quot;sets&quot;: 1&#10;        },&#10;        &quot;titleInput&quot;: &quot;scoreboard&quot;  // Optionnel, nom du titre vMix à mettre à jour&#10;    }&#10;    &quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        if not data:&#10;            return jsonify({&quot;error&quot;: &quot;Aucune donnée fournie&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Vérifier que les données nécessaires sont présentes&#10;        if 'teamA' not in data or 'teamB' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;Les données des équipes sont requises&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Extraire les données&#10;        team_a = data['teamA']&#10;        team_b = data['teamB']&#10;        title_input = data.get('titleInput', 'scoreboard')&#10;        &#10;        # Vérifier que les données minimales sont présentes pour chaque équipe&#10;        if 'name' not in team_a or 'score' not in team_a or 'sets' not in team_a:&#10;            return jsonify({&quot;error&quot;: &quot;Données incomplètes pour l'équipe A&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        if 'name' not in team_b or 'score' not in team_b or 'sets' not in team_b:&#10;            return jsonify({&quot;error&quot;: &quot;Données incomplètes pour l'équipe B&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Mettre à jour le scoreboard dans vMix&#10;        success = vmix_manager.update_scoreboard(&#10;            team_a['name'], &#10;            team_b['name'], &#10;            team_a['score'], &#10;            team_b['score'], &#10;            team_a['sets'], &#10;            team_b['sets'],&#10;            title_input&#10;        )&#10;        &#10;        if success:&#10;            return jsonify({&#10;                &quot;message&quot;: &quot;Score mis à jour avec succès&quot;,&#10;                &quot;status&quot;: &quot;success&quot;&#10;            })&#10;        else:&#10;            return jsonify({&#10;                &quot;error&quot;: &quot;Erreur lors de la mise à jour du score&quot;,&#10;                &quot;status&quot;: &quot;error&quot;&#10;            }), 500&#10;            &#10;    except Exception as e:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la mise à jour du score: {str(e)}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500" />
              <option name="updatedContent" value="from flask import Blueprint, request, jsonify&#10;import os&#10;import json&#10;from ..core.vmix_manager import VMixManager&#10;from ..core.team_manager import TeamManager&#10;&#10;vmix_bp = Blueprint('vmix', __name__)&#10;vmix_manager = VMixManager()&#10;team_manager = TeamManager()&#10;&#10;@vmix_bp.route('/status', methods=['GET'])&#10;def get_vmix_status():&#10;    &quot;&quot;&quot;Vérifier le statut de connexion à vMix&quot;&quot;&quot;&#10;    status = vmix_manager.check_connection()&#10;    host = '127.0.0.1'  # Par défaut&#10;    port = 8088  # Par défaut&#10;&#10;    # Si la connexion est établie, récupérer les infos de connexion&#10;    if status:&#10;        host = vmix_manager.host&#10;        port = vmix_manager.port&#10;&#10;    return jsonify({&#10;        &quot;connected&quot;: status,&#10;        &quot;host&quot;: host,&#10;        &quot;port&quot;: port&#10;    })&#10;&#10;@vmix_bp.route('/send-roster', methods=['POST'])&#10;def send_roster_to_vmix():&#10;    &quot;&quot;&quot;Envoyer un roster d'équipe vers vMix depuis un fichier CSV&quot;&quot;&quot;&#10;    if 'team_name' not in request.form:&#10;        return jsonify({&quot;error&quot;: &quot;Le nom de l'équipe est requis&quot;}), 400&#10;&#10;    if 'players_csv' not in request.files or not request.files['players_csv'].filename:&#10;        return jsonify({&quot;error&quot;: &quot;Un fichier CSV des joueurs est requis&quot;}), 400&#10;&#10;    team_name = request.form['team_name']&#10;    csv_file = request.files['players_csv']&#10;&#10;    # Parser le CSV pour obtenir la liste des joueurs&#10;    players = team_manager.parse_players_csv(csv_file)&#10;&#10;    # Envoyer les données à vMix&#10;    success = vmix_manager.send_roster_to_vmix(team_name, players)&#10;&#10;    if success:&#10;        return jsonify({&quot;message&quot;: f&quot;Roster de l'équipe '{team_name}' envoyé avec succès à vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'envoi du roster à vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/send-roster/&lt;team_id&gt;', methods=['POST'])&#10;def send_team_roster_to_vmix(team_id):&#10;    &quot;&quot;&quot;Envoyer le roster d'une équipe existante vers vMix&quot;&quot;&quot;&#10;    # Récupérer les détails de l'équipe&#10;    team = team_manager.get_team(team_id)&#10;    if not team:&#10;        return jsonify({&quot;error&quot;: &quot;Équipe non trouvée&quot;}), 404&#10;&#10;    # Récupérer les joueurs de l'équipe&#10;    players = team_manager.get_team_players(team_id)&#10;    if not players:&#10;        return jsonify({&quot;error&quot;: &quot;Aucun joueur trouvé pour cette équipe&quot;}), 404&#10;&#10;    # Envoyer les données à vMix&#10;    success = vmix_manager.send_roster_to_vmix(team['name'], players)&#10;&#10;    if success:&#10;        return jsonify({&quot;message&quot;: f&quot;Roster de l'équipe '{team['name']}' envoyé avec succès à vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'envoi du roster à vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/show-player', methods=['POST'])&#10;def show_player_in_vmix():&#10;    &quot;&quot;&quot;Afficher les détails d'un joueur dans vMix&quot;&quot;&quot;&#10;    data = request.json&#10;    if not data or 'player' not in data:&#10;        return jsonify({&quot;error&quot;: &quot;Les données du joueur sont requises&quot;}), 400&#10;&#10;    player = data['player']&#10;    team_id = data.get('teamId')&#10;&#10;    # Si l'ID de l'équipe est fourni, récupérer les détails de l'équipe&#10;    team_name = None&#10;    if team_id:&#10;        team = team_manager.get_team(team_id)&#10;        if team:&#10;            team_name = team['name']&#10;&#10;    # Envoyer les détails du joueur à vMix&#10;    success = vmix_manager.show_player_details(player, team_name)&#10;&#10;    if success:&#10;        player_name = f&quot;{player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;        return jsonify({&quot;message&quot;: f&quot;Détails du joueur '{player_name}' affichés dans vMix&quot;})&#10;    else:&#10;        return jsonify({&quot;error&quot;: &quot;Erreur lors de l'affichage des détails du joueur dans vMix&quot;}), 500&#10;&#10;@vmix_bp.route('/inputs', methods=['GET'])&#10;def get_vmix_inputs():&#10;    &quot;&quot;&quot;Récupérer la liste des inputs disponibles dans vMix avec option de rafraîchissement forcé&quot;&quot;&quot;&#10;    # Vérifier si on demande un rafraîchissement&#10;    should_refresh = request.args.get('refresh', 'false').lower() == 'true'&#10;&#10;    try:&#10;        if should_refresh:&#10;            # Forcer une nouvelle connexion à vMix pour obtenir des données fraîches&#10;            vmix_manager.check_connection()&#10;&#10;        inputs = vmix_manager.get_inputs()&#10;&#10;        # Catégoriser les inputs&#10;        categorized_inputs = {&#10;            'video': [],&#10;            'audio': [],&#10;            'title': [],&#10;            'other': []&#10;        }&#10;&#10;        for input_data in inputs:&#10;            input_type = input_data.get('type', '').lower()&#10;            name = input_data.get('title', '').lower()&#10;&#10;            # Déterminer la catégorie de l'input&#10;            if any(keyword in input_type for keyword in ['capture', 'camera', 'video']):&#10;                category = 'video'&#10;            elif any(keyword in input_type for keyword in ['audio', 'sound']) or \&#10;                 any(keyword in name for keyword in ['mic', 'audio', 'sound', 'comment', 'ambiance']):&#10;                category = 'audio'&#10;            elif any(keyword in input_type for keyword in ['title', 'gt']):&#10;                category = 'title'&#10;            else:&#10;                category = 'other'&#10;&#10;            # Ajouter l'input à sa catégorie avec toutes les informations nécessaires&#10;            categorized_inputs[category].append({&#10;                'id': input_data.get('number'),&#10;                'name': input_data.get('title'),&#10;                'type': input_data.get('type'),&#10;                'state': input_data.get('state')&#10;            })&#10;&#10;        return jsonify(categorized_inputs)&#10;&#10;    except Exception as e:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la récupération des inputs vMix: {str(e)}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/start-streaming', methods=['POST'])&#10;def start_streaming():&#10;    &quot;&quot;&quot;Démarrer le streaming dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer le canal de streaming spécifié dans la requête (par défaut: 0)&#10;        data = request.json or {}&#10;        channel = data.get('channel', 0)&#10;&#10;        success = vmix_manager.start_streaming(channel)&#10;        if success:&#10;            return jsonify({&quot;message&quot;: f&quot;Streaming démarré avec succès sur le canal {channel if channel else 'par défaut'}&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage du streaming&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/stop-streaming', methods=['POST'])&#10;def stop_streaming():&#10;    &quot;&quot;&quot;Arrêter le streaming dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer le canal de streaming spécifié dans la requête (par défaut: 0)&#10;        data = request.json or {}&#10;        channel = data.get('channel', 0)&#10;&#10;        success = vmix_manager.stop_streaming(channel)&#10;        if success:&#10;            return jsonify({&quot;message&quot;: f&quot;Streaming arrêté avec succès sur le canal {channel if channel else 'par défaut'}&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt du streaming&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/start-recording', methods=['POST'])&#10;def start_recording():&#10;    &quot;&quot;&quot;Démarrer l'enregistrement dans vMix&quot;&quot;&quot;&#10;    try:&#10;        success = vmix_manager.start_recording()&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Enregistrement démarré avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors du démarrage de l'enregistrement&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du démarrage de l'enregistrement: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/stop-recording', methods=['POST'])&#10;def stop_recording():&#10;    &quot;&quot;&quot;Arrêter l'enregistrement dans vMix&quot;&quot;&quot;&#10;    try:&#10;        success = vmix_manager.stop_recording()&#10;        if success:&#10;            return jsonify({&quot;message&quot;: &quot;Enregistrement arrêté avec succès&quot;})&#10;        else:&#10;            return jsonify({&quot;error&quot;: &quot;Erreur lors de l'arrêt de l'enregistrement&quot;}), 500&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de l'arrêt de l'enregistrement: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/streaming-status', methods=['GET'])&#10;def get_streaming_status():&#10;    &quot;&quot;&quot;Récupérer le statut du streaming et de l'enregistrement&quot;&quot;&quot;&#10;    try:&#10;        streaming_status = vmix_manager.get_streaming_status()&#10;        recording_status = vmix_manager.get_recording_status()&#10;&#10;        return jsonify({&#10;            &quot;isStreaming&quot;: streaming_status,&#10;            &quot;isRecording&quot;: recording_status,&#10;            &quot;streamingStartTime&quot;: None,  # À implémenter si nécessaire&#10;            &quot;recordingStartTime&quot;: None   # À implémenter si nécessaire&#10;        })&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors de la récupération du statut: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/load-teams', methods=['POST'])&#10;def load_teams_to_vmix():&#10;    &quot;&quot;&quot;Charger les équipes du match actuel dans vMix&quot;&quot;&quot;&#10;    try:&#10;        # Récupérer les IDs des équipes depuis la requête&#10;        data = request.json&#10;        team_a_id = data.get('teamA')&#10;        team_b_id = data.get('teamB')&#10;&#10;        # Si les IDs ne sont pas fournis, utiliser les équipes du match actuel&#10;        if not team_a_id or not team_b_id:&#10;            current_match = team_manager.get_current_match()&#10;            if not current_match or not current_match.get('team_a') or not current_match.get('team_b'):&#10;                return jsonify({&quot;error&quot;: &quot;Aucune équipe configurée pour le match&quot;}), 400&#10;&#10;            team_a_id = current_match['team_a']['id']&#10;            team_b_id = current_match['team_b']['id']&#10;&#10;        # Récupérer les détails des équipes&#10;        team_a = team_manager.get_team(team_a_id)&#10;        team_b = team_manager.get_team(team_b_id)&#10;&#10;        if not team_a or not team_b:&#10;            return jsonify({&quot;error&quot;: &quot;Une ou plusieurs équipes non trouvées&quot;}), 404&#10;&#10;        # Envoyer les informations des équipes vers vMix&#10;&#10;        # 1. Envoyer les noms des équipes pour le score&#10;        score_success = vmix_manager.update_title_multiple(&quot;ScoreOverlay&quot;, {&#10;            &quot;TeamA&quot;: team_a['name'],&#10;            &quot;TeamB&quot;: team_b['name'],&#10;            &quot;ScoreA&quot;: &quot;0&quot;,&#10;            &quot;ScoreB&quot;: &quot;0&quot;,&#10;            &quot;Sets&quot;: &quot;0-0&quot;&#10;        })&#10;&#10;        # 2. Envoyer les logos des équipes si disponibles&#10;        logo_success = True&#10;        if team_a.get('logo'):&#10;            logo_success = logo_success and vmix_manager.set_image(&quot;ScoreOverlay&quot;, &quot;LogoA&quot;, team_a['logo'])&#10;        if team_b.get('logo'):&#10;            logo_success = logo_success and vmix_manager.set_image(&quot;ScoreOverlay&quot;, &quot;LogoB&quot;, team_b['logo'])&#10;&#10;        # 3. Envoyer les rosters des équipes&#10;        roster_a_success = True&#10;        roster_b_success = True&#10;&#10;        players_a = team_manager.get_team_players(team_a_id)&#10;        if players_a:&#10;            roster_a_success = vmix_manager.send_roster_to_vmix(team_a['name'], players_a)&#10;&#10;        players_b = team_manager.get_team_players(team_b_id)&#10;        if players_b:&#10;            roster_b_success = vmix_manager.send_roster_to_vmix(team_b['name'], players_b)&#10;&#10;        # Vérifier si toutes les opérations ont réussi&#10;        if score_success and logo_success and roster_a_success and roster_b_success:&#10;            return jsonify({&quot;message&quot;: &quot;Équipes chargées avec succès dans vMix&quot;})&#10;        else:&#10;            # Identifier quelles opérations ont échoué&#10;            errors = []&#10;            if not score_success:&#10;                errors.append(&quot;Erreur lors de la mise à jour du score&quot;)&#10;            if not logo_success:&#10;                errors.append(&quot;Erreur lors du chargement des logos&quot;)&#10;            if not roster_a_success:&#10;                errors.append(f&quot;Erreur lors du chargement du roster de l'équipe {team_a['name']}&quot;)&#10;            if not roster_b_success:&#10;                errors.append(f&quot;Erreur lors du chargement du roster de l'équipe {team_b['name']}&quot;)&#10;&#10;            return jsonify({&#10;                &quot;message&quot;: &quot;Équipes partiellement chargées dans vMix&quot;,&#10;                &quot;errors&quot;: errors&#10;            }), 500&#10;&#10;    except Exception as e:&#10;        return jsonify({&quot;error&quot;: f&quot;Erreur lors du chargement des équipes dans vMix: {str(e)}&quot;}), 500&#10;&#10;@vmix_bp.route('/toggle-audio', methods=['POST'])&#10;def toggle_audio():&#10;    &quot;&quot;&quot;Active ou désactive l'audio d'une entrée spécifique&quot;&quot;&quot;&#10;    data = request.json&#10;&#10;    if not data or 'inputId' not in data:&#10;        return jsonify({&quot;error&quot;: &quot;L'ID de l'input est requis&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;&#10;    input_id = data['inputId']&#10;    mute_state = data.get('mute')  # True pour mute, False pour unmute, None pour toggle&#10;&#10;    success = vmix_manager.toggle_audio(input_id, mute_state)&#10;&#10;    if success:&#10;        action = &quot;modifié&quot;&#10;        if mute_state is not None:&#10;            action = &quot;coupé&quot; if mute_state else &quot;activé&quot;&#10;&#10;        return jsonify({&#10;            &quot;message&quot;: f&quot;Audio de l'input {input_id} {action} avec succès&quot;,&#10;            &quot;status&quot;: &quot;success&quot;&#10;        })&#10;    else:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la modification de l'audio pour l'input {input_id}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/audio/volume', methods=['POST'])&#10;def adjust_audio_volume():&#10;    &quot;&quot;&quot;Ajuste le volume d'une entrée audio&quot;&quot;&quot;&#10;    data = request.json&#10;&#10;    if not data or 'inputId' not in data or 'volume' not in data:&#10;        return jsonify({&#10;            &quot;error&quot;: &quot;L'ID de l'input et le volume sont requis&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 400&#10;&#10;    input_id = data['inputId']&#10;    volume = data['volume']&#10;&#10;    # Vérifier que le volume est un nombre entre 0 et 100&#10;    try:&#10;        volume = float(volume)&#10;        if volume &lt; 0 or volume &gt; 100:&#10;            raise ValueError(&quot;Le volume doit être entre 0 et 100&quot;)&#10;    except ValueError as e:&#10;        return jsonify({&#10;            &quot;error&quot;: str(e),&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 400&#10;&#10;    success = vmix_manager.adjust_audio_volume(input_id, volume)&#10;&#10;    if success:&#10;        return jsonify({&#10;            &quot;message&quot;: f&quot;Volume de l'input {input_id} ajusté à {volume}%&quot;,&#10;            &quot;status&quot;: &quot;success&quot;&#10;        })&#10;    else:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de l'ajustement du volume pour l'input {input_id}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;@vmix_bp.route('/audio/status', methods=['GET'])&#10;def get_audio_status():&#10;    &quot;&quot;&quot;Récupère le statut audio des entrées vMix&quot;&quot;&quot;&#10;    input_id = request.args.get('inputId')  # Optionnel, pour filtrer un seul input&#10;&#10;    audio_status = vmix_manager.get_audio_status(input_id)&#10;&#10;    if audio_status is None:&#10;        return jsonify({&#10;            &quot;error&quot;: &quot;Erreur lors de la récupération du statut audio&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500&#10;&#10;    return jsonify({&#10;        &quot;audioStatus&quot;: audio_status,&#10;        &quot;status&quot;: &quot;success&quot;&#10;    })&#10;&#10;@vmix_bp.route('/update-score', methods=['POST'])&#10;def update_score():&#10;    &quot;&quot;&quot;&#10;    Met à jour le score et les noms des équipes dans vMix&#10;    &#10;    Attend un JSON avec le format suivant:&#10;    {&#10;        &quot;teamA&quot;: {&#10;            &quot;name&quot;: &quot;Nom Équipe A&quot;,&#10;            &quot;score&quot;: 10,&#10;            &quot;sets&quot;: 2&#10;        },&#10;        &quot;teamB&quot;: {&#10;            &quot;name&quot;: &quot;Nom Équipe B&quot;,&#10;            &quot;score&quot;: 8,&#10;            &quot;sets&quot;: 1&#10;        },&#10;        &quot;titleInput&quot;: &quot;scoreboard&quot;  // Optionnel, nom du titre vMix à mettre à jour&#10;    }&#10;    &quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        if not data:&#10;            return jsonify({&quot;error&quot;: &quot;Aucune donnée fournie&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Vérifier que les données nécessaires sont présentes&#10;        if 'teamA' not in data or 'teamB' not in data:&#10;            return jsonify({&quot;error&quot;: &quot;Les données des équipes sont requises&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Extraire les données&#10;        team_a = data['teamA']&#10;        team_b = data['teamB']&#10;        title_input = data.get('titleInput', 'scoreboard')&#10;        &#10;        # Vérifier que les données minimales sont présentes pour chaque équipe&#10;        if 'name' not in team_a or 'score' not in team_a or 'sets' not in team_a:&#10;            return jsonify({&quot;error&quot;: &quot;Données incomplètes pour l'équipe A&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        if 'name' not in team_b or 'score' not in team_b or 'sets' not in team_b:&#10;            return jsonify({&quot;error&quot;: &quot;Données incomplètes pour l'équipe B&quot;, &quot;status&quot;: &quot;error&quot;}), 400&#10;            &#10;        # Mettre à jour le scoreboard dans vMix&#10;        success = vmix_manager.update_scoreboard(&#10;            team_a['name'], &#10;            team_b['name'], &#10;            team_a['score'], &#10;            team_b['score'], &#10;            team_a['sets'], &#10;            team_b['sets'],&#10;            title_input&#10;        )&#10;        &#10;        if success:&#10;            return jsonify({&#10;                &quot;message&quot;: &quot;Score mis à jour avec succès&quot;,&#10;                &quot;status&quot;: &quot;success&quot;&#10;            })&#10;        else:&#10;            return jsonify({&#10;                &quot;error&quot;: &quot;Erreur lors de la mise à jour du score&quot;,&#10;                &quot;status&quot;: &quot;error&quot;&#10;            }), 500&#10;            &#10;    except Exception as e:&#10;        return jsonify({&#10;            &quot;error&quot;: f&quot;Erreur lors de la mise à jour du score: {str(e)}&quot;,&#10;            &quot;status&quot;: &quot;error&quot;&#10;        }), 500" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/input_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/input_manager.py" />
              <option name="updatedContent" value="#fonctionnalités à implémenter :&#10;# -gestion des inputs vMix, -ajout/suppression d'inputs, -transitions entre inputs&#10;# -contrôle des propriétés des inputs (audio, couleur, etc.)&#10;&#10;import os&#10;import logging&#10;from v3_0.app.core.vmix_manager import Vmix_manager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('input_manager')&#10;&#10;class InputManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire pour les inputs vMix (sources vidéo, audio, titres, etc.)&#10;    &quot;&quot;&quot;&#10;    &#10;    def __init__(self, vmix_manager=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire d'inputs&#10;        &#10;        Args:&#10;            vmix_manager: Instance de Vmix_manager à utiliser&#10;        &quot;&quot;&quot;&#10;        # Utiliser l'instance vmix_manager fournie ou en créer une nouvelle&#10;        self.vmix = vmix_manager if vmix_manager else Vmix_manager()&#10;        &#10;        # Dictionnaire pour stocker les inputs par catégorie&#10;        self.categorized_inputs = {&#10;            'camera': [],      # Entrées de type caméra&#10;            'video': [],       # Fichiers vidéo&#10;            'audio': [],       # Sources audio&#10;            'title': [],       # Titres et overlays&#10;            'image': [],       # Images statiques&#10;            'replay': [],      # Entrées de replay&#10;            'stream': [],      # Flux de streaming (RTMP, SRT, etc.)&#10;            'other': []        # Autres types d'entrées&#10;        }&#10;        &#10;        # Rafraîchir la liste des inputs au démarrage&#10;        self.refresh_inputs()&#10;        &#10;    def refresh_inputs(self):&#10;        &quot;&quot;&quot;&#10;        Rafraîchit la liste des inputs depuis vMix et les catégorise&#10;        &#10;        Returns:&#10;            dict: Dictionnaire des inputs catégorisés&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vider les listes existantes&#10;            for category in self.categorized_inputs:&#10;                self.categorized_inputs[category] = []&#10;                &#10;            # Récupérer tous les inputs&#10;            all_inputs = self.vmix.get_inputs()&#10;            &#10;            # Catégoriser chaque input&#10;            for input_item in all_inputs:&#10;                input_type = input_item.get('type', '').lower()&#10;                &#10;                # Déterminer la catégorie en fonction du type&#10;                if 'camera' in input_type or 'cam' in input_type:&#10;                    self.categorized_inputs['camera'].append(input_item)&#10;                elif 'video' in input_type or 'movie' in input_type:&#10;                    self.categorized_inputs['video'].append(input_item)&#10;                elif 'audio' in input_type or 'sound' in input_type:&#10;                    self.categorized_inputs['audio'].append(input_item)&#10;                elif 'title' in input_type or 'gt' in input_type:&#10;                    self.categorized_inputs['title'].append(input_item)&#10;                elif 'image' in input_type or 'photo' in input_type or 'pic' in input_type:&#10;                    self.categorized_inputs['image'].append(input_item)&#10;                elif 'replay' in input_type:&#10;                    self.categorized_inputs['replay'].append(input_item)&#10;                elif 'stream' in input_type or 'rtmp' in input_type or 'srt' in input_type:&#10;                    self.categorized_inputs['stream'].append(input_item)&#10;                else:&#10;                    self.categorized_inputs['other'].append(input_item)&#10;                    &#10;            # Loguer le nombre d'inputs trouvés par catégorie&#10;            for category, inputs in self.categorized_inputs.items():&#10;                if inputs:&#10;                    logger.info(f&quot;Catégorie '{category}': {len(inputs)} entrées trouvées&quot;)&#10;                    &#10;            return self.categorized_inputs&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du rafraîchissement des inputs: {e}&quot;)&#10;            return self.categorized_inputs&#10;            &#10;    def get_inputs_by_category(self, category):&#10;        &quot;&quot;&quot;&#10;        Récupère les inputs d'une catégorie spécifique&#10;        &#10;        Args:&#10;            category (str): Nom de la catégorie ('camera', 'video', etc.)&#10;            &#10;        Returns:&#10;            list: Liste des inputs de cette catégorie&#10;        &quot;&quot;&quot;&#10;        if category in self.categorized_inputs:&#10;            return self.categorized_inputs[category]&#10;        else:&#10;            logger.warning(f&quot;Catégorie '{category}' non reconnue&quot;)&#10;            return []&#10;            &#10;    def get_input_by_id(self, input_id):&#10;        &quot;&quot;&quot;&#10;        Récupère un input par son ID&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input&#10;            &#10;        Returns:&#10;            dict: Données de l'input ou None si non trouvé&#10;        &quot;&quot;&quot;&#10;        for category, inputs in self.categorized_inputs.items():&#10;            for input_item in inputs:&#10;                if input_item.get('id') == str(input_id):&#10;                    return input_item&#10;        return None&#10;        &#10;    def get_input_by_name(self, name, partial_match=True):&#10;        &quot;&quot;&quot;&#10;        Récupère un input par son nom&#10;        &#10;        Args:&#10;            name (str): Nom de l'input&#10;            partial_match (bool): Si True, recherche partielle dans le nom&#10;            &#10;        Returns:&#10;            dict: Données de l'input ou None si non trouvé&#10;        &quot;&quot;&quot;&#10;        for category, inputs in self.categorized_inputs.items():&#10;            for input_item in inputs:&#10;                input_name = input_item.get('name', '').lower()&#10;                search_name = name.lower()&#10;                &#10;                if (partial_match and search_name in input_name) or (not partial_match and search_name == input_name):&#10;                    return input_item&#10;        return None&#10;        &#10;    def switch_input(self, input_id):&#10;        &quot;&quot;&quot;&#10;        Change l'entrée active dans vMix (coupe direct)&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input à activer&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.send_command(&quot;CutDirect&quot;, Input=input_id)&#10;            if result:&#10;                logger.info(f&quot;Changement réussi vers l'input {input_id}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec du changement vers l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du changement d'input: {e}&quot;)&#10;            return False&#10;            &#10;    def transition_to_input(self, input_id, transition_type=&quot;Fade&quot;, duration=500):&#10;        &quot;&quot;&quot;&#10;        Effectue une transition vers un input spécifié&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input à activer&#10;            transition_type (str): Type de transition ('Fade', 'Wipe', 'Slide', etc.)&#10;            duration (int): Durée de la transition en millisecondes&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.send_command(f&quot;{transition_type}&quot;, Input=input_id, Duration=duration)&#10;            if result:&#10;                logger.info(f&quot;Transition {transition_type} réussie vers l'input {input_id} en {duration}ms&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la transition vers l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la transition: {e}&quot;)&#10;            return False&#10;            &#10;    def add_input(self, input_type, path_or_url, title=None):&#10;        &quot;&quot;&quot;&#10;        Ajoute un nouvel input à vMix&#10;        &#10;        Args:&#10;            input_type (str): Type d'input ('Video', 'Camera', 'Image', etc.)&#10;            path_or_url (str): Chemin du fichier ou URL&#10;            title (str, optional): Nom à donner à l'input&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Si aucun titre n'est spécifié, utiliser un titre générique&#10;            if not title:&#10;                # Extraire un nom de fichier du chemin si possible&#10;                if os.path.exists(path_or_url):&#10;                    title = os.path.basename(path_or_url)&#10;                else:&#10;                    title = f&quot;Nouvel input {input_type}&quot;&#10;                    &#10;            result = self.vmix.send_command(&quot;AddInput&quot;, Type=input_type, Value=path_or_url, Title=title)&#10;            if result:&#10;                logger.info(f&quot;Ajout réussi d'un input {input_type}: {title}&quot;)&#10;                # Rafraîchir la liste des inputs&#10;                self.refresh_inputs()&#10;            else:&#10;                logger.error(f&quot;Échec de l'ajout d'un input {input_type}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'ajout d'un input: {e}&quot;)&#10;            return False&#10;            &#10;    def remove_input(self, input_id):&#10;        &quot;&quot;&quot;&#10;        Supprime un input de vMix&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input à supprimer&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.send_command(&quot;RemoveInput&quot;, Input=input_id)&#10;            if result:&#10;                logger.info(f&quot;Suppression réussie de l'input {input_id}&quot;)&#10;                # Rafraîchir la liste des inputs&#10;                self.refresh_inputs()&#10;            else:&#10;                logger.error(f&quot;Échec de la suppression de l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la suppression d'un input: {e}&quot;)&#10;            return False&#10;            &#10;    def toggle_audio(self, input_id, mute=None):&#10;        &quot;&quot;&quot;&#10;        Active ou désactive l'audio d'un input&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input&#10;            mute (bool, optional): Si True, coupe l'audio. Si False, active l'audio.&#10;                                   Si None, inverse l'état actuel.&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if mute is None:&#10;                # Toggle (inverser l'état actuel)&#10;                result = self.vmix.send_command(&quot;AudioToggle&quot;, Input=input_id)&#10;                action = &quot;basculé&quot;&#10;            elif mute:&#10;                # Couper l'audio&#10;                result = self.vmix.send_command(&quot;AudioOff&quot;, Input=input_id)&#10;                action = &quot;coupé&quot;&#10;            else:&#10;                # Activer l'audio&#10;                result = self.vmix.send_command(&quot;AudioOn&quot;, Input=input_id)&#10;                action = &quot;activé&quot;&#10;                &#10;            if result:&#10;                logger.info(f&quot;Audio {action} pour l'input {input_id}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de l'action audio pour l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'action audio: {e}&quot;)&#10;            return False&#10;            &#10;    def set_audio_volume(self, input_id, volume):&#10;        &quot;&quot;&quot;&#10;        Définit le volume audio d'un input&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input&#10;            volume (int): Niveau de volume (0-100)&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # S'assurer que le volume est dans la plage valide&#10;            volume = max(0, min(100, volume))&#10;            &#10;            result = self.vmix.send_command(&quot;SetVolume&quot;, Input=input_id, Value=volume)&#10;            if result:&#10;                logger.info(f&quot;Volume défini à {volume}% pour l'input {input_id}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la définition du volume pour l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la définition du volume: {e}&quot;)&#10;            return False&#10;            &#10;    def set_input_position(self, input_id, x=0, y=0, width=None, height=None):&#10;        &quot;&quot;&quot;&#10;        Définit la position et la taille d'un input&#10;        &#10;        Args:&#10;            input_id (str): ID de l'input&#10;            x (int): Position X&#10;            y (int): Position Y&#10;            width (int, optional): Largeur&#10;            height (int, optional): Hauteur&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Définir la position&#10;            position_result = self.vmix.send_command(&quot;SetPosition&quot;, Input=input_id, X=x, Y=y)&#10;            &#10;            # Définir la taille si spécifiée&#10;            size_result = True&#10;            if width is not None and height is not None:&#10;                size_result = self.vmix.send_command(&quot;SetSize&quot;, Input=input_id, Width=width, Height=height)&#10;                &#10;            result = position_result and size_result&#10;            if result:&#10;                logger.info(f&quot;Position/taille mise à jour pour l'input {input_id}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la mise à jour de la position/taille pour l'input {input_id}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour de la position/taille: {e}&quot;)&#10;            return False&#10;            &#10;    def get_active_input(self):&#10;        &quot;&quot;&quot;&#10;        Récupère l'input actuellement actif dans vMix&#10;        &#10;        Returns:&#10;            dict: Données de l'input actif ou None si non trouvé&#10;        &quot;&quot;&quot;&#10;        try:&#10;            active_id = self.vmix.get_active_input()&#10;            if active_id:&#10;                return self.get_input_by_id(active_id)&#10;            return None&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération de l'input actif: {e}&quot;)&#10;            return None&#10;            &#10;    def list_cameras(self):&#10;        &quot;&quot;&quot;&#10;        Liste toutes les caméras disponibles&#10;        &#10;        Returns:&#10;            list: Liste des inputs de type caméra&#10;        &quot;&quot;&quot;&#10;        return self.get_inputs_by_category('camera')&#10;        &#10;    def list_videos(self):&#10;        &quot;&quot;&quot;&#10;        Liste tous les fichiers vidéo disponibles&#10;        &#10;        Returns:&#10;            list: Liste des inputs de type vidéo&#10;        &quot;&quot;&quot;&#10;        return self.get_inputs_by_category('video')&#10;        &#10;    def list_titles(self):&#10;        &quot;&quot;&quot;&#10;        Liste tous les titres disponibles&#10;        &#10;        Returns:&#10;            list: Liste des inputs de type titre&#10;        &quot;&quot;&quot;&#10;        return self.get_inputs_by_category('title')&#10;        &#10;    def list_all_inputs(self):&#10;        &quot;&quot;&quot;&#10;        Liste tous les inputs disponibles, toutes catégories confondues&#10;        &#10;        Returns:&#10;            list: Liste de tous les inputs&#10;        &quot;&quot;&quot;&#10;        all_inputs = []&#10;        for category, inputs in self.categorized_inputs.items():&#10;            all_inputs.extend(inputs)&#10;        return all_inputs&#10;        &#10;    def set_overlay(self, overlay_number, input_id, enable=True):&#10;        &quot;&quot;&quot;&#10;        Configure un overlay dans vMix&#10;        &#10;        Args:&#10;            overlay_number (int): Numéro de l'overlay (1-4)&#10;            input_id (str): ID de l'input à utiliser comme overlay&#10;            enable (bool): Si True, active l'overlay, sinon le désactive&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if enable:&#10;                # Définir l'input à utiliser pour cet overlay&#10;                self.vmix.send_command(f&quot;SetOverlayInput{overlay_number}&quot;, Value=input_id)&#10;                # Activer l'overlay&#10;                result = self.vmix.send_command(f&quot;OverlayInput{overlay_number}In&quot;)&#10;            else:&#10;                # Désactiver l'overlay&#10;                result = self.vmix.send_command(f&quot;OverlayInput{overlay_number}Out&quot;)&#10;                &#10;            if result:&#10;                action = &quot;activé&quot; if enable else &quot;désactivé&quot;&#10;                logger.info(f&quot;Overlay {overlay_number} {action} avec l'input {input_id}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la configuration de l'overlay {overlay_number}&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la configuration de l'overlay: {e}&quot;)&#10;            return False" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/overlay_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/overlay_manager.py" />
              <option name="updatedContent" value="#fonctionnalités à implémenter :&#10;# -gestion des overlays vMix (titres), -contrôle d'affichage des overlays&#10;# -mise à jour du contenu des overlays (scores, équipes, joueurs, etc.)&#10;&#10;import os&#10;import logging&#10;import json&#10;from v3_0.app.core.vmix_manager import Vmix_manager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('overlay_manager')&#10;&#10;class OverlayManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire pour les overlays vMix (titres, scores, équipes, etc.)&#10;    &quot;&quot;&quot;&#10;    &#10;    def __init__(self, vmix_manager=None, data_dir=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire d'overlays&#10;        &#10;        Args:&#10;            vmix_manager: Instance de Vmix_manager à utiliser&#10;            data_dir: Répertoire où stocker les configurations d'overlays&#10;        &quot;&quot;&quot;&#10;        # Si aucun répertoire n'est spécifié, utiliser le répertoire courant&#10;        if data_dir is None:&#10;            self.data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), &quot;data&quot;)&#10;        else:&#10;            self.data_dir = data_dir&#10;            &#10;        # Créer le répertoire s'il n'existe pas&#10;        if not os.path.exists(self.data_dir):&#10;            os.makedirs(self.data_dir)&#10;            &#10;        # Fichier JSON pour stocker les configurations d'overlays&#10;        self.overlay_config_file = os.path.join(self.data_dir, &quot;overlay_config.json&quot;)&#10;        &#10;        # Utiliser l'instance vmix_manager fournie ou en créer une nouvelle&#10;        self.vmix = vmix_manager if vmix_manager else Vmix_manager()&#10;        &#10;        # Dictionnaire pour stocker les références aux overlays détectés&#10;        self.overlay_inputs = {}&#10;        &#10;        # Charger la configuration des overlays&#10;        self.config = self.load_config()&#10;        &#10;        # Détecter les overlays disponibles dans vMix&#10;        self.detect_overlays()&#10;        &#10;    def load_config(self):&#10;        &quot;&quot;&quot;&#10;        Charge la configuration des overlays depuis le fichier JSON&#10;        &#10;        Returns:&#10;            dict: Configuration des overlays&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if os.path.exists(self.overlay_config_file):&#10;                with open(self.overlay_config_file, 'r', encoding='utf-8') as f:&#10;                    return json.load(f)&#10;            else:&#10;                # Configuration par défaut si le fichier n'existe pas&#10;                default_config = {&#10;                    &quot;overlays&quot;: {&#10;                        &quot;score&quot;: {&#10;                            &quot;name&quot;: &quot;Score&quot;,&#10;                            &quot;overlay_number&quot;: 1,&#10;                            &quot;fields&quot;: {&#10;                                &quot;HomeScore&quot;: &quot;0&quot;,&#10;                                &quot;AwayScore&quot;: &quot;0&quot;,&#10;                                &quot;HomeName&quot;: &quot;Équipe A&quot;,&#10;                                &quot;AwayName&quot;: &quot;Équipe B&quot;,&#10;                                &quot;SetScores&quot;: &quot;0-0&quot;,&#10;                                &quot;Period&quot;: &quot;Set 1&quot;&#10;                            }&#10;                        },&#10;                        &quot;team_roster&quot;: {&#10;                            &quot;name&quot;: &quot;Roster d'équipe&quot;,&#10;                            &quot;overlay_number&quot;: 2,&#10;                            &quot;fields&quot;: {&#10;                                &quot;TeamName&quot;: &quot;Nom de l'équipe&quot;,&#10;                                &quot;Player1Name&quot;: &quot;&quot;,&#10;                                &quot;Player1Number&quot;: &quot;&quot;,&#10;                                &quot;Player1Position&quot;: &quot;&quot;&#10;                                # ... autres joueurs&#10;                            }&#10;                        },&#10;                        &quot;player_detail&quot;: {&#10;                            &quot;name&quot;: &quot;Détail joueur&quot;,&#10;                            &quot;overlay_number&quot;: 3,&#10;                            &quot;fields&quot;: {&#10;                                &quot;PlayerName&quot;: &quot;&quot;,&#10;                                &quot;PlayerNumber&quot;: &quot;&quot;,&#10;                                &quot;PlayerPosition&quot;: &quot;&quot;,&#10;                                &quot;PlayerHeight&quot;: &quot;&quot;,&#10;                                &quot;PlayerAge&quot;: &quot;&quot;,&#10;                                &quot;TeamName&quot;: &quot;&quot;&#10;                            }&#10;                        },&#10;                        &quot;sponsor&quot;: {&#10;                            &quot;name&quot;: &quot;Sponsor&quot;,&#10;                            &quot;overlay_number&quot;: 4,&#10;                            &quot;fields&quot;: {&#10;                                &quot;SponsorName&quot;: &quot;&quot;,&#10;                                &quot;SponsorLogo&quot;: &quot;&quot;&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config(default_config)&#10;                return default_config&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration des overlays: {e}&quot;)&#10;            return {&quot;overlays&quot;: {}}&#10;            &#10;    def save_config(self, config=None):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde la configuration des overlays dans le fichier JSON&#10;        &#10;        Args:&#10;            config (dict, optional): Configuration à sauvegarder. Si None, utilise self.config.&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.overlay_config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration des overlays sauvegardée dans {self.overlay_config_file}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration des overlays: {e}&quot;)&#10;            return False&#10;            &#10;    def detect_overlays(self):&#10;        &quot;&quot;&quot;&#10;        Détecte les overlays disponibles dans vMix et met à jour self.overlay_inputs&#10;        &#10;        Returns:&#10;            dict: Dictionnaire des overlays détectés&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vider le dictionnaire existant&#10;            self.overlay_inputs = {}&#10;            &#10;            # Récupérer tous les inputs&#10;            all_inputs = self.vmix.get_inputs()&#10;            &#10;            # Catégoriser les overlays en fonction de leur nom&#10;            # Ces motifs de recherche sont basés sur les noms typiques dans vMix&#10;            overlay_patterns = {&#10;                &quot;score&quot;: [&quot;score&quot;, &quot;scoreboard&quot;, &quot;points&quot;, &quot;résultat&quot;],&#10;                &quot;team_roster&quot;: [&quot;roster&quot;, &quot;équipe&quot;, &quot;team&quot;, &quot;lineup&quot;, &quot;players&quot;],&#10;                &quot;player_detail&quot;: [&quot;player&quot;, &quot;joueur&quot;, &quot;détail&quot;, &quot;detail&quot;, &quot;stats&quot;],&#10;                &quot;timeout&quot;: [&quot;timeout&quot;, &quot;temps mort&quot;],&#10;                &quot;sponsor&quot;: [&quot;sponsor&quot;, &quot;partenaire&quot;, &quot;pub&quot;, &quot;ad&quot;],&#10;                &quot;logo&quot;: [&quot;logo&quot;, &quot;emblem&quot;],&#10;                &quot;lower_third&quot;: [&quot;lower third&quot;, &quot;tiers inférieur&quot;, &quot;nom&quot;, &quot;name tag&quot;],&#10;                &quot;match_info&quot;: [&quot;match&quot;, &quot;game&quot;, &quot;info&quot;, &quot;information&quot;]&#10;            }&#10;            &#10;            # Rechercher les overlays correspondant aux motifs&#10;            for input_item in all_inputs:&#10;                input_name = input_item.get('name', '').lower()&#10;                input_id = input_item.get('id')&#10;                input_type = input_item.get('type', '').lower()&#10;                &#10;                # Ne considérer que les inputs de type titre/GT&#10;                if 'title' in input_type or 'gt' in input_type:&#10;                    # Chercher à quelle catégorie correspond cet overlay&#10;                    for overlay_type, patterns in overlay_patterns.items():&#10;                        for pattern in patterns:&#10;                            if pattern in input_name:&#10;                                self.overlay_inputs[overlay_type] = input_id&#10;                                logger.info(f&quot;Overlay de type '{overlay_type}' détecté: {input_name} (ID: {input_id})&quot;)&#10;                                break&#10;            &#10;            # Mettre à jour la configuration avec les overlays détectés&#10;            for overlay_type, input_id in self.overlay_inputs.items():&#10;                if overlay_type in self.config.get(&quot;overlays&quot;, {}):&#10;                    # Mettre à jour l'ID de l'input dans la configuration&#10;                    self.config[&quot;overlays&quot;][overlay_type][&quot;input_id&quot;] = input_id&#10;            &#10;            # Sauvegarder la configuration mise à jour&#10;            self.save_config()&#10;            &#10;            return self.overlay_inputs&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la détection des overlays: {e}&quot;)&#10;            return {}&#10;            &#10;    def show_overlay(self, overlay_type, enable=True):&#10;        &quot;&quot;&quot;&#10;        Affiche ou masque un overlay spécifique&#10;        &#10;        Args:&#10;            overlay_type (str): Type d'overlay ('score', 'team_roster', etc.)&#10;            enable (bool): True pour afficher, False pour masquer&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si l'overlay est configuré&#10;            if overlay_type not in self.config.get(&quot;overlays&quot;, {}):&#10;                logger.error(f&quot;Overlay de type '{overlay_type}' non configuré&quot;)&#10;                return False&#10;                &#10;            # Récupérer les informations de l'overlay&#10;            overlay_config = self.config[&quot;overlays&quot;][overlay_type]&#10;            overlay_number = overlay_config.get(&quot;overlay_number&quot;, 0)&#10;            &#10;            # Vérifier si l'overlay a un ID&#10;            if &quot;input_id&quot; not in overlay_config and overlay_type not in self.overlay_inputs:&#10;                logger.error(f&quot;Overlay de type '{overlay_type}' non détecté dans vMix&quot;)&#10;                return False&#10;                &#10;            # Récupérer l'ID de l'input&#10;            input_id = overlay_config.get(&quot;input_id&quot;, self.overlay_inputs.get(overlay_type))&#10;            &#10;            # Activer ou désactiver l'overlay&#10;            if enable:&#10;                # S'assurer que l'overlay est configuré pour l'entrée correcte&#10;                self.vmix.send_command(f&quot;SetOverlayInput{overlay_number}&quot;, Value=input_id)&#10;                # Activer l'overlay&#10;                result = self.vmix.send_command(f&quot;OverlayInput{overlay_number}In&quot;)&#10;                action = &quot;affiché&quot;&#10;            else:&#10;                # Désactiver l'overlay&#10;                result = self.vmix.send_command(f&quot;OverlayInput{overlay_number}Out&quot;)&#10;                action = &quot;masqué&quot;&#10;                &#10;            if result:&#10;                logger.info(f&quot;Overlay '{overlay_type}' {action} avec succès&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de l'action sur l'overlay '{overlay_type}'&quot;)&#10;                &#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'affichage/masquage de l'overlay: {e}&quot;)&#10;            return False&#10;            &#10;    def toggle_overlay(self, overlay_type):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état d'un overlay (affiche s'il est masqué, masque s'il est affiché)&#10;        &#10;        Args:&#10;            overlay_type (str): Type d'overlay ('score', 'team_roster', etc.)&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si l'overlay est configuré&#10;            if overlay_type not in self.config.get(&quot;overlays&quot;, {}):&#10;                logger.error(f&quot;Overlay de type '{overlay_type}' non configuré&quot;)&#10;                return False&#10;                &#10;            # Récupérer les informations de l'overlay&#10;            overlay_config = self.config[&quot;overlays&quot;][overlay_type]&#10;            overlay_number = overlay_config.get(&quot;overlay_number&quot;, 0)&#10;            &#10;            # Basculer l'état de l'overlay&#10;            result = self.vmix.send_command(f&quot;OverlayInput{overlay_number}&quot;)&#10;            &#10;            if result:&#10;                logger.info(f&quot;État de l'overlay '{overlay_type}' basculé avec succès&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec du basculement de l'état de l'overlay '{overlay_type}'&quot;)&#10;                &#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du basculement de l'état de l'overlay: {e}&quot;)&#10;            return False&#10;            &#10;    def update_overlay_fields(self, overlay_type, fields):&#10;        &quot;&quot;&quot;&#10;        Met à jour les champs d'un overlay&#10;        &#10;        Args:&#10;            overlay_type (str): Type d'overlay ('score', 'team_roster', etc.)&#10;            fields (dict): Dictionnaire des champs à mettre à jour {nom_champ: valeur}&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si l'overlay est configuré&#10;            if overlay_type not in self.config.get(&quot;overlays&quot;, {}):&#10;                logger.error(f&quot;Overlay de type '{overlay_type}' non configuré&quot;)&#10;                return False&#10;                &#10;            # Récupérer les informations de l'overlay&#10;            overlay_config = self.config[&quot;overlays&quot;][overlay_type]&#10;            &#10;            # Vérifier si l'overlay a un ID&#10;            if &quot;input_id&quot; not in overlay_config and overlay_type not in self.overlay_inputs:&#10;                logger.error(f&quot;Overlay de type '{overlay_type}' non détecté dans vMix&quot;)&#10;                return False&#10;                &#10;            # Récupérer l'ID de l'input&#10;            input_id = overlay_config.get(&quot;input_id&quot;, self.overlay_inputs.get(overlay_type))&#10;            &#10;            # Mettre à jour les champs dans vMix&#10;            result = self.vmix.update_title_multiple(input_id, fields)&#10;            &#10;            if result:&#10;                # Mettre à jour les champs dans la configuration&#10;                if &quot;fields&quot; not in overlay_config:&#10;                    overlay_config[&quot;fields&quot;] = {}&#10;                for field_name, value in fields.items():&#10;                    overlay_config[&quot;fields&quot;][field_name] = value&#10;                    &#10;                # Sauvegarder la configuration mise à jour&#10;                self.save_config()&#10;                &#10;                logger.info(f&quot;Champs de l'overlay '{overlay_type}' mis à jour avec succès&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la mise à jour des champs de l'overlay '{overlay_type}'&quot;)&#10;                &#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des champs de l'overlay: {e}&quot;)&#10;            return False&#10;            &#10;    def update_score(self, home_score, away_score, home_name=None, away_name=None, set_scores=None, period=None):&#10;        &quot;&quot;&quot;&#10;        Met à jour l'overlay de score&#10;        &#10;        Args:&#10;            home_score (str): Score de l'équipe à domicile&#10;            away_score (str): Score de l'équipe visiteuse&#10;            home_name (str, optional): Nom de l'équipe à domicile&#10;            away_name (str, optional): Nom de l'équipe visiteuse&#10;            set_scores (str, optional): Score des sets (ex: &quot;2-1&quot;)&#10;            period (str, optional): Période actuelle (ex: &quot;Set 3&quot;)&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Préparer les champs à mettre à jour&#10;            fields = {&#10;                &quot;HomeScore&quot;: str(home_score),&#10;                &quot;AwayScore&quot;: str(away_score)&#10;            }&#10;            &#10;            # Ajouter les champs optionnels s'ils sont fournis&#10;            if home_name is not None:&#10;                fields[&quot;HomeName&quot;] = home_name&#10;            if away_name is not None:&#10;                fields[&quot;AwayName&quot;] = away_name&#10;            if set_scores is not None:&#10;                fields[&quot;SetScores&quot;] = set_scores&#10;            if period is not None:&#10;                fields[&quot;Period&quot;] = period&#10;                &#10;            # Mettre à jour l'overlay de score&#10;            return self.update_overlay_fields(&quot;score&quot;, fields)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du score: {e}&quot;)&#10;            return False&#10;            &#10;    def update_team_roster(self, team_name, players):&#10;        &quot;&quot;&quot;&#10;        Met à jour l'overlay de roster d'équipe&#10;        &#10;        Args:&#10;            team_name (str): Nom de l'équipe&#10;            players (list): Liste des joueurs [{&quot;name&quot;: &quot;...&quot;, &quot;number&quot;: &quot;...&quot;, &quot;position&quot;: &quot;...&quot;}, ...]&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Préparer les champs à mettre à jour&#10;            fields = {&#10;                &quot;TeamName&quot;: team_name&#10;            }&#10;            &#10;            # Ajouter les joueurs (jusqu'à 14 joueurs maximum)&#10;            for i, player in enumerate(players[:14], 1):&#10;                fields[f&quot;Player{i}Name&quot;] = player.get(&quot;name&quot;, &quot;&quot;)&#10;                fields[f&quot;Player{i}Number&quot;] = player.get(&quot;number&quot;, &quot;&quot;)&#10;                fields[f&quot;Player{i}Position&quot;] = player.get(&quot;position&quot;, &quot;&quot;)&#10;                &#10;            # Mettre à jour l'overlay de roster&#10;            return self.update_overlay_fields(&quot;team_roster&quot;, fields)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du roster d'équipe: {e}&quot;)&#10;            return False&#10;            &#10;    def update_player_detail(self, player, team_name=None):&#10;        &quot;&quot;&quot;&#10;        Met à jour l'overlay de détail de joueur&#10;        &#10;        Args:&#10;            player (dict): Données du joueur {&quot;name&quot;: &quot;...&quot;, &quot;number&quot;: &quot;...&quot;, &quot;position&quot;: &quot;...&quot;, ...}&#10;            team_name (str, optional): Nom de l'équipe&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Préparer les champs à mettre à jour&#10;            fields = {&#10;                &quot;PlayerName&quot;: player.get(&quot;name&quot;, &quot;&quot;),&#10;                &quot;PlayerNumber&quot;: player.get(&quot;number&quot;, &quot;&quot;),&#10;                &quot;PlayerPosition&quot;: player.get(&quot;position&quot;, &quot;&quot;),&#10;                &quot;PlayerHeight&quot;: player.get(&quot;height&quot;, &quot;&quot;),&#10;                &quot;PlayerAge&quot;: player.get(&quot;age&quot;, &quot;&quot;)&#10;            }&#10;            &#10;            # Ajouter le nom de l'équipe s'il est fourni&#10;            if team_name is not None:&#10;                fields[&quot;TeamName&quot;] = team_name&#10;                &#10;            # Mettre à jour l'overlay de détail de joueur&#10;            return self.update_overlay_fields(&quot;player_detail&quot;, fields)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du détail de joueur: {e}&quot;)&#10;            return False&#10;            &#10;    def update_sponsor(self, sponsor_name, logo_path=None):&#10;        &quot;&quot;&quot;&#10;        Met à jour l'overlay de sponsor&#10;        &#10;        Args:&#10;            sponsor_name (str): Nom du sponsor&#10;            logo_path (str, optional): Chemin vers le logo du sponsor&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Préparer les champs à mettre à jour&#10;            fields = {&#10;                &quot;SponsorName&quot;: sponsor_name&#10;            }&#10;            &#10;            # Mettre à jour l'overlay de sponsor&#10;            result = self.update_overlay_fields(&quot;sponsor&quot;, fields)&#10;            &#10;            # Mettre à jour le logo si un chemin est fourni&#10;            if logo_path is not None and result:&#10;                # Vérifier si l'overlay a un ID&#10;                if &quot;sponsor&quot; in self.overlay_inputs:&#10;                    input_id = self.overlay_inputs[&quot;sponsor&quot;]&#10;                    result = self.vmix.set_image(input_id, &quot;SponsorLogo&quot;, logo_path)&#10;                    &#10;                    if result:&#10;                        # Mettre à jour le chemin du logo dans la configuration&#10;                        self.config[&quot;overlays&quot;][&quot;sponsor&quot;][&quot;fields&quot;][&quot;SponsorLogo&quot;] = logo_path&#10;                        self.save_config()&#10;                        &#10;                        logger.info(f&quot;Logo du sponsor mis à jour avec succès: {logo_path}&quot;)&#10;                    else:&#10;                        logger.error(f&quot;Échec de la mise à jour du logo du sponsor&quot;)&#10;                else:&#10;                    logger.error(&quot;Overlay de sponsor non détecté dans vMix&quot;)&#10;                    result = False&#10;                    &#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du sponsor: {e}&quot;)&#10;            return False&#10;            &#10;    def show_timeout(self, team_name, duration=30):&#10;        &quot;&quot;&quot;&#10;        Affiche un overlay de timeout pour une équipe spécifique&#10;        &#10;        Args:&#10;            team_name (str): Nom de l'équipe&#10;            duration (int, optional): Durée du timeout en secondes&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si l'overlay de timeout est configuré&#10;            if &quot;timeout&quot; not in self.config.get(&quot;overlays&quot;, {}) and &quot;timeout&quot; not in self.overlay_inputs:&#10;                logger.error(&quot;Overlay de timeout non configuré/détecté&quot;)&#10;                return False&#10;                &#10;            # Mettre à jour le texte du timeout&#10;            fields = {&#10;                &quot;TeamName&quot;: team_name,&#10;                &quot;TimeoutText&quot;: f&quot;TIMEOUT {team_name}&quot;&#10;            }&#10;            &#10;            # Mettre à jour l'overlay de timeout&#10;            result = self.update_overlay_fields(&quot;timeout&quot;, fields)&#10;            &#10;            # Afficher l'overlay si la mise à jour a réussi&#10;            if result:&#10;                result = self.show_overlay(&quot;timeout&quot;, True)&#10;                &#10;                # Programmation de la disparition après la durée spécifiée&#10;                # Note: Cette partie est conceptuelle - dans une implémentation réelle,&#10;                # vous utiliseriez un timer ou une tâche planifiée&#10;                import threading&#10;                def hide_timeout():&#10;                    import time&#10;                    time.sleep(duration)&#10;                    self.show_overlay(&quot;timeout&quot;, False)&#10;                    &#10;                # Démarrer un thread pour masquer l'overlay après la durée spécifiée&#10;                threading.Thread(target=hide_timeout, daemon=True).start()&#10;                &#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'affichage du timeout: {e}&quot;)&#10;            return False&#10;            &#10;    def create_overlay_preset(self, name, overlay_types):&#10;        &quot;&quot;&quot;&#10;        Crée un preset pour activer/désactiver plusieurs overlays en une seule fois&#10;        &#10;        Args:&#10;            name (str): Nom du preset&#10;            overlay_types (list): Liste des types d'overlays à inclure dans le preset&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si les overlays existent&#10;            for overlay_type in overlay_types:&#10;                if overlay_type not in self.config.get(&quot;overlays&quot;, {}):&#10;                    logger.error(f&quot;Overlay de type '{overlay_type}' non configuré&quot;)&#10;                    return False&#10;                    &#10;            # Créer le preset&#10;            if &quot;presets&quot; not in self.config:&#10;                self.config[&quot;presets&quot;] = {}&#10;                &#10;            self.config[&quot;presets&quot;][name] = overlay_types&#10;            &#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            &#10;            logger.info(f&quot;Preset '{name}' créé avec succès&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la création du preset: {e}&quot;)&#10;            return False&#10;            &#10;    def apply_overlay_preset(self, name, enable=True):&#10;        &quot;&quot;&quot;&#10;        Applique un preset pour activer/désactiver plusieurs overlays en une seule fois&#10;        &#10;        Args:&#10;            name (str): Nom du preset&#10;            enable (bool): True pour afficher les overlays, False pour les masquer&#10;            &#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier si le preset existe&#10;            if name not in self.config.get(&quot;presets&quot;, {}):&#10;                logger.error(f&quot;Preset '{name}' non configuré&quot;)&#10;                return False&#10;                &#10;            # Récupérer les types d'overlays du preset&#10;            overlay_types = self.config[&quot;presets&quot;][name]&#10;            &#10;            # Appliquer l'action sur chaque overlay&#10;            success = True&#10;            for overlay_type in overlay_types:&#10;                if not self.show_overlay(overlay_type, enable):&#10;                    success = False&#10;                    &#10;            if success:&#10;                action = &quot;affichés&quot; if enable else &quot;masqués&quot;&#10;                logger.info(f&quot;Preset '{name}' appliqué avec succès, overlays {action}&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de l'application du preset '{name}'&quot;)&#10;                &#10;            return success&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'application du preset: {e}&quot;)&#10;            return False" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/replay_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/replay_manager.py" />
              <option name="originalContent" value="import os&#10;import json&#10;import time&#10;import logging&#10;from datetime import datetime&#10;from .vmix_manager import VMixManager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('replay_manager')&#10;&#10;class ReplayManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire de replays pour vMix.&#10;    Cette classe gère l'enregistrement, la lecture et le marquage des replays dans vMix.&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        &quot;&quot;&quot;Initialise le gestionnaire de replay.&quot;&quot;&quot;&#10;        self.vmix = VMixManager()&#10;&#10;        # Chemins pour les fichiers de configuration et de données&#10;        self.base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;        self.config_file = os.path.join(self.base_path, 'data', 'replay_config.json')&#10;        self.events_file = os.path.join(self.base_path, 'data', 'replay_events.json')&#10;&#10;        # Créer les répertoires s'ils n'existent pas&#10;        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)&#10;&#10;        # Charger ou initialiser la configuration&#10;        self.load_config()&#10;&#10;        # Charger ou initialiser les événements&#10;        self.load_events()&#10;&#10;        # État actuel du système de replay&#10;        self.is_recording = False&#10;        self.is_playing = False&#10;        self.recording_start_time = None&#10;&#10;    def load_config(self):&#10;        &quot;&quot;&quot;Charge la configuration des replays depuis le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            if os.path.exists(self.config_file):&#10;                with open(self.config_file, 'r') as f:&#10;                    self.config = json.load(f)&#10;            else:&#10;                # Configuration par défaut&#10;                self.config = {&#10;                    'duration': 8,&#10;                    'speed': 50,&#10;                    'enableAutoReplay': False,&#10;                    'events': {&#10;                        'point': True,&#10;                        'set': True,&#10;                        'match': True&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config()&#10;&#10;            logger.info(f&quot;Configuration des replays chargée: {self.config}&quot;)&#10;            return self.config&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration des replays: {str(e)}&quot;)&#10;            # En cas d'erreur, utiliser une configuration par défaut&#10;            self.config = {&#10;                'duration': 8,&#10;                'speed': 50,&#10;                'enableAutoReplay': False,&#10;                'events': {&#10;                    'point': True,&#10;                    'set': True,&#10;                    'match': True&#10;                }&#10;            }&#10;            return self.config&#10;&#10;    def save_config(self):&#10;        &quot;&quot;&quot;Sauvegarde la configuration des replays dans le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            with open(self.config_file, 'w') as f:&#10;                json.dump(self.config, f, indent=2)&#10;            logger.info(&quot;Configuration des replays sauvegardée&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def load_events(self):&#10;        &quot;&quot;&quot;Charge les événements de replay depuis le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            if os.path.exists(self.events_file):&#10;                with open(self.events_file, 'r') as f:&#10;                    self.events = json.load(f)&#10;            else:&#10;                self.events = []&#10;                # Sauvegarder la liste d'événements vide&#10;                self.save_events()&#10;&#10;            logger.info(f&quot;Événements de replay chargés: {len(self.events)} événements&quot;)&#10;            return self.events&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement des événements de replay: {str(e)}&quot;)&#10;            self.events = []&#10;            return self.events&#10;&#10;    def save_events(self):&#10;        &quot;&quot;&quot;Sauvegarde les événements de replay dans le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            with open(self.events_file, 'w') as f:&#10;                json.dump(self.events, f, indent=2)&#10;            logger.info(f&quot;Événements de replay sauvegardés: {len(self.events)} événements&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde des événements de replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def set_duration(self, duration):&#10;        &quot;&quot;&quot;&#10;        Définit la durée du buffer de replay.&#10;&#10;        Args:&#10;            duration (int): Durée en secondes (5-60)&#10;&#10;        Returns:&#10;            bool: True si la durée a été définie avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que la durée est dans une plage raisonnable&#10;            if not isinstance(duration, (int, float)) or duration &lt; 5 or duration &gt; 60:&#10;                logger.error(f&quot;Durée de replay invalide: {duration}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Définir la durée du buffer dans vMix&#10;            command = f&quot;ReplaySetDuration Input={duration}&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                # Mettre à jour la configuration&#10;                self.config['duration'] = duration&#10;                self.save_config()&#10;                logger.info(f&quot;Durée du buffer de replay définie à {duration} secondes&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la définition de la durée du buffer de replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la définition de la durée du buffer de replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;&#10;        Démarre l'enregistrement des replays.&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Démarrer l'enregistrement dans vMix&#10;            command = &quot;ReplayStartRecording&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_recording = True&#10;                self.recording_start_time = datetime.now()&#10;                logger.info(&quot;Enregistrement des replays démarré&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement des replays&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement des replays.&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement a été arrêté avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Arrêter l'enregistrement dans vMix&#10;            command = &quot;ReplayStopRecording&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_recording = False&#10;                self.recording_start_time = None&#10;                logger.info(&quot;Enregistrement des replays arrêté&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement des replays&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def play_last_replay(self, speed=100):&#10;        &quot;&quot;&quot;&#10;        Lit le dernier replay enregistré.&#10;&#10;        Args:&#10;            speed (int): Vitesse de lecture en pourcentage (25, 50, 75, 100)&#10;&#10;        Returns:&#10;            bool: True si la lecture a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que la vitesse est valide&#10;            if speed not in [25, 50, 75, 100]:&#10;                logger.error(f&quot;Vitesse de replay invalide: {speed}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Utiliser ReplayPlay au lieu de ReplayPlayLast&#10;            # D'après les logs, ReplayPlayEvent fonctionne, donc essayons d'utiliser une commande similaire&#10;            command = &quot;ReplayPlay&quot;&#10;            params = {&quot;Speed&quot;: speed}&#10;&#10;            logger.info(f&quot;Lecture du dernier replay à {speed}%&quot;)&#10;            result = self.vmix.send_command(command, **params)&#10;&#10;            if result:&#10;                self.is_playing = True&#10;                logger.info(f&quot;Lecture du dernier replay à {speed}% réussie&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la lecture du dernier replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def pause_replay(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause la lecture du replay.&#10;&#10;        Returns:&#10;            bool: True si la pause a été activée avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Mettre en pause le replay dans vMix&#10;            command = &quot;ReplayPause&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_playing = False&#10;                logger.info(&quot;Replay mis en pause&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause du replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def mark_event(self, name, event_type=&quot;point&quot;):&#10;        &quot;&quot;&quot;&#10;        Marque un événement de replay.&#10;&#10;        Args:&#10;            name (str): Nom de l'événement&#10;            event_type (str): Type d'événement ('point', 'set', 'match', etc.)&#10;&#10;        Returns:&#10;            tuple: (success, events_list)&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False, None&#10;&#10;            # Générer un index d'événement unique pour vMix&#10;            event_index = len(self.events)&#10;&#10;            # Marquer le début de l'événement dans vMix avec ReplayMarkIn&#10;            # En spécifiant Event=index pour créer un nouvel événement dans la liste de vMix&#10;            command = f&quot;ReplayMarkIn Event={event_index}&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if not result:&#10;                logger.error(&quot;Échec du marquage du début de l'événement (ReplayMarkIn)&quot;)&#10;                return False, None&#10;&#10;            # Récupérer la durée configurée pour l'événement&#10;            replay_duration = self.config.get('duration', 8)  # Durée par défaut 8 secondes&#10;&#10;            # Nettoyer le nom de l'événement&#10;            event_name = name&#10;            if isinstance(name, dict) or not isinstance(name, str):&#10;                # Si c'est un objet ou non une chaîne, utiliser un nom par défaut&#10;                event_name = f&quot;Événement {len(self.events) + 1}&quot;&#10;&#10;            # Marquer la fin de l'événement dans vMix avec ReplayMarkOut&#10;            # En utilisant le même index d'événement pour assurer la cohérence&#10;            command = f&quot;ReplayMarkOut Event={event_index}&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if not result:&#10;                logger.warning(&quot;Échec du marquage de la fin de l'événement (ReplayMarkOut)&quot;)&#10;                # On continue car ReplayMarkIn a fonctionné et c'est le plus important&#10;&#10;            # Définir le nom de l'événement dans vMix&#10;            command = f&quot;ReplayChangeEventName Event={event_index} Value=\&quot;{event_name}\&quot;&quot;&#10;            self.vmix.send_command(command)&#10;&#10;            # Créer et enregistrer l'événement&#10;            event = {&#10;                'name': event_name,&#10;                'type': event_type,&#10;                'timestamp': datetime.now().isoformat(),&#10;                'index': event_index,&#10;                'duration': replay_duration&#10;            }&#10;            self.events.append(event)&#10;            self.save_events()&#10;&#10;            logger.info(f&quot;Événement marqué: {event['name']} (durée: {replay_duration}s, index: {event_index})&quot;)&#10;            return True, self.events&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;)&#10;            return False, None&#10;&#10;    def play_event(self, event_index, speed=100):&#10;        &quot;&quot;&quot;&#10;        Lit un événement de replay spécifique.&#10;&#10;        Selon la documentation vMix, la commande ReplayPlayEvent prend:&#10;        - Value: l'index de l'événement (0-based)&#10;        - Speed: la vitesse de lecture (25, 50, 75, 100)&#10;&#10;        Args:&#10;            event_index (int): Index de l'événement à lire&#10;            speed (int): Vitesse de lecture en pourcentage (25, 50, 75, 100)&#10;&#10;        Returns:&#10;            bool: True si la lecture a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que l'index est valide&#10;            if event_index &lt; 0 or event_index &gt;= len(self.events):&#10;                logger.error(f&quot;Index d'événement invalide: {event_index}&quot;)&#10;                return False&#10;&#10;            # Vérifier que la vitesse est valide&#10;            if speed not in [25, 50, 75, 100]:&#10;                logger.error(f&quot;Vitesse de replay invalide: {speed}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # D'après la documentation vMix, l'index dans le buffer vMix peut être différent&#10;            # de notre index local. Nous utilisons donc directement l'événement le plus récent.&#10;            # Pour vMix, les événements sont numérotés de 0 (le plus récent) à N&#10;            try:&#10;                # D'abord, on essaie de lire avec notre index, au cas où vMix utilise le même ordre&#10;                command = &quot;ReplayPlayEvent&quot;&#10;                params = {&#10;                    &quot;Value&quot;: event_index,&#10;                    &quot;Speed&quot;: speed&#10;                }&#10;&#10;                logger.info(f&quot;Tentative de lecture de l'événement {event_index} à {speed}%&quot;)&#10;                result = self.vmix.send_command(command, **params)&#10;&#10;                if result:&#10;                    self.is_playing = True&#10;                    logger.info(f&quot;Lecture de l'événement {event_index} à {speed}% réussie&quot;)&#10;                    return True&#10;&#10;                # Si ça échoue, on peut essayer de convertir notre index&#10;                # en index vMix (plus récent = plus petit index)&#10;                vmix_index = len(self.events) - 1 - event_index&#10;                if vmix_index &gt;= 0:&#10;                    command = &quot;ReplayPlayEvent&quot;&#10;                    params = {&#10;                        &quot;Value&quot;: vmix_index,&#10;                        &quot;Speed&quot;: speed&#10;                    }&#10;&#10;                    logger.info(f&quot;Tentative alternative: lecture de l'événement vMix {vmix_index} à {speed}%&quot;)&#10;                    result = self.vmix.send_command(command, **params)&#10;&#10;                    if result:&#10;                        self.is_playing = True&#10;                        logger.info(f&quot;Lecture de l'événement {vmix_index} (converti) à {speed}% réussie&quot;)&#10;                        return True&#10;&#10;                # Si les deux approches échouent, on tente de lire le dernier événement&#10;                command = &quot;ReplayPlay&quot;&#10;                params = {&quot;Speed&quot;: speed}&#10;                logger.info(f&quot;Tentative de lecture du dernier événement à {speed}%&quot;)&#10;                result = self.vmix.send_command(command, **params)&#10;&#10;                if result:&#10;                    self.is_playing = True&#10;                    logger.info(f&quot;Lecture du dernier événement à {speed}% réussie (fallback)&quot;)&#10;                    return True&#10;&#10;                logger.error(f&quot;Échec de toutes les tentatives de lecture de l'événement&quot;)&#10;                return False&#10;&#10;            except Exception as e:&#10;                logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def delete_event(self, event_index):&#10;        &quot;&quot;&quot;&#10;        Supprime un événement de replay de la liste locale.&#10;&#10;        Note importante: L'API vMix ne fournit pas de méthode pour supprimer&#10;        un événement spécifique de la liste des événements de replay.&#10;        Cette méthode supprime uniquement l'événement de notre liste locale.&#10;&#10;        Pour garder les listes synchronisées, nous pourrions:&#10;        1. Recréer tous les événements restants dans vMix (pas idéal)&#10;        2. Avertir l'utilisateur de cette limitation&#10;&#10;        Args:&#10;            event_index (int): Index de l'événement à supprimer&#10;&#10;        Returns:&#10;            tuple: (bool, list, str) - (Succès, Liste des événements mise à jour, Message d'avertissement)&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que l'index est valide&#10;            if event_index &lt; 0 or event_index &gt;= len(self.events):&#10;                logger.error(f&quot;Index d'événement invalide: {event_index}&quot;)&#10;                return False, self.events, &quot;Index d'événement invalide&quot;&#10;&#10;            # Supprimer l'événement de la liste locale&#10;            deleted_event = self.events.pop(event_index)&#10;&#10;            # Mettre à jour les indices des événements restants&#10;            for i, event in enumerate(self.events):&#10;                event['index'] = i&#10;&#10;            # Sauvegarder la liste mise à jour&#10;            self.save_events()&#10;&#10;            logger.info(f&quot;Événement supprimé de la liste locale: {deleted_event.get('name', f'Événement {event_index + 1}')}&quot;)&#10;&#10;            # Message d'avertissement pour l'utilisateur&#10;            warning_message = (&quot;Attention: L'événement a été supprimé de la liste locale, &quot;&#10;                              &quot;mais reste présent dans vMix car l'API vMix ne permet pas &quot;&#10;                              &quot;de supprimer des événements spécifiques.&quot;)&#10;&#10;            logger.warning(warning_message)&#10;&#10;            return True, self.events, warning_message&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;)&#10;            return False, self.events, f&quot;Erreur: {str(e)}&quot;&#10;&#10;    def get_status(self):&#10;        &quot;&quot;&quot;&#10;        Récupère l'état actuel du système de replay.&#10;&#10;        Returns:&#10;            dict: État actuel du système de replay&#10;        &quot;&quot;&quot;&#10;        return {&#10;            'isRecording': self.is_recording,&#10;            'isPlaying': self.is_playing,&#10;            'recordingTime': (datetime.now() - self.recording_start_time).total_seconds() if self.is_recording and self.recording_start_time else 0,&#10;            'events': len(self.events)&#10;        }&#10;" />
              <option name="updatedContent" value="import os&#10;import json&#10;import time&#10;import logging&#10;from datetime import datetime&#10;from .vmix_manager import VMixManager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('replay_manager')&#10;&#10;class ReplayManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire de replays pour vMix.&#10;    Cette classe gère l'enregistrement, la lecture et le marquage des replays dans vMix.&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        &quot;&quot;&quot;Initialise le gestionnaire de replay.&quot;&quot;&quot;&#10;        self.vmix = VMixManager()&#10;&#10;        # Chemins pour les fichiers de configuration et de données&#10;        self.base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;        self.config_file = os.path.join(self.base_path, 'data', 'replay_config.json')&#10;        self.events_file = os.path.join(self.base_path, 'data', 'replay_events.json')&#10;&#10;        # Créer les répertoires s'ils n'existent pas&#10;        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)&#10;&#10;        # Charger ou initialiser la configuration&#10;        self.load_config()&#10;&#10;        # Charger ou initialiser les événements&#10;        self.load_events()&#10;&#10;        # État actuel du système de replay&#10;        self.is_recording = False&#10;        self.is_playing = False&#10;        self.recording_start_time = None&#10;&#10;    def load_config(self):&#10;        &quot;&quot;&quot;Charge la configuration des replays depuis le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            if os.path.exists(self.config_file):&#10;                with open(self.config_file, 'r') as f:&#10;                    self.config = json.load(f)&#10;            else:&#10;                # Configuration par défaut&#10;                self.config = {&#10;                    'duration': 8,&#10;                    'speed': 50,&#10;                    'enableAutoReplay': False,&#10;                    'events': {&#10;                        'point': True,&#10;                        'set': True,&#10;                        'match': True&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config()&#10;&#10;            logger.info(f&quot;Configuration des replays chargée: {self.config}&quot;)&#10;            return self.config&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration des replays: {str(e)}&quot;)&#10;            # En cas d'erreur, utiliser une configuration par défaut&#10;            self.config = {&#10;                'duration': 8,&#10;                'speed': 50,&#10;                'enableAutoReplay': False,&#10;                'events': {&#10;                    'point': True,&#10;                    'set': True,&#10;                    'match': True&#10;                }&#10;            }&#10;            return self.config&#10;&#10;    def save_config(self):&#10;        &quot;&quot;&quot;Sauvegarde la configuration des replays dans le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            with open(self.config_file, 'w') as f:&#10;                json.dump(self.config, f, indent=2)&#10;            logger.info(&quot;Configuration des replays sauvegardée&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def load_events(self):&#10;        &quot;&quot;&quot;Charge les événements de replay depuis le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            if os.path.exists(self.events_file):&#10;                with open(self.events_file, 'r') as f:&#10;                    self.events = json.load(f)&#10;            else:&#10;                self.events = []&#10;                # Sauvegarder la liste d'événements vide&#10;                self.save_events()&#10;&#10;            logger.info(f&quot;Événements de replay chargés: {len(self.events)} événements&quot;)&#10;            return self.events&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement des événements de replay: {str(e)}&quot;)&#10;            self.events = []&#10;            return self.events&#10;&#10;    def save_events(self):&#10;        &quot;&quot;&quot;Sauvegarde les événements de replay dans le fichier JSON.&quot;&quot;&quot;&#10;        try:&#10;            with open(self.events_file, 'w') as f:&#10;                json.dump(self.events, f, indent=2)&#10;            logger.info(f&quot;Événements de replay sauvegardés: {len(self.events)} événements&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde des événements de replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def set_duration(self, duration):&#10;        &quot;&quot;&quot;&#10;        Définit la durée du buffer de replay.&#10;&#10;        Args:&#10;            duration (int): Durée en secondes (5-60)&#10;&#10;        Returns:&#10;            bool: True si la durée a été définie avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que la durée est dans une plage raisonnable&#10;            if not isinstance(duration, (int, float)) or duration &lt; 5 or duration &gt; 60:&#10;                logger.error(f&quot;Durée de replay invalide: {duration}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Définir la durée du buffer dans vMix&#10;            command = f&quot;ReplaySetDuration Input={duration}&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                # Mettre à jour la configuration&#10;                self.config['duration'] = duration&#10;                self.save_config()&#10;                logger.info(f&quot;Durée du buffer de replay définie à {duration} secondes&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la définition de la durée du buffer de replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la définition de la durée du buffer de replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;&#10;        Démarre l'enregistrement des replays.&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Démarrer l'enregistrement dans vMix&#10;            command = &quot;ReplayStartRecording&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_recording = True&#10;                self.recording_start_time = datetime.now()&#10;                logger.info(&quot;Enregistrement des replays démarré&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement des replays&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement des replays.&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement a été arrêté avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Arrêter l'enregistrement dans vMix&#10;            command = &quot;ReplayStopRecording&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_recording = False&#10;                self.recording_start_time = None&#10;                logger.info(&quot;Enregistrement des replays arrêté&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement des replays&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement des replays: {str(e)}&quot;)&#10;            return False&#10;&#10;    def play_last_replay(self, speed=100):&#10;        &quot;&quot;&quot;&#10;        Lit le dernier replay enregistré.&#10;&#10;        Args:&#10;            speed (int): Vitesse de lecture en pourcentage (25, 50, 75, 100)&#10;&#10;        Returns:&#10;            bool: True si la lecture a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que la vitesse est valide&#10;            if speed not in [25, 50, 75, 100]:&#10;                logger.error(f&quot;Vitesse de replay invalide: {speed}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Utiliser ReplayPlay au lieu de ReplayPlayLast&#10;            # D'après les logs, ReplayPlayEvent fonctionne, donc essayons d'utiliser une commande similaire&#10;            command = &quot;ReplayPlay&quot;&#10;            params = {&quot;Speed&quot;: speed}&#10;&#10;            logger.info(f&quot;Lecture du dernier replay à {speed}%&quot;)&#10;            result = self.vmix.send_command(command, **params)&#10;&#10;            if result:&#10;                self.is_playing = True&#10;                logger.info(f&quot;Lecture du dernier replay à {speed}% réussie&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la lecture du dernier replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la lecture du dernier replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def pause_replay(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause la lecture du replay.&#10;&#10;        Returns:&#10;            bool: True si la pause a été activée avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # Mettre en pause le replay dans vMix&#10;            command = &quot;ReplayPause&quot;&#10;            result = self.vmix.send_command(command)&#10;&#10;            if result:&#10;                self.is_playing = False&#10;                logger.info(&quot;Replay mis en pause&quot;)&#10;                return True&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause du replay&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause du replay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def mark_event(self, name, event_type=&quot;point&quot;):&#10;        &quot;&quot;&quot;&#10;        Marque un événement de replay.&#10;&#10;        Args:&#10;            name (str): Nom de l'événement&#10;            event_type (str): Type d'événement ('point', 'set', 'match', etc.)&#10;&#10;        Returns:&#10;            tuple: (success, events_list)&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False, None&#10;&#10;            # Générer un index d'événement unique pour vMix&#10;            event_index = len(self.events)&#10;            &#10;            # Marquer le début de l'événement dans vMix avec ReplayMarkIn&#10;            # On utilise la méthode send_command correctement avec les paramètres séparés&#10;            result = self.vmix.send_command(&quot;ReplayMarkIn&quot;, Value=event_index)&#10;&#10;            if not result:&#10;                logger.error(&quot;Échec du marquage du début de l'événement (ReplayMarkIn)&quot;)&#10;                return False, None&#10;&#10;            # Récupérer la durée configurée pour l'événement&#10;            replay_duration = self.config.get('duration', 8)  # Durée par défaut 8 secondes&#10;&#10;            # Nettoyer le nom de l'événement&#10;            event_name = name&#10;            if isinstance(name, dict) or not isinstance(name, str):&#10;                # Si c'est un objet ou non une chaîne, utiliser un nom par défaut&#10;                event_name = f&quot;Événement {len(self.events) + 1}&quot;&#10;&#10;            # Marquer la fin de l'événement dans vMix avec ReplayMarkOut&#10;            # On utilise la méthode send_command correctement avec les paramètres séparés&#10;            result = self.vmix.send_command(&quot;ReplayMarkOut&quot;, Value=event_index)&#10;&#10;            if not result:&#10;                logger.warning(&quot;Échec du marquage de la fin de l'événement (ReplayMarkOut)&quot;)&#10;                # On continue car ReplayMarkIn a fonctionné et c'est le plus important&#10;            &#10;            # Définir le nom de l'événement dans vMix&#10;            result = self.vmix.send_command(&quot;ReplayChangeEventName&quot;, Value=event_index, Name=event_name)&#10;&#10;            # Créer et enregistrer l'événement&#10;            event = {&#10;                'name': event_name,&#10;                'type': event_type,&#10;                'timestamp': datetime.now().isoformat(),&#10;                'index': event_index,&#10;                'duration': replay_duration&#10;            }&#10;            self.events.append(event)&#10;            self.save_events()&#10;&#10;            logger.info(f&quot;Événement marqué: {event['name']} (durée: {replay_duration}s, index: {event_index})&quot;)&#10;            return True, self.events&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du marquage de l'événement: {str(e)}&quot;)&#10;            return False, None&#10;&#10;    def play_event(self, event_index, speed=100):&#10;        &quot;&quot;&quot;&#10;        Lit un événement de replay spécifique.&#10;&#10;        Selon la documentation vMix, la commande ReplayPlayEvent prend:&#10;        - Value: l'index de l'événement (0-based)&#10;        - Speed: la vitesse de lecture (25, 50, 75, 100)&#10;&#10;        Args:&#10;            event_index (int): Index de l'événement à lire&#10;            speed (int): Vitesse de lecture en pourcentage (25, 50, 75, 100)&#10;&#10;        Returns:&#10;            bool: True si la lecture a démarré avec succès, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que l'index est valide&#10;            if event_index &lt; 0 or event_index &gt;= len(self.events):&#10;                logger.error(f&quot;Index d'événement invalide: {event_index}&quot;)&#10;                return False&#10;&#10;            # Vérifier que la vitesse est valide&#10;            if speed not in [25, 50, 75, 100]:&#10;                logger.error(f&quot;Vitesse de replay invalide: {speed}&quot;)&#10;                return False&#10;&#10;            # Vérifier la connexion à vMix&#10;            if not self.vmix.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix&quot;)&#10;                return False&#10;&#10;            # D'après la documentation vMix, l'index dans le buffer vMix peut être différent&#10;            # de notre index local. Nous utilisons donc directement l'événement le plus récent.&#10;            # Pour vMix, les événements sont numérotés de 0 (le plus récent) à N&#10;            try:&#10;                # D'abord, on essaie de lire avec notre index, au cas où vMix utilise le même ordre&#10;                command = &quot;ReplayPlayEvent&quot;&#10;                params = {&#10;                    &quot;Value&quot;: event_index,&#10;                    &quot;Speed&quot;: speed&#10;                }&#10;&#10;                logger.info(f&quot;Tentative de lecture de l'événement {event_index} à {speed}%&quot;)&#10;                result = self.vmix.send_command(command, **params)&#10;&#10;                if result:&#10;                    self.is_playing = True&#10;                    logger.info(f&quot;Lecture de l'événement {event_index} à {speed}% réussie&quot;)&#10;                    return True&#10;&#10;                # Si ça échoue, on peut essayer de convertir notre index&#10;                # en index vMix (plus récent = plus petit index)&#10;                vmix_index = len(self.events) - 1 - event_index&#10;                if vmix_index &gt;= 0:&#10;                    command = &quot;ReplayPlayEvent&quot;&#10;                    params = {&#10;                        &quot;Value&quot;: vmix_index,&#10;                        &quot;Speed&quot;: speed&#10;                    }&#10;&#10;                    logger.info(f&quot;Tentative alternative: lecture de l'événement vMix {vmix_index} à {speed}%&quot;)&#10;                    result = self.vmix.send_command(command, **params)&#10;&#10;                    if result:&#10;                        self.is_playing = True&#10;                        logger.info(f&quot;Lecture de l'événement {vmix_index} (converti) à {speed}% réussie&quot;)&#10;                        return True&#10;&#10;                # Si les deux approches échouent, on tente de lire le dernier événement&#10;                command = &quot;ReplayPlay&quot;&#10;                params = {&quot;Speed&quot;: speed}&#10;                logger.info(f&quot;Tentative de lecture du dernier événement à {speed}%&quot;)&#10;                result = self.vmix.send_command(command, **params)&#10;&#10;                if result:&#10;                    self.is_playing = True&#10;                    logger.info(f&quot;Lecture du dernier événement à {speed}% réussie (fallback)&quot;)&#10;                    return True&#10;&#10;                logger.error(f&quot;Échec de toutes les tentatives de lecture de l'événement&quot;)&#10;                return False&#10;&#10;            except Exception as e:&#10;                logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la lecture de l'événement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def delete_event(self, event_index):&#10;        &quot;&quot;&quot;&#10;        Supprime un événement de replay de la liste locale.&#10;&#10;        Note importante: L'API vMix ne fournit pas de méthode pour supprimer&#10;        un événement spécifique de la liste des événements de replay.&#10;        Cette méthode supprime uniquement l'événement de notre liste locale.&#10;&#10;        Pour garder les listes synchronisées, nous pourrions:&#10;        1. Recréer tous les événements restants dans vMix (pas idéal)&#10;        2. Avertir l'utilisateur de cette limitation&#10;&#10;        Args:&#10;            event_index (int): Index de l'événement à supprimer&#10;&#10;        Returns:&#10;            tuple: (bool, list, str) - (Succès, Liste des événements mise à jour, Message d'avertissement)&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier que l'index est valide&#10;            if event_index &lt; 0 or event_index &gt;= len(self.events):&#10;                logger.error(f&quot;Index d'événement invalide: {event_index}&quot;)&#10;                return False, self.events, &quot;Index d'événement invalide&quot;&#10;&#10;            # Supprimer l'événement de la liste locale&#10;            deleted_event = self.events.pop(event_index)&#10;&#10;            # Mettre à jour les indices des événements restants&#10;            for i, event in enumerate(self.events):&#10;                event['index'] = i&#10;&#10;            # Sauvegarder la liste mise à jour&#10;            self.save_events()&#10;&#10;            logger.info(f&quot;Événement supprimé de la liste locale: {deleted_event.get('name', f'Événement {event_index + 1}')}&quot;)&#10;&#10;            # Message d'avertissement pour l'utilisateur&#10;            warning_message = (&quot;Attention: L'événement a été supprimé de la liste locale, &quot;&#10;                              &quot;mais reste présent dans vMix car l'API vMix ne permet pas &quot;&#10;                              &quot;de supprimer des événements spécifiques.&quot;)&#10;&#10;            logger.warning(warning_message)&#10;&#10;            return True, self.events, warning_message&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la suppression de l'événement: {str(e)}&quot;)&#10;            return False, self.events, f&quot;Erreur: {str(e)}&quot;&#10;&#10;    def get_status(self):&#10;        &quot;&quot;&quot;&#10;        Récupère l'état actuel du système de replay.&#10;&#10;        Returns:&#10;            dict: État actuel du système de replay&#10;        &quot;&quot;&quot;&#10;        return {&#10;            'isRecording': self.is_recording,&#10;            'isPlaying': self.is_playing,&#10;            'recordingTime': (datetime.now() - self.recording_start_time).total_seconds() if self.is_recording and self.recording_start_time else 0,&#10;            'events': len(self.events)&#10;        }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/stream_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/stream_manager.py" />
              <option name="originalContent" value="#fonctionnalités à implémenter :&#10;# -contrôle du streaming, -gestion des configurations de streaming, -enregistrement&#10;# -surveillance de l'état du streaming&#10;&#10;import os&#10;import json&#10;import time&#10;import logging&#10;from v3_0.app.core.vmix_manager import Vmix_manager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('stream_manager')&#10;&#10;class StreamManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire pour les fonctionnalités de streaming dans vMix&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, vmix_manager=None, data_dir=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire de streaming&#10;&#10;        Args:&#10;            vmix_manager: Instance de Vmix_manager à utiliser&#10;            data_dir: Répertoire où stocker les configurations de streaming&#10;        &quot;&quot;&quot;&#10;        # Si aucun répertoire n'est spécifié, utiliser le répertoire courant&#10;        if data_dir is None:&#10;            self.data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), &quot;data&quot;)&#10;        else:&#10;            self.data_dir = data_dir&#10;&#10;        # Créer le répertoire s'il n'existe pas&#10;        if not os.path.exists(self.data_dir):&#10;            os.makedirs(self.data_dir)&#10;&#10;        # Fichier JSON pour stocker les configurations de streaming&#10;        self.config_file = os.path.join(self.data_dir, &quot;stream_config.json&quot;)&#10;&#10;        # Utiliser l'instance vmix_manager fournie ou en créer une nouvelle&#10;        self.vmix = vmix_manager if vmix_manager else Vmix_manager()&#10;&#10;        # Charger la configuration de streaming&#10;                        {&#10;                        {&#10;        self.streaming_active = False&#10;        self.streaming_active = False&#10;        self.recording_active = False&#10;                        {&#10;        # Mettre à jour l'état initial&#10;        self.update_status()&#10;                        {&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;        &quot;&quot;&quot;&#10;        Charge la configuration de streaming depuis le fichier JSON&#10;                        {&#10;        Returns:&#10;            dict: Configuration de streaming&#10;        &quot;&quot;&quot;&#10;                        {&#10;            if os.path.exists(self.config_file):&#10;                with open(self.config_file, 'r', encoding='utf-8') as f:&#10;                    return json.load(f)&#10;            else:&#10;                # Configuration par défaut si le fichier n'existe pas&#10;                default_config = {&#10;                    &quot;platforms&quot;: [&#10;                        {&#10;                            &quot;name&quot;: &quot;YouTube&quot;,&#10;                            &quot;enabled&quot;: True,&#10;                            &quot;rtmp_url&quot;: &quot;rtmp://a.rtmp.youtube.com/live2&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        },&#10;                        {&#10;                            &quot;name&quot;: &quot;Twitch&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmp://live.twitch.tv/app&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        },&#10;                        {&#10;                            &quot;name&quot;: &quot;Facebook&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;    def toggle_recording(self):&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration de streaming sauvegardée dans {self.config_file}&quot;)&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration de streaming: {e}&quot;)&#10;                    }&#10;&#10;    def update_status(self):&#10;        except Exception as e:&#10;        Met à jour le statut actuel du streaming et de l'enregistrement&#10;&#10;&#10;            dict: Statut actuel&#10;        &quot;&quot;&quot;&#10;                        {&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            bool: True si réussi, False sinon&#10;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;            return status&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;                        {&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if self.recording_active:&#10;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Récupère la liste des plateformes de streaming configurées&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return False&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;&#10;    def stop_recording(self):&#10;            dict: Statut actuel&#10;        Arrête l'enregistrement&#10;&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            bool: True si réussi, False sinon&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;            if result:&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;    def stop_streaming(self):&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        except Exception as e:&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            platform_found = False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        {&#10;                            &quot;name&quot;: &quot;Facebook&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        }&#10;                    ],&#10;                    &quot;recording&quot;: {&#10;                        &quot;auto_record&quot;: True,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        {&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                    },&#10;                    &quot;quality&quot;: {&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;                        &quot;resolution&quot;: &quot;1080p&quot;&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config(default_config)&#10;                return default_config&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration de streaming: {e}&quot;)&#10;            return {}&#10;&#10;    def save_config(self, config=None):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde la configuration de streaming dans le fichier JSON&#10;&#10;        Args:&#10;            config (dict, optional): Configuration à sauvegarder. Si None, utilise self.config.&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration de streaming sauvegardée dans {self.config_file}&quot;)&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration de streaming: {e}&quot;)&#10;                    }&#10;&#10;    def update_status(self):&#10;        except Exception as e:&#10;        Met à jour le statut actuel du streaming et de l'enregistrement&#10;&#10;&#10;            dict: Statut actuel&#10;        &quot;&quot;&quot;&#10;                        {&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            self.recording_active = self.vmix.get_recording_status()&#10;&#10;            status = {&#10;                &quot;streaming&quot;: self.streaming_active,&#10;                &quot;recording&quot;: self.recording_active,&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;            logger.info(f&quot;Statut mis à jour - Streaming: {'Actif' if self.streaming_active else 'Inactif'}, &quot;&#10;                       f&quot;Enregistrement: {'Actif' if self.recording_active else 'Inactif'}&quot;)&#10;            return status&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;            return {&#10;                &quot;streaming&quot;: False,&#10;                &quot;recording&quot;: False,&#10;                &quot;error&quot;: str(e),&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Démarre le streaming&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;            if result:&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;            if not platform_found:&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;                # Ajouter une nouvelle plateforme&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;            bool: True si réussi, False sinon&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;        Args:&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            platform_found = False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        Args:&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;            preset_name (str): Nom du preset&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Charge un preset vMix pour le streaming&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def get_streaming_platforms(self):&#10;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Récupère la liste des plateformes de streaming activées&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        Récupère la liste des plateformes de streaming configurées&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;        Returns:&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;    def pause_recording(self):&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if not self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return False&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            bool: True si réussi, False sinon&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;    def start_streaming(self):&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;            if not platform_found:&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;                # Ajouter une nouvelle plateforme&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;            bool: True si réussi, False sinon&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Args:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        {&#10;                            &quot;name&quot;: &quot;Facebook&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        }&#10;                    ],&#10;                    &quot;recording&quot;: {&#10;                        &quot;auto_record&quot;: True,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                    },&#10;                    &quot;quality&quot;: {&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;                        &quot;resolution&quot;: &quot;1080p&quot;&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config(default_config)&#10;                return default_config&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration de streaming: {e}&quot;)&#10;            return {}&#10;&#10;    def save_config(self, config=None):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde la configuration de streaming dans le fichier JSON&#10;&#10;        Args:&#10;            config (dict, optional): Configuration à sauvegarder. Si None, utilise self.config.&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration de streaming sauvegardée dans {self.config_file}&quot;)&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration de streaming: {e}&quot;)&#10;                    }&#10;&#10;    def update_status(self):&#10;        except Exception as e:&#10;        Met à jour le statut actuel du streaming et de l'enregistrement&#10;&#10;&#10;            dict: Statut actuel&#10;        &quot;&quot;&quot;&#10;                        {&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            self.recording_active = self.vmix.get_recording_status()&#10;&#10;            status = {&#10;                &quot;streaming&quot;: self.streaming_active,&#10;                &quot;recording&quot;: self.recording_active,&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;            logger.info(f&quot;Statut mis à jour - Streaming: {'Actif' if self.streaming_active else 'Inactif'}, &quot;&#10;                       f&quot;Enregistrement: {'Actif' if self.recording_active else 'Inactif'}&quot;)&#10;            return status&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;            return {&#10;                &quot;streaming&quot;: False,&#10;                &quot;recording&quot;: False,&#10;                &quot;error&quot;: str(e),&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Démarre le streaming&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;    def start_streaming(self):&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;    def stop_streaming(self):&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        Args:&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;            preset_name (str): Nom du preset&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Charge un preset vMix pour le streaming&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Récupère la liste des plateformes de streaming activées&#10;            bool: True si réussi, False sinon&#10;        Récupère la liste des plateformes de streaming configurées&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;    def pause_recording(self):&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if not self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return False&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;&#10;    def stop_recording(self):&#10;            dict: Statut actuel&#10;        Arrête l'enregistrement&#10;&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            bool: True si réussi, False sinon&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;            if result:&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;    def stop_streaming(self):&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        except Exception as e:&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            platform_found = False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        {&#10;                            &quot;name&quot;: &quot;Facebook&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        }&#10;                    ],&#10;                    &quot;recording&quot;: {&#10;                        &quot;auto_record&quot;: True,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                    },&#10;                    &quot;quality&quot;: {&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;                        &quot;resolution&quot;: &quot;1080p&quot;&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config(default_config)&#10;                return default_config&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration de streaming: {e}&quot;)&#10;            return {}&#10;&#10;    def save_config(self, config=None):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde la configuration de streaming dans le fichier JSON&#10;&#10;        Args:&#10;            config (dict, optional): Configuration à sauvegarder. Si None, utilise self.config.&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration de streaming sauvegardée dans {self.config_file}&quot;)&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration de streaming: {e}&quot;)&#10;                    }&#10;&#10;    def update_status(self):&#10;        except Exception as e:&#10;        Met à jour le statut actuel du streaming et de l'enregistrement&#10;&#10;&#10;            dict: Statut actuel&#10;        &quot;&quot;&quot;&#10;                        {&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            self.recording_active = self.vmix.get_recording_status()&#10;&#10;            status = {&#10;                &quot;streaming&quot;: self.streaming_active,&#10;                &quot;recording&quot;: self.recording_active,&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;            logger.info(f&quot;Statut mis à jour - Streaming: {'Actif' if self.streaming_active else 'Inactif'}, &quot;&#10;                       f&quot;Enregistrement: {'Actif' if self.recording_active else 'Inactif'}&quot;)&#10;            return status&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;            return {&#10;                &quot;streaming&quot;: False,&#10;                &quot;recording&quot;: False,&#10;                &quot;error&quot;: str(e),&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Démarre le streaming&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;    def start_streaming(self):&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;            if not platform_found:&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;                # Ajouter une nouvelle plateforme&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;            bool: True si réussi, False sinon&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;        Args:&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        Args:&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;            preset_name (str): Nom du preset&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Charge un preset vMix pour le streaming&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def get_streaming_platforms(self):&#10;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Récupère la liste des plateformes de streaming activées&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        Récupère la liste des plateformes de streaming configurées&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;        Returns:&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;    def pause_recording(self):&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if not self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return False&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            bool: True si réussi, False sinon&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;    def start_streaming(self):&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;    def stop_streaming(self):&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        {&#10;                            &quot;name&quot;: &quot;Facebook&quot;,&#10;                            &quot;enabled&quot;: False,&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;                            &quot;stream_key&quot;: &quot;&quot;&#10;                        }&#10;                    ],&#10;                    &quot;recording&quot;: {&#10;                        &quot;auto_record&quot;: True,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                    },&#10;                    &quot;quality&quot;: {&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;                        &quot;resolution&quot;: &quot;1080p&quot;&#10;                    }&#10;                }&#10;                # Sauvegarder la configuration par défaut&#10;                self.save_config(default_config)&#10;                return default_config&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration de streaming: {e}&quot;)&#10;            return {}&#10;&#10;    def save_config(self, config=None):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde la configuration de streaming dans le fichier JSON&#10;&#10;        Args:&#10;            config (dict, optional): Configuration à sauvegarder. Si None, utilise self.config.&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            config_to_save = config if config is not None else self.config&#10;            with open(self.config_file, 'w', encoding='utf-8') as f:&#10;                json.dump(config_to_save, f, ensure_ascii=False, indent=4)&#10;            logger.info(f&quot;Configuration de streaming sauvegardée dans {self.config_file}&quot;)&#10;                        &quot;bitrate&quot;: 6000,&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration de streaming: {e}&quot;)&#10;                    }&#10;&#10;    def update_status(self):&#10;        except Exception as e:&#10;        Met à jour le statut actuel du streaming et de l'enregistrement&#10;&#10;&#10;            dict: Statut actuel&#10;        &quot;&quot;&quot;&#10;                        {&#10;            self.streaming_active = self.vmix.get_streaming_status()&#10;            self.recording_active = self.vmix.get_recording_status()&#10;&#10;            status = {&#10;                &quot;streaming&quot;: self.streaming_active,&#10;                &quot;recording&quot;: self.recording_active,&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;            logger.info(f&quot;Statut mis à jour - Streaming: {'Actif' if self.streaming_active else 'Inactif'}, &quot;&#10;                       f&quot;Enregistrement: {'Actif' if self.recording_active else 'Inactif'}&quot;)&#10;            return status&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;            return {&#10;                &quot;streaming&quot;: False,&#10;                &quot;recording&quot;: False,&#10;                &quot;error&quot;: str(e),&#10;                &quot;timestamp&quot;: time.time()&#10;            }&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Démarre le streaming&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming()&#10;            if result:&#10;                logger.info(&quot;Streaming démarré avec succès&quot;)&#10;                self.streaming_active = True&#10;&#10;                # Démarrer automatiquement l'enregistrement si configuré&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;                    self.start_recording()&#10;            else:&#10;                logger.error(&quot;Échec du démarrage du streaming&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {e}&quot;)&#10;    def start_streaming(self):&#10;&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;                return True&#10;        Arrête le streaming&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.streaming_active:&#10;                logger.info(&quot;Le streaming est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_streaming(action=&quot;Stop&quot;)&#10;            if result:&#10;                logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;                self.streaming_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_streaming(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.streaming_active:&#10;            return self.stop_streaming()&#10;&#10;            return self.start_streaming()&#10;&#10;&#10;    def stop_streaming(self):&#10;        Démarre l'enregistrement&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            if self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà actif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.start_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;                self.recording_active = True&#10;            else:&#10;                logger.error(&quot;Échec du démarrage de l'enregistrement&quot;)&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met en pause l'enregistrement&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;                return True&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;&#10;            dict: Paramètres de qualité&#10;            bool: True si réussi, False sinon&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_quality_settings(self, settings):&#10;&#10;        Met à jour les paramètres de qualité&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            if result:&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;                            &quot;rtmp_url&quot;: &quot;rtmps://live-api-s.facebook.com:443/rtmp&quot;,&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;                        &quot;format&quot;: &quot;MP4&quot;,&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;                        &quot;fps&quot;: 30,&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;                    }&#10;&#10;    def toggle_recording(self):&#10;                        &quot;fps&quot;: 30,&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;        except Exception as e:&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;            logger.error(f&quot;Erreur lors de la mise à jour du statut: {e}&quot;)&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;                &quot;recording&quot;: False,&#10;            bool: True si réussi, False sinon&#10;                &quot;timestamp&quot;: time.time()&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        except Exception as e:&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if result:&#10;            bool: True si réussi, False sinon&#10;                self.streaming_active = True&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;                if self.config.get(&quot;recording&quot;, {}).get(&quot;auto_record&quot;, False) and not self.recording_active:&#10;&#10;    def load_preset(self, preset_name):&#10;&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;                logger.info(&quot;Le streaming est déjà actif&quot;)&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;&#10;            bool: True si réussi, False sinon&#10;            bool: True si réussi, False sinon&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            if not self.streaming_active:&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;        Bascule l'état du streaming (active/désactive)&#10;&#10;    def update_recording_settings(self, settings):&#10;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;&#10;            settings (dict): Nouveaux paramètres&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            if result:&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;                logger.error(&quot;Échec de l'arrêt du streaming&quot;)&#10;&#10;        Arrête l'enregistrement&#10;&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {e}&quot;)&#10;            bool: True si réussi, False sinon&#10;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;    def start_recording(self):&#10;        Charge un preset vMix pour le streaming&#10;&#10;&#10;            preset_name (str): Nom du preset&#10;&#10;            if self.recording_active:&#10;            bool: True si réussi, False sinon&#10;                return True&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            if result:&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement est déjà inactif&quot;)&#10;                return True&#10;&#10;            result = self.vmix.stop_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;                self.recording_active = False&#10;            else:&#10;                logger.error(&quot;Échec de l'arrêt de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def toggle_recording(self):&#10;        &quot;&quot;&quot;&#10;        Bascule l'état de l'enregistrement (active/désactive)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        if self.recording_active:&#10;            return self.stop_recording()&#10;        else:&#10;            return self.start_recording()&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;&#10;        Met en pause l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if not self.recording_active:&#10;                logger.info(&quot;L'enregistrement n'est pas actif, impossible de mettre en pause&quot;)&#10;                return False&#10;&#10;            result = self.vmix.pause_recording()&#10;            if result:&#10;                logger.info(&quot;Enregistrement mis en pause avec succès&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise en pause de l'enregistrement&quot;)&#10;&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise en pause de l'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_stream_settings(self, platform_name, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'une plateforme de streaming&#10;&#10;        Args:&#10;            platform_name (str): Nom de la plateforme&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Trouver la plateforme dans la configuration&#10;            platform_found = False&#10;            for platform in self.config.get(&quot;platforms&quot;, []):&#10;                if platform[&quot;name&quot;].lower() == platform_name.lower():&#10;                    # Mettre à jour les paramètres&#10;                    for key, value in settings.items():&#10;                        platform[key] = value&#10;                    platform_found = True&#10;                    break&#10;&#10;            if not platform_found:&#10;                # Ajouter une nouvelle plateforme&#10;                platform = {&#10;                    &quot;name&quot;: platform_name,&#10;                    &quot;enabled&quot;: settings.get(&quot;enabled&quot;, True),&#10;                    &quot;rtmp_url&quot;: settings.get(&quot;rtmp_url&quot;, &quot;&quot;),&#10;                    &quot;stream_key&quot;: settings.get(&quot;stream_key&quot;, &quot;&quot;)&#10;                }&#10;                if &quot;platforms&quot; not in self.config:&#10;                    self.config[&quot;platforms&quot;] = []&#10;                self.config[&quot;platforms&quot;].append(platform)&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(f&quot;Paramètres de streaming mis à jour pour {platform_name}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de streaming: {e}&quot;)&#10;            return False&#10;&#10;    def update_recording_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres d'enregistrement&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;recording&quot; not in self.config:&#10;                self.config[&quot;recording&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;recording&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres d'enregistrement mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres d'enregistrement: {e}&quot;)&#10;            return False&#10;&#10;    def update_quality_settings(self, settings):&#10;        &quot;&quot;&quot;&#10;        Met à jour les paramètres de qualité&#10;&#10;        Args:&#10;            settings (dict): Nouveaux paramètres&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            if &quot;quality&quot; not in self.config:&#10;                self.config[&quot;quality&quot;] = {}&#10;&#10;            # Mettre à jour les paramètres&#10;            for key, value in settings.items():&#10;                self.config[&quot;quality&quot;][key] = value&#10;&#10;            # Sauvegarder la configuration&#10;            self.save_config()&#10;            logger.info(&quot;Paramètres de qualité mis à jour&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour des paramètres de qualité: {e}&quot;)&#10;            return False&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Charge un preset vMix pour le streaming&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.load_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;Preset vMix '{preset_name}' chargé avec succès&quot;)&#10;                # Mettre à jour l'état après le chargement du preset&#10;                self.update_status()&#10;            else:&#10;                logger.error(f&quot;Échec du chargement du preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde l'état actuel de vMix comme un preset&#10;&#10;        Args:&#10;            preset_name (str): Nom du preset&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            result = self.vmix.save_preset(preset_name)&#10;            if result:&#10;                logger.info(f&quot;État actuel sauvegardé comme preset vMix '{preset_name}'&quot;)&#10;            else:&#10;                logger.error(f&quot;Échec de la sauvegarde de l'état comme preset vMix '{preset_name}'&quot;)&#10;            return result&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde du preset vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_streaming_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming configurées&#10;&#10;        Returns:&#10;            list: Liste des plateformes&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;platforms&quot;, [])&#10;&#10;    def get_enabled_platforms(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la liste des plateformes de streaming activées&#10;&#10;        Returns:&#10;            list: Liste des plateformes activées&#10;        &quot;&quot;&quot;&#10;        return [p for p in self.config.get(&quot;platforms&quot;, []) if p.get(&quot;enabled&quot;, False)]&#10;&#10;    def get_recording_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres d'enregistrement&#10;&#10;        Returns:&#10;            dict: Paramètres d'enregistrement&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;recording&quot;, {})&#10;&#10;    def get_quality_settings(self):&#10;        &quot;&quot;&quot;&#10;        Récupère les paramètres de qualité&#10;&#10;        Returns:&#10;            dict: Paramètres de qualité&#10;        &quot;&quot;&quot;&#10;        return self.config.get(&quot;quality&quot;, {})&#10;" />
              <option name="updatedContent" value="#fonctionnalités à implémenter :&#10;# -contrôle du streaming, -gestion des configurations de streaming, -enregistrement&#10;# -surveillance de l'état du streaming&#10;&#10;import os&#10;import json&#10;import time&#10;import logging&#10;from v3_0.app.core.vmix_manager import VMixManager&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('stream_manager')&#10;&#10;class StreamManager:&#10;    &quot;&quot;&quot;&#10;    Gestionnaire pour les fonctionnalités de streaming dans vMix&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, vmix_manager=None, data_dir=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire de streaming&#10;&#10;        Args:&#10;            vmix_manager: Instance de VMixManager à utiliser&#10;            data_dir: Répertoire où stocker les configurations de streaming&#10;        &quot;&quot;&quot;&#10;        # Si aucun répertoire n'est spécifié, utiliser le répertoire courant&#10;        if data_dir is None:&#10;            self.data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), &quot;data&quot;)&#10;        else:&#10;            self.data_dir = data_dir&#10;&#10;        # Créer le répertoire s'il n'existe pas&#10;        if not os.path.exists(self.data_dir):&#10;            os.makedirs(self.data_dir)&#10;&#10;        # Fichier JSON pour stocker les configurations de streaming&#10;        self.config_file = os.path.join(self.data_dir, &quot;stream_config.json&quot;)&#10;&#10;        # Utiliser l'instance vmix_manager fournie ou en créer une nouvelle&#10;        self.vmix = vmix_manager if vmix_manager else VMixManager()&#10;&#10;        # Initialiser la configuration par défaut si elle n'existe pas&#10;        if not os.path.exists(self.config_file):&#10;            self._create_default_config()&#10;        &#10;        # État actuel du streaming&#10;        self.streaming_state = {&#10;            'is_streaming': False,&#10;            'is_recording': False,&#10;            'stream_start_time': None,&#10;            'recording_start_time': None&#10;        }&#10;        &#10;        # Charger la configuration&#10;        self.config = self.load_config()&#10;        &#10;        # Vérifier l'état initial du streaming&#10;        self._update_streaming_state()&#10;&#10;    def _create_default_config(self):&#10;        &quot;&quot;&quot;Crée une configuration de streaming par défaut&quot;&quot;&quot;&#10;        default_config = {&#10;            'title': '',&#10;            'service': 'custom',&#10;            'quality': '1080p30',&#10;            'rtmpUrl': '',&#10;            'streamKey': '',&#10;            'description': '',&#10;            'autoStartRecording': False,&#10;            'autoStartStreaming': False,&#10;            'thumbnailUrl': None&#10;        }&#10;        &#10;        with open(self.config_file, 'w') as f:&#10;            json.dump(default_config, f, indent=2)&#10;    &#10;    def load_config(self):&#10;        &quot;&quot;&quot;Charge la configuration du streaming depuis le fichier&quot;&quot;&quot;&#10;        try:&#10;            with open(self.config_file, 'r') as f:&#10;                return json.load(f)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du chargement de la configuration: {str(e)}&quot;)&#10;            return self._create_default_config()&#10;    &#10;    def save_config(self, config):&#10;        &quot;&quot;&quot;Sauvegarde la configuration du streaming&quot;&quot;&quot;&#10;        try:&#10;            with open(self.config_file, 'w') as f:&#10;                json.dump(config, f, indent=2)&#10;            self.config = config&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la sauvegarde de la configuration: {str(e)}&quot;)&#10;            return False&#10;    &#10;    def _update_streaming_state(self):&#10;        &quot;&quot;&quot;Met à jour l'état actuel du streaming depuis vMix&quot;&quot;&quot;&#10;        if self.vmix.check_connection():&#10;            streaming_status = self.vmix.get_streaming_status()&#10;            recording_status = self.vmix.get_recording_status()&#10;            &#10;            # Mettre à jour l'état du streaming&#10;            if streaming_status and not self.streaming_state['is_streaming']:&#10;                self.streaming_state['is_streaming'] = True&#10;                self.streaming_state['stream_start_time'] = time.time()&#10;            elif not streaming_status:&#10;                self.streaming_state['is_streaming'] = False&#10;                self.streaming_state['stream_start_time'] = None&#10;            &#10;            # Mettre à jour l'état de l'enregistrement&#10;            if recording_status and not self.streaming_state['is_recording']:&#10;                self.streaming_state['is_recording'] = True&#10;                self.streaming_state['recording_start_time'] = time.time()&#10;            elif not recording_status:&#10;                self.streaming_state['is_recording'] = False&#10;                self.streaming_state['recording_start_time'] = None&#10;    &#10;    def get_streaming_state(self):&#10;        &quot;&quot;&quot;&#10;        Récupère l'état actuel du streaming&#10;        &#10;        Returns:&#10;            dict: État actuel du streaming avec les durées&#10;        &quot;&quot;&quot;&#10;        self._update_streaming_state()&#10;        &#10;        current_time = time.time()&#10;        state = self.streaming_state.copy()&#10;        &#10;        # Calculer les durées&#10;        if state['stream_start_time']:&#10;            state['streaming_duration'] = int(current_time - state['stream_start_time'])&#10;        else:&#10;            state['streaming_duration'] = 0&#10;            &#10;        if state['recording_start_time']:&#10;            state['recording_duration'] = int(current_time - state['recording_start_time'])&#10;        else:&#10;            state['recording_duration'] = 0&#10;            &#10;        return state&#10;    &#10;    def start_streaming(self):&#10;        &quot;&quot;&quot;&#10;        Démarre le streaming dans vMix&#10;        &#10;        Returns:&#10;            bool: True si le streaming a démarré avec succès&#10;        &quot;&quot;&quot;&#10;        if not self.vmix.check_connection():&#10;            logger.error(&quot;Impossible de démarrer le streaming : vMix non connecté&quot;)&#10;            return False&#10;            &#10;        success = self.vmix.start_streaming()&#10;        if success:&#10;            self.streaming_state['is_streaming'] = True&#10;            self.streaming_state['stream_start_time'] = time.time()&#10;            logger.info(&quot;Streaming démarré avec succès&quot;)&#10;        return success&#10;    &#10;    def stop_streaming(self):&#10;        &quot;&quot;&quot;&#10;        Arrête le streaming dans vMix&#10;        &#10;        Returns:&#10;            bool: True si le streaming a été arrêté avec succès&#10;        &quot;&quot;&quot;&#10;        if not self.vmix.check_connection():&#10;            logger.error(&quot;Impossible d'arrêter le streaming : vMix non connecté&quot;)&#10;            return False&#10;            &#10;        success = self.vmix.start_streaming(&quot;Stop&quot;)  # La méthode accepte &quot;Stop&quot; comme paramètre&#10;        if success:&#10;            self.streaming_state['is_streaming'] = False&#10;            self.streaming_state['stream_start_time'] = None&#10;            logger.info(&quot;Streaming arrêté avec succès&quot;)&#10;        return success&#10;    &#10;    def start_recording(self):&#10;        &quot;&quot;&quot;&#10;        Démarre l'enregistrement dans vMix&#10;        &#10;        Returns:&#10;            bool: True si l'enregistrement a démarré avec succès&#10;        &quot;&quot;&quot;&#10;        if not self.vmix.check_connection():&#10;            logger.error(&quot;Impossible de démarrer l'enregistrement : vMix non connecté&quot;)&#10;            return False&#10;            &#10;        success = self.vmix.start_recording()&#10;        if success:&#10;            self.streaming_state['is_recording'] = True&#10;            self.streaming_state['recording_start_time'] = time.time()&#10;            logger.info(&quot;Enregistrement démarré avec succès&quot;)&#10;        return success&#10;    &#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement dans vMix&#10;        &#10;        Returns:&#10;            bool: True si l'enregistrement a été arrêté avec succès&#10;        &quot;&quot;&quot;&#10;        if not self.vmix.check_connection():&#10;            logger.error(&quot;Impossible d'arrêter l'enregistrement : vMix non connecté&quot;)&#10;            return False&#10;            &#10;        success = self.vmix.stop_recording()&#10;        if success:&#10;            self.streaming_state['is_recording'] = False&#10;            self.streaming_state['recording_start_time'] = None&#10;            logger.info(&quot;Enregistrement arrêté avec succès&quot;)&#10;        return success&#10;    &#10;    def toggle_thumbnail(self, show=True, input_name=&quot;Thumbnail&quot;, overlay_number=1):&#10;        &quot;&quot;&quot;&#10;        Active ou désactive la miniature du match&#10;        &#10;        Args:&#10;            show (bool): True pour afficher, False pour masquer&#10;            input_name (str): Nom de l'input de la miniature dans vMix&#10;            overlay_number (int): Numéro de l'overlay à utiliser&#10;        &#10;        Returns:&#10;            bool: True si l'opération a réussi&#10;        &quot;&quot;&quot;&#10;        if not self.vmix.check_connection():&#10;            logger.error(&quot;Impossible de gérer la miniature : vMix non connecté&quot;)&#10;            return False&#10;        &#10;        success = self.vmix.set_overlay(input_name, overlay_number, show)&#10;        if success:&#10;            logger.info(f&quot;Miniature {'activée' if show else 'désactivée'} avec succès&quot;)&#10;        return success" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/team_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/team_manager.py" />
              <option name="originalContent" value="#fonctionnalités à implémenter :&#10;# -structurer les données des équipes, -opérations cRUD ?&#10;# -persistance des équipes&#10;&#10;import json&#10;import os&#10;import csv&#10;import uuid&#10;import logging&#10;from werkzeug.utils import secure_filename&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('team_manager')&#10;&#10;class TeamManager:&#10;    def __init__(self, vmix_manager=None, data_dir=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire d'équipes&#10;&#10;        Args:&#10;            vmix_manager: Instance de VMixManager à utiliser&#10;            data_dir: Répertoire pour les données persistantes&#10;        &quot;&quot;&quot;&#10;        # Configuration des chemins&#10;        self.base_dir = os.path.abspath(os.path.dirname(__file__))&#10;        self.data_dir = data_dir or os.path.join(self.base_dir, '..', 'data')&#10;        self.teams_file = os.path.join(self.data_dir, 'teams.json')&#10;        self.logos_dir = os.path.join(self.data_dir, 'team_logos')&#10;        self.vmix_manager = vmix_manager&#10;&#10;        # Créer les répertoires s'ils n'existent pas&#10;        os.makedirs(self.data_dir, exist_ok=True)&#10;        os.makedirs(self.logos_dir, exist_ok=True)&#10;&#10;        # Initialiser le fichier des équipes s'il n'existe pas&#10;        if not os.path.exists(self.teams_file):&#10;            with open(self.teams_file, 'w') as f:&#10;                json.dump([], f)&#10;&#10;        # Configuration de match actuelle&#10;        self.current_match = {&#10;            'team_a': None,&#10;            'team_b': None&#10;        }&#10;&#10;    def get_all_teams(self):&#10;        &quot;&quot;&quot;&#10;        Récupère toutes les équipes enregistrées&#10;&#10;        Returns:&#10;            list: Liste des équipes&#10;        &quot;&quot;&quot;&#10;        try:&#10;            with open(self.teams_file, 'r') as f:&#10;                return json.load(f)&#10;        except (json.JSONDecodeError, FileNotFoundError):&#10;            logger.error(&quot;Erreur lors de la lecture du fichier teams.json&quot;)&#10;            return []&#10;&#10;    def get_team(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Récupère une équipe spécifique par son ID&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            dict: Données de l'équipe ou None si non trouvée&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        for team in teams:&#10;            if team['id'] == team_id:&#10;                return team&#10;        return None&#10;&#10;    def create_team(self, name, logo=None, players=None):&#10;        &quot;&quot;&quot;&#10;        Crée une nouvelle équipe&#10;&#10;        Args:&#10;            name: Nom de l'équipe&#10;            logo: Chemin vers le logo de l'équipe&#10;            players: Liste des joueurs&#10;&#10;        Returns:&#10;            str: ID de l'équipe créée&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        team_id = str(uuid.uuid4())&#10;&#10;        new_team = {&#10;            'id': team_id,&#10;            'name': name,&#10;            'logo': logo,&#10;            'players': players or []&#10;        }&#10;&#10;        teams.append(new_team)&#10;&#10;        try:&#10;            with open(self.teams_file, 'w') as f:&#10;                json.dump(teams, f, indent=2)&#10;            logger.info(f&quot;Équipe créée avec succès: {name}&quot;)&#10;            return team_id&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la création de l'équipe: {str(e)}&quot;)&#10;            return None&#10;&#10;    def update_team(self, team_id, name=None, logo=None, players=None):&#10;        &quot;&quot;&quot;&#10;        Met à jour une équipe existante&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;            name: Nouveau nom de l'équipe (optionnel)&#10;            logo: Nouveau logo de l'équipe (optionnel)&#10;            players: Nouvelle liste de joueurs (optionnel)&#10;&#10;        Returns:&#10;            bool: True si mise à jour réussie, False sinon&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        for i, team in enumerate(teams):&#10;            if team['id'] == team_id:&#10;                if name:&#10;                    team['name'] = name&#10;                if logo:&#10;                    team['logo'] = logo&#10;                if players:&#10;                    team['players'] = players&#10;&#10;                try:&#10;                    with open(self.teams_file, 'w') as f:&#10;                        json.dump(teams, f, indent=2)&#10;                    logger.info(f&quot;Équipe mise à jour avec succès: {team['name']}&quot;)&#10;                    return True&#10;                except Exception as e:&#10;                    logger.error(f&quot;Erreur lors de la mise à jour de l'équipe: {str(e)}&quot;)&#10;                    return False&#10;&#10;        logger.warning(f&quot;Équipe non trouvée pour mise à jour: {team_id}&quot;)&#10;        return False&#10;&#10;    def delete_team(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Supprime une équipe&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            bool: True si suppression réussie, False sinon&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        team_found = False&#10;&#10;        for i, team in enumerate(teams):&#10;            if team['id'] == team_id:&#10;                # Supprimer le logo si nécessaire&#10;                if team.get('logo') and os.path.exists(team['logo']):&#10;                    try:&#10;                        os.remove(team['logo'])&#10;                    except Exception as e:&#10;                        logger.warning(f&quot;Impossible de supprimer le logo: {str(e)}&quot;)&#10;&#10;                teams.pop(i)&#10;                team_found = True&#10;                break&#10;&#10;        if team_found:&#10;            try:&#10;                with open(self.teams_file, 'w') as f:&#10;                    json.dump(teams, f, indent=2)&#10;                logger.info(f&quot;Équipe supprimée avec succès: {team_id}&quot;)&#10;                return True&#10;            except Exception as e:&#10;                logger.error(f&quot;Erreur lors de la suppression de l'équipe: {str(e)}&quot;)&#10;                return False&#10;&#10;        logger.warning(f&quot;Équipe non trouvée pour suppression: {team_id}&quot;)&#10;        return False&#10;&#10;    def get_team_players(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Récupère les joueurs d'une équipe&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            list: Liste des joueurs de l'équipe ou None si équipe non trouvée&#10;        &quot;&quot;&quot;&#10;        team = self.get_team(team_id)&#10;        if team:&#10;            return team.get('players', [])&#10;        return None&#10;&#10;    def save_team_logo(self, logo_file):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde le logo d'une équipe&#10;&#10;        Args:&#10;            logo_file: Fichier logo uploadé&#10;&#10;        Returns:&#10;            str: Chemin vers le fichier sauvegardé&#10;        &quot;&quot;&quot;&#10;        if not logo_file:&#10;            return None&#10;&#10;        # Sécuriser le nom de fichier&#10;        filename = secure_filename(logo_file.filename)&#10;        # Ajouter un identifiant unique pour éviter les collisions&#10;        unique_filename = f&quot;{uuid.uuid4()}_{filename}&quot;&#10;        # Chemin complet&#10;        filepath = os.path.join(self.logos_dir, unique_filename)&#10;&#10;        # Enregistrer le fichier&#10;        try:&#10;            logo_file.save(filepath)&#10;            logger.info(f&quot;Logo enregistré avec succès: {filepath}&quot;)&#10;            return filepath&#10;" />
              <option name="updatedContent" value="#fonctionnalités à implémenter :&#10;# -structurer les données des équipes, -opérations cRUD ?&#10;# -persistance des équipes&#10;&#10;import json&#10;import os&#10;import csv&#10;import uuid&#10;import logging&#10;from werkzeug.utils import secure_filename&#10;&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('team_manager')&#10;&#10;class TeamManager:&#10;    def __init__(self, vmix_manager=None, data_dir=None):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire d'équipes&#10;&#10;        Args:&#10;            vmix_manager: Instance de VMixManager à utiliser&#10;            data_dir: Répertoire pour les données persistantes&#10;        &quot;&quot;&quot;&#10;        # Configuration des chemins&#10;        self.base_dir = os.path.abspath(os.path.dirname(__file__))&#10;        self.data_dir = data_dir or os.path.join(self.base_dir, '..', 'data')&#10;        self.teams_file = os.path.join(self.data_dir, 'teams.json')&#10;        self.logos_dir = os.path.join(self.data_dir, 'team_logos')&#10;        self.vmix_manager = vmix_manager&#10;&#10;        # Créer les répertoires s'ils n'existent pas&#10;        os.makedirs(self.data_dir, exist_ok=True)&#10;        os.makedirs(self.logos_dir, exist_ok=True)&#10;&#10;        # Initialiser le fichier des équipes s'il n'existe pas&#10;        if not os.path.exists(self.teams_file):&#10;            with open(self.teams_file, 'w') as f:&#10;                json.dump([], f)&#10;&#10;        # Configuration de match actuelle&#10;        self.current_match = {&#10;            'team_a': None,&#10;            'team_b': None&#10;        }&#10;&#10;    def get_all_teams(self):&#10;        &quot;&quot;&quot;&#10;        Récupère toutes les équipes enregistrées&#10;&#10;        Returns:&#10;            list: Liste des équipes&#10;        &quot;&quot;&quot;&#10;        try:&#10;            with open(self.teams_file, 'r') as f:&#10;                return json.load(f)&#10;        except (json.JSONDecodeError, FileNotFoundError):&#10;            logger.error(&quot;Erreur lors de la lecture du fichier teams.json&quot;)&#10;            return []&#10;&#10;    def get_team(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Récupère une équipe spécifique par son ID&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            dict: Données de l'équipe ou None si non trouvée&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        for team in teams:&#10;            if team['id'] == team_id:&#10;                return team&#10;        return None&#10;&#10;    def create_team(self, name, logo=None, players=None):&#10;        &quot;&quot;&quot;&#10;        Crée une nouvelle équipe&#10;&#10;        Args:&#10;            name: Nom de l'équipe&#10;            logo: Chemin vers le logo de l'équipe&#10;            players: Liste des joueurs&#10;&#10;        Returns:&#10;            str: ID de l'équipe créée&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        team_id = str(uuid.uuid4())&#10;&#10;        new_team = {&#10;            'id': team_id,&#10;            'name': name,&#10;            'logo': logo,&#10;            'players': players or []&#10;        }&#10;&#10;        teams.append(new_team)&#10;&#10;        try:&#10;            with open(self.teams_file, 'w') as f:&#10;                json.dump(teams, f, indent=4)&#10;            logger.info(f&quot;Équipe '{name}' créée avec succès (ID: {team_id})&quot;)&#10;            return team_id&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la création de l'équipe '{name}': {e}&quot;)&#10;            return None&#10;&#10;    def update_team(self, team_id, name=None, logo=None, players=None):&#10;        &quot;&quot;&quot;&#10;        Met à jour une équipe existante&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;            name: Nouveau nom de l'équipe (optionnel)&#10;            logo: Nouveau logo de l'équipe (optionnel)&#10;            players: Nouvelle liste de joueurs (optionnel)&#10;&#10;        Returns:&#10;            bool: True si mise à jour réussie, False sinon&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        for i, team in enumerate(teams):&#10;            if team['id'] == team_id:&#10;                if name:&#10;                    team['name'] = name&#10;                if logo:&#10;                    team['logo'] = logo&#10;                if players:&#10;                    team['players'] = players&#10;&#10;                try:&#10;                    with open(self.teams_file, 'w') as f:&#10;                        json.dump(teams, f, indent=2)&#10;                    logger.info(f&quot;Équipe mise à jour avec succès: {team['name']}&quot;)&#10;                    return True&#10;                except Exception as e:&#10;                    logger.error(f&quot;Erreur lors de la mise à jour de l'équipe: {str(e)}&quot;)&#10;                    return False&#10;&#10;        logger.warning(f&quot;Équipe non trouvée pour mise à jour: {team_id}&quot;)&#10;        return False&#10;&#10;    def delete_team(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Supprime une équipe&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            bool: True si suppression réussie, False sinon&#10;        &quot;&quot;&quot;&#10;        teams = self.get_all_teams()&#10;        team_found = False&#10;&#10;        for i, team in enumerate(teams):&#10;            if team['id'] == team_id:&#10;                # Supprimer le logo si nécessaire&#10;                if team.get('logo') and os.path.exists(team['logo']):&#10;                    try:&#10;                        os.remove(team['logo'])&#10;                    except Exception as e:&#10;                        logger.warning(f&quot;Impossible de supprimer le logo: {str(e)}&quot;)&#10;&#10;                teams.pop(i)&#10;                team_found = True&#10;                break&#10;&#10;        if team_found:&#10;            try:&#10;                with open(self.teams_file, 'w') as f:&#10;                    json.dump(teams, f, indent=2)&#10;                logger.info(f&quot;Équipe supprimée avec succès: {team_id}&quot;)&#10;                return True&#10;            except Exception as e:&#10;                logger.error(f&quot;Erreur lors de la suppression de l'équipe: {str(e)}&quot;)&#10;                return False&#10;&#10;        logger.warning(f&quot;Équipe non trouvée pour suppression: {team_id}&quot;)&#10;        return False&#10;&#10;    def get_team_players(self, team_id):&#10;        &quot;&quot;&quot;&#10;        Récupère les joueurs d'une équipe&#10;&#10;        Args:&#10;            team_id: ID de l'équipe&#10;&#10;        Returns:&#10;            list: Liste des joueurs de l'équipe ou None si équipe non trouvée&#10;        &quot;&quot;&quot;&#10;        team = self.get_team(team_id)&#10;        if team:&#10;            return team.get('players', [])&#10;        return None&#10;&#10;    def save_team_logo(self, logo_file):&#10;        &quot;&quot;&quot;&#10;        Sauvegarde le logo d'une équipe&#10;&#10;        Args:&#10;            logo_file: Fichier logo uploadé&#10;&#10;        Returns:&#10;            str: Chemin vers le fichier sauvegardé&#10;        &quot;&quot;&quot;&#10;        if not logo_file:&#10;            return None&#10;&#10;        # Sécuriser le nom de fichier&#10;        filename = secure_filename(logo_file.filename)&#10;        # Ajouter un identifiant unique pour éviter les collisions&#10;        unique_filename = f&quot;{uuid.uuid4()}_{filename}&quot;&#10;        # Chemin complet&#10;        filepath = os.path.join(self.logos_dir, unique_filename)&#10;&#10;        # Enregistrer le fichier&#10;        try:&#10;            logo_file.save(filepath)&#10;            logger.info(f&quot;Logo enregistré avec succès: {filepath}&quot;)&#10;&#10;            # Créer un lien symbolique vers le dossier static si nécessaire&#10;            static_logos_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static', 'media', 'team_logos')&#10;            os.makedirs(static_logos_dir, exist_ok=True)&#10;&#10;            # Copier le fichier dans le dossier static&#10;            import shutil&#10;            static_filepath = os.path.join(static_logos_dir, unique_filename)&#10;            shutil.copy2(filepath, static_filepath)&#10;&#10;            # Retourner le chemin relatif pour l'URL&#10;            return f&quot;/static/media/team_logos/{unique_filename}&quot;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'enregistrement du logo: {str(e)}&quot;)&#10;            return None&#10;&#10;    def parse_players_csv(self, csv_file):&#10;        &quot;&quot;&quot;&#10;        Parse un fichier CSV pour obtenir la liste des joueurs&#10;&#10;        Args:&#10;            csv_file: Fichier CSV uploadé&#10;&#10;        Returns:&#10;            list: Liste des joueurs&#10;        &quot;&quot;&quot;&#10;        if not csv_file:&#10;            return []&#10;&#10;        players = []&#10;        try:&#10;            # Lire le contenu du fichier&#10;            content = csv_file.read().decode('utf-8')&#10;&#10;            # Créer un lecteur CSV&#10;            csv_reader = csv.reader(content.splitlines(), delimiter=',')&#10;&#10;            # Parser les lignes&#10;            header = next(csv_reader, None)&#10;            if header:&#10;                # Déterminer les indices des colonnes&#10;                indices = {&#10;                    'numero': header.index('numero') if 'numero' in header else None,&#10;                    'nom': header.index('nom') if 'nom' in header else None,&#10;                    'prenom': header.index('prenom') if 'prenom' in header else None,&#10;                    'position': header.index('position') if 'position' in header else None,&#10;                    'taille': header.index('taille') if 'taille' in header else None,&#10;                    'date_naissance': header.index('date_naissance') if 'date_naissance' in header else None&#10;                }&#10;&#10;                # Si aucun en-tête n'est trouvé, utiliser l'ordre par défaut&#10;                if all(idx is None for idx in indices.values()):&#10;                    indices = {&#10;                        'numero': 0,&#10;                        'nom': 1,&#10;                        'prenom': 2,&#10;                        'position': 3,&#10;                        'taille': 4,&#10;                        'date_naissance': 5&#10;                    }&#10;            else:&#10;                # Si aucun en-tête n'est trouvé, utiliser l'ordre par défaut&#10;                indices = {&#10;                    'numero': 0,&#10;                    'nom': 1,&#10;                    'prenom': 2,&#10;                    'position': 3,&#10;                    'taille': 4,&#10;                    'date_naissance': 5&#10;                }&#10;                # Réinitialiser le fichier pour le relire&#10;                csv_file.seek(0)&#10;                content = csv_file.read().decode('utf-8')&#10;                csv_reader = csv.reader(content.splitlines(), delimiter=',')&#10;&#10;            # Parser les joueurs&#10;            for row in csv_reader:&#10;                if len(row) &gt;= 3:  # Au moins numéro, nom, prénom&#10;                    player = {}&#10;&#10;                    for field, idx in indices.items():&#10;                        if idx is not None and idx &lt; len(row):&#10;                            player[field] = row[idx]&#10;&#10;                    players.append(player)&#10;&#10;            logger.info(f&quot;Fichier CSV parsé avec succès: {len(players)} joueurs trouvés&quot;)&#10;            return players&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du parsing du fichier CSV: {str(e)}&quot;)&#10;            return []&#10;&#10;    def set_match_teams(self, team_a_id, team_b_id):&#10;        &quot;&quot;&quot;&#10;        Configure les équipes pour le match actuel&#10;&#10;        Args:&#10;            team_a_id: ID de l'équipe A&#10;            team_b_id: ID de l'équipe B&#10;&#10;        Returns:&#10;            bool: True si configuration réussie, False sinon&#10;        &quot;&quot;&quot;&#10;        team_a = self.get_team(team_a_id)&#10;        team_b = self.get_team(team_b_id)&#10;&#10;        if not team_a or not team_b:&#10;            logger.error(&quot;Équipes non trouvées pour la configuration du match&quot;)&#10;            return False&#10;&#10;        self.current_match = {&#10;            'team_a': team_a,&#10;            'team_b': team_b&#10;        }&#10;&#10;        # Enregistrer la configuration dans un fichier&#10;        match_config_file = os.path.join(self.data_dir, 'current_match.json')&#10;        try:&#10;            with open(match_config_file, 'w') as f:&#10;                json.dump(self.current_match, f, indent=2)&#10;            logger.info(f&quot;Configuration du match enregistrée: {team_a['name']} vs {team_b['name']}&quot;)&#10;            return True&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'enregistrement de la configuration du match: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_current_match(self):&#10;        &quot;&quot;&quot;&#10;        Récupère la configuration du match actuel&#10;&#10;        Returns:&#10;            dict: Configuration du match actuel&#10;        &quot;&quot;&quot;&#10;        # Essayer de charger depuis le fichier si nécessaire&#10;        if not self.current_match['team_a'] or not self.current_match['team_b']:&#10;            match_config_file = os.path.join(self.data_dir, 'current_match.json')&#10;            if os.path.exists(match_config_file):&#10;                try:&#10;                    with open(match_config_file, 'r') as f:&#10;                        self.current_match = json.load(f)&#10;                except Exception as e:&#10;                    logger.error(f&quot;Erreur lors du chargement de la configuration du match: {str(e)}&quot;)&#10;&#10;        return self.current_match" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/core/vmix_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/core/vmix_manager.py" />
              <option name="originalContent" value="#fonctionnalités à implémenter :&#10;# -connexion vmix, -status de la connexion (websocket), -gestion des inputs (add, switch de cam, mute micros, replay)&#10;# -gestion des overlays (-thumbnail, -liste équipe, -detail joueur, -score, -pub/sponsors)&#10;&#10;import requests&#10;from requests import RequestException&#10;from urllib.parse import urljoin # this import is used to construct URLs correctly&#10;import xml.etree.ElementTree as ET #todo source de cet import&#10;import logging&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO,&#10;                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('vmix_manager')&#10;&#10;&#10;#var global&#10;#host = '127.0.0.1'&#10;#port = 8088&#10;&#10;class VMixManager:&#10;    def __init__(self, host='127.0.0.1', port=8088):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire vMix&#10;&#10;        Args:&#10;            host: Adresse IP du serveur vMix&#10;            port: Port du serveur vMix&#10;        &quot;&quot;&quot;&#10;        self.host = host&#10;        self.port = port&#10;        self.base_url = f&quot;http://{host}:{port}/api/&quot;&#10;        logger.info(f&quot;VMixManager initialized with base URL: {self.base_url}&quot;)&#10;&#10;    def check_connection(self):&#10;        &quot;&quot;&quot;Vérifie la connexion à vMix&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException:&#10;            logger.error(&quot;Failed to connect to vMix&quot;)&#10;            return False&#10;&#10;    def get_inputs(self):&#10;        &quot;&quot;&quot;Récupère la liste des inputs disponibles dans vMix&quot;&quot;&quot;&#10;        try:&#10;            logger.info(&quot;Récupération des entrées vMix&quot;)&#10;&#10;            # Utilisation de l'API de base vMix sans spécifier de fonction particulière&#10;            # Cela renvoie l'état complet de vMix en XML&#10;            url = f&quot;http://{self.host}:{self.port}/api/&quot;&#10;            logger.info(f&quot;URL de requête: {url}&quot;)&#10;&#10;            response = requests.get(url, timeout=5)&#10;            logger.info(f&quot;Code de réponse: {response.status_code}&quot;)&#10;&#10;            if response.status_code == 200:&#10;                try:&#10;                    # Analyser la réponse XML&#10;                    root = ET.fromstring(response.text)&#10;                    inputs = []&#10;&#10;                    # Dans l'API vMix standard, les inputs sont directement sous le nœud racine &quot;vmix/inputs&quot;&#10;                    for input_elem in root.findall('./inputs/input'):&#10;                        # Récupérer les attributs avec gestion des valeurs par défaut&#10;                        input_number = input_elem.get('number', '')&#10;                        title = input_elem.get('title', '')&#10;&#10;                        # Le type est parfois stocké comme attribut, parfois comme élément enfant&#10;                        input_type = input_elem.get('type', '')&#10;                        state = input_elem.get('state', '')&#10;&#10;                        if not title:&#10;                            title = f&quot;Input {input_number}&quot;&#10;&#10;                        logger.info(f&quot;Input détecté - Numéro: {input_number}, Titre: {title}, Type: {input_type}&quot;)&#10;&#10;                        # Déterminer la catégorie de l'input&#10;                        category = self._determine_input_category(input_type, title)&#10;&#10;                        input_data = {&#10;                            'id': input_number,&#10;                            'number': input_number,&#10;                            'name': title,&#10;                            'title': title,&#10;                            'type': input_type,&#10;                            'state': state,&#10;                            'category': category&#10;                        }&#10;                        inputs.append(input_data)&#10;&#10;                    logger.info(f&quot;Récupération réussie: {len(inputs)} entrées trouvées&quot;)&#10;                    return inputs&#10;                except ET.ParseError as xml_err:&#10;                    logger.error(f&quot;Erreur de parsing XML: {str(xml_err)}&quot;)&#10;            else:&#10;                logger.warning(f&quot;Échec de récupération des entrées: code {response.status_code}&quot;)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération des entrées vMix: {str(e)}&quot;, exc_info=True)&#10;&#10;        # Si tout échoue, retourner une liste vide&#10;        logger.warning(&quot;Aucune entrée n'a pu être récupérée, retour d'une liste vide&quot;)&#10;        return []&#10;&#10;    def _determine_input_category(self, input_type, title):&#10;        &quot;&quot;&quot;Détermine la catégorie d'une entrée en fonction de son type et de son titre&quot;&quot;&quot;&#10;        input_type_lower = input_type.lower() if input_type else ''&#10;        title_lower = title.lower() if title else ''&#10;&#10;        # Mots-clés pour détecter les caméras&#10;        camera_keywords = ['camera', 'webcam', 'capture', 'video capture', 'cam', 'caméra', 'webcamera']&#10;&#10;        # Mots-clés pour les vidéos&#10;        video_keywords = ['video', 'movie', 'mp4', 'avi', 'mov', 'film', 'clip', 'vidéo']&#10;&#10;        # Mots-clés pour l'audio&#10;        audio_keywords = ['audio', 'sound', 'mic', 'microphone', 'son', 'micro', 'ambient', 'ambiance']&#10;&#10;        # Vérification des types spéciaux&#10;        if input_type_lower == 'blank' or title_lower == 'blank':&#10;            return 'blank'&#10;&#10;        # Vérification des caméras basée sur le type ou le titre&#10;        if any(cam_type in input_type_lower for cam_type in camera_keywords) or \&#10;           any(cam_type in title_lower for cam_type in camera_keywords):&#10;            return 'camera'&#10;&#10;        # Vérification des vidéos&#10;        if any(vid_type in input_type_lower for vid_type in video_keywords) or \&#10;           any(vid_type in title_lower for vid_type in video_keywords):&#10;            return 'video'&#10;&#10;        # Vérification de l'audio&#10;        if any(audio_type in input_type_lower for audio_type in audio_keywords) or \&#10;           any(audio_type in title_lower for audio_type in audio_keywords):&#10;            return 'audio'&#10;&#10;        # Si aucune correspondance n'est trouvée, retourner une catégorie par défaut&#10;        if 'title' in input_type_lower:&#10;            return 'title'&#10;&#10;        return 'other'&#10;&#10;    def send_roster_to_vmix(self, team_name, players):&#10;        &quot;&quot;&quot;&#10;        Envoie les données d'un roster d'équipe vers vMix&#10;&#10;        Args:&#10;            team_name: Nom de l'équipe&#10;            players: Liste des joueurs&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Exemple d'implémentation - à adapter selon vos besoins&#10;            # Supposons que vous utilisez un input de type &quot;Title&quot; avec un ID spécifique&#10;            title_input = &quot;TeamRoster&quot;  # Nom ou numéro de l'input dans vMix&#10;&#10;            # Construction des données à envoyer&#10;            player_list = &quot;&quot;&#10;            for i, player in enumerate(players):&#10;                player_info = f&quot;{player.get('numero', 'N/A')} - {player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;                player_list += f&quot;{player_info}&lt;br&gt;&quot;&#10;&#10;            # Envoi des données à vMix&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;TeamName&quot;,&#10;                &quot;Value&quot;: team_name&#10;            }&#10;            response1 = requests.get(self.base_url, params=params, timeout=2)&#10;&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerList&quot;,&#10;                &quot;Value&quot;: player_list&#10;            }&#10;            response2 = requests.get(self.base_url, params=params, timeout=2)&#10;&#10;            return response1.status_code == 200 and response2.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error sending roster to vMix: {e}&quot;)&#10;            return False&#10;&#10;    def show_player_details(self, player, team_name=None):&#10;        &quot;&quot;&quot;&#10;        Affiche les détails d'un joueur dans vMix&#10;&#10;        Args:&#10;            player: Dictionnaire contenant les données du joueur&#10;            team_name: Nom de l'équipe (optionnel)&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Exemple d'implémentation - à adapter selon vos besoins&#10;            title_input = &quot;PlayerDetails&quot;  # Nom ou numéro de l'input dans vMix&#10;&#10;            # Envoi des données à vMix&#10;            responses = []&#10;&#10;            # Nom du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerName&quot;,&#10;                &quot;Value&quot;: f&quot;{player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Numéro du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerNumber&quot;,&#10;                &quot;Value&quot;: player.get('numero', 'N/A')&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Position du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;Position&quot;,&#10;                &quot;Value&quot;: player.get('position', 'Non spécifiée')&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Taille du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;Height&quot;,&#10;                &quot;Value&quot;: f&quot;{player.get('taille', 'N/A')} cm&quot; if player.get('taille') else &quot;Non spécifiée&quot;&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Équipe du joueur (si fournie)&#10;            if team_name:&#10;                params = {&#10;                    &quot;Function&quot;: &quot;SetText&quot;,&#10;                    &quot;Input&quot;: title_input,&#10;                    &quot;SelectedName&quot;: &quot;TeamName&quot;,&#10;                    &quot;Value&quot;: team_name&#10;                }&#10;                responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Vérifier que toutes les requêtes ont réussi&#10;            return all(response.status_code == 200 for response in responses)&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error showing player details in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def set_title_text(self, input_name, field_name, value):&#10;        &quot;&quot;&quot;&#10;        Définit le texte d'un champ dans un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_name: Nom du champ&#10;            value: Valeur à définir&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: input_name,&#10;                &quot;SelectedName&quot;: field_name,&#10;                &quot;Value&quot;: value&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error setting title text in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def update_title_multiple(self, input_name, field_values):&#10;        &quot;&quot;&quot;&#10;        Met à jour plusieurs champs dans un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_values: Dictionnaire {nom_champ: valeur}&#10;&#10;        Returns:&#10;            bool: True si toutes les opérations ont réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            results = []&#10;            for field_name, value in field_values.items():&#10;                result = self.set_title_text(input_name, field_name, value)&#10;                results.append(result)&#10;&#10;            return all(results)&#10;        except Exception as e:&#10;            logger.error(f&quot;Error updating multiple fields in vMix title: {e}&quot;)&#10;            return False&#10;&#10;    def set_image(self, input_name, field_name, image_path):&#10;        &quot;&quot;&quot;&#10;        Définit une image dans un champ d'un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_name: Nom du champ&#10;            image_path: Chemin vers l'image&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetImage&quot;,&#10;                &quot;Input&quot;: input_name,&#10;                &quot;SelectedName&quot;: field_name,&#10;                &quot;Value&quot;: image_path&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error setting image in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def send_command(self, function, **params):&#10;        &quot;&quot;&quot;&#10;        Envoie une commande à l'API vMix&#10;&#10;        Args:&#10;            function (str): Nom de la fonction vMix à appeler&#10;            **params: Paramètres additionnels à passer à la fonction&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        # Construire l'URL de la commande&#10;        url = self.base_url + f&quot;?Function={function}&quot;&#10;&#10;        # Ajouter les paramètres à l'URL&#10;        for key, value in params.items():&#10;            url += f&quot;&amp;{key}={value}&quot;&#10;&#10;        try:&#10;            logger.info(f&quot;Envoi commande vMix: {function} avec paramètres: {params}&quot;)&#10;            response = requests.get(url, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(&quot;Commande exécutée avec succès&quot;)&#10;                return True&#10;            else:&#10;                logger.warning(f&quot;Échec de la commande: code {response.status_code}&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'envoi de la commande: {str(e)}&quot;)&#10;            return False&#10;&#10;    ######### title cmd #########&#10;&#10;    def set_title_text(self, input_id, field_name, text):&#10;        &quot;&quot;&quot;&#10;        Met à jour un champ texte d'un titre vMix&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_name (str): Le nom du champ à mettre à jour&#10;            text (str): Le texte à insérer dans le champ&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Construire les paramètres pour la fonction SetText&#10;            params = {&#10;                'Function': 'SetText',&#10;                'Input': input_id,&#10;                'SelectedName': field_name,&#10;                'Value': text&#10;            }&#10;&#10;            # Envoyer la requête à l'API vMix&#10;            url = self.base_url&#10;            response = requests.get(url, params=params, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(f&quot;Texte mis à jour: Input={input_id}, Champ={field_name}, Valeur={text}&quot;)&#10;                return True&#10;            else:&#10;                logger.error(f&quot;Échec de mise à jour du texte: {response.status_code}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du texte: {e}&quot;)&#10;            return False&#10;&#10;    def update_title_multiple(self, input_id, field_values):&#10;        &quot;&quot;&quot;&#10;        Met à jour plusieurs champs d'un titre vMix en une seule fois&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_values (dict): Dictionnaire de paires {nom_champ: valeur}&#10;&#10;        Returns:&#10;            bool: True si toutes les mises à jour ont réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        success = True&#10;        for field_name, value in field_values.items():&#10;            result = self.set_title_text(input_id, field_name, str(value))&#10;            if not result:&#10;                success = False&#10;                logger.error(f&quot;Échec de mise à jour pour le champ {field_name}&quot;)&#10;        return success&#10;&#10;    def update_scoreboard(self, team_a_name, team_b_name, score_a, score_b, sets_a, sets_b, title_input=&quot;Scoreboard&quot;):&#10;        &quot;&quot;&quot;&#10;        Met à jour le scoreboard dans vMix avec les informations du match&#10;&#10;        Args:&#10;            team_a_name: Nom de l'équipe A&#10;            team_b_name: Nom de l'équipe B&#10;            score_a: Score de l'équipe A&#10;            score_b: Score de l'équipe B&#10;            sets_a: Sets gagnés par l'équipe A&#10;            sets_b: Sets gagnés par l'équipe B&#10;            title_input: Nom ou ID de l'input du scoreboard dans vMix&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Nettoyage et validation des scores&#10;            score_a_str = '0' if not str(score_a).strip() or str(score_a).strip() == '-' else str(score_a)&#10;            score_b_str = '0' if not str(score_b).strip() or str(score_b).strip() == '-' else str(score_b)&#10;            sets_a_str = '0' if not str(sets_a).strip() or str(sets_a).strip() == '-' else str(sets_a)&#10;            sets_b_str = '0' if not str(sets_b).strip() or str(sets_b).strip() == '-' else str(sets_b)&#10;&#10;            # Construction des URLs pour mettre à jour les scores et sets, exactement comme dans v1_0&#10;            score_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=txtScoreTeamA.Text&amp;Value={score_a_str}'&#10;            score_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=txtScoreTeamB.Text&amp;Value={score_b_str}'&#10;            sets_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=txtSetTeamA.Text&amp;Value={sets_a_str}'&#10;            sets_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=txtSetTeamB.Text&amp;Value={sets_b_str}'&#10;&#10;            # Mettre à jour les noms d'équipes si fournis&#10;            team_a_url = None&#10;            team_b_url = None&#10;            if team_a_name:&#10;                team_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=teamNameA&amp;Value={team_a_name}'&#10;            if team_b_name:&#10;                team_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=teamNameB&amp;Value={team_b_name}'&#10;&#10;            # Envoi des requêtes à vMix, exactement comme dans v1_0&#10;            logger.info(f&quot;Mise à jour du score dans vMix: {score_a_str}-{score_b_str} Sets: {sets_a_str}-{sets_b_str}&quot;)&#10;&#10;            requests.get(score_a_url, timeout=3)&#10;            requests.get(score_b_url, timeout=3)&#10;            requests.get(sets_a_url, timeout=3)&#10;            requests.get(sets_b_url, timeout=3)&#10;&#10;            # Mise à jour des noms d'équipes si spécifiés&#10;            if team_a_url:&#10;                requests.get(team_a_url, timeout=3)&#10;            if team_b_url:&#10;                requests.get(team_b_url, timeout=3)&#10;&#10;            logger.info(f&quot;Scoreboard mis à jour avec succès: {team_a_name} {score_a_str}-{score_b_str} {team_b_name}, sets: {sets_a_str}-{sets_b_str}&quot;)&#10;            return True&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du scoreboard: {str(e)}&quot;)&#10;            return False&#10;&#10;    def set_image(self, input_id, field_name, image_path):&#10;        &quot;&quot;&quot;&#10;        Met à jour un champ image d'un titre vMix&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_name (str): Le nom du champ à mettre à jour&#10;            image_path (str): Le chemin vers l'image à utiliser&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Construire les paramètres pour la fonction SetImage&#10;            params = {&#10;                'Function': 'SetImage',&#10;                'Input': input_id,&#10;                'SelectedName': field_name,&#10;                'Value': image_path&#10;            }&#10;&#10;            # Envoyer la requête à l'API vMix&#10;            url = self.base_url&#10;            response = requests.get(url, params=params, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(f&quot;Image mise à jour: Input={input_id}, Champ={field_name}, Image={image_path}&quot;)&#10;                return True&#10;            else:&#10;                logger.error(f&quot;Échec de mise à jour de l'image: {response.status_code}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour de l'image: {e}&quot;)&#10;            return False&#10;&#10;    def find_title_input_by_name(self, name_pattern):&#10;        &quot;&quot;&quot;&#10;        Trouve un input de type titre par son nom (recherche partielle)&#10;&#10;        Args:&#10;            name_pattern (str): Motif à rechercher dans le nom de l'input&#10;&#10;        Returns:&#10;            str: ID de l'input trouvé ou None si non trouvé&#10;        &quot;&quot;&quot;&#10;        inputs = self.get_inputs()&#10;        for input_item in inputs:&#10;            if ('title' in input_item.get('type', '').lower() or 'gt' in input_item.get('type', '').lower()) and \&#10;               name_pattern.lower() in input_item.get('name', '').lower():&#10;                return input_item['id']&#10;        return None&#10;&#10;    def start_streaming(self, channel=0):&#10;        &quot;&quot;&quot;&#10;        Démarre le streaming sur un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (0 = tous les canaux, 1-5 = canal spécifique)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Démarrage du streaming sur le canal {channel if channel else 'par défaut'}&quot;)&#10;        try:&#10;            # Si un canal spécifique est demandé (1-5)&#10;            if 1 &lt;= channel &lt;= 5:&#10;                response = requests.get(f&quot;{self.base_url}?Function=StartStreaming&amp;Value={channel}&quot;, timeout=3)&#10;            else:&#10;                # Utiliser le canal par défaut (généralement le 1)&#10;                response = requests.get(f&quot;{self.base_url}?Function=StartStreaming&quot;, timeout=3)&#10;&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_streaming(self, channel=0):&#10;        &quot;&quot;&quot;&#10;        Arrête le streaming sur un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (0 = tous les canaux, 1-5 = canal spécifique)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Arrêt du streaming sur le canal {channel if channel else 'par défaut'}&quot;)&#10;        try:&#10;            # Si un canal spécifique est demandé (1-5)&#10;            if 1 &lt;= channel &lt;= 5:&#10;                response = requests.get(f&quot;{self.base_url}?Function=StopStreaming&amp;Value={channel}&quot;, timeout=3)&#10;            else:&#10;                # Arrêter tous les canaux&#10;                response = requests.get(f&quot;{self.base_url}?Function=StopStreaming&quot;, timeout=3)&#10;&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_streaming_status(self, channel=1):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut du streaming pour un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (1-5)&#10;&#10;        Returns:&#10;            bool: True si le streaming est actif, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Récupérer l'état général de vMix&#10;            response = requests.get(f&quot;{self.base_url}?Function=GetStatus&quot;, timeout=3)&#10;            if response.status_code != 200:&#10;                return False&#10;&#10;            # Analyser le XML pour trouver l'état du streaming&#10;            root = ET.fromstring(response.text)&#10;&#10;            # Rechercher l'état du canal spécifique&#10;            if 1 &lt;= channel &lt;= 5:&#10;                streaming_element = root.find(f&quot;./Streaming[@channel='{channel}']&quot;)&#10;                if streaming_element is not None:&#10;                    return streaming_element.text.lower() == &quot;true&quot;&#10;&#10;            # Rechercher l'état général du streaming&#10;            streaming_element = root.find(&quot;./Streaming&quot;)&#10;            if streaming_element is not None:&#10;                return streaming_element.text.lower() == &quot;true&quot;&#10;&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_recording_status(self):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut de l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement est actif, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Récupérer l'état général de vMix&#10;            response = requests.get(f&quot;{self.base_url}?Function=GetStatus&quot;, timeout=3)&#10;            if response.status_code != 200:&#10;                return False&#10;&#10;            # Analyser le XML pour trouver l'état de l'enregistrement&#10;            root = ET.fromstring(response.text)&#10;            recording_element = root.find(&quot;./Recording&quot;)&#10;&#10;            if recording_element is not None:&#10;                return recording_element.text.lower() == &quot;true&quot;&#10;&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;&#10;        Démarre l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function=StartRecording&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function=StopRecording&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def toggle_audio(self, input_number, mute=None):&#10;        &quot;&quot;&quot;&#10;        Active ou désactive l'audio d'une entrée spécifique.&#10;&#10;        Args:&#10;            input_number: Numéro ou nom de l'input&#10;            mute: Si None, inverse l'état actuel (toggle).&#10;                 Si True, coupe l'audio.&#10;                 Si False, active l'audio.&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            function = None&#10;            if mute is None:&#10;                function = &quot;AudioToggle&quot;&#10;                logger.info(f&quot;Toggle audio pour input {input_number}&quot;)&#10;            elif mute:&#10;                function = &quot;AudioOff&quot;&#10;                logger.info(f&quot;Mute audio pour input {input_number}&quot;)&#10;            else:&#10;                function = &quot;AudioOn&quot;&#10;                logger.info(f&quot;Unmute audio pour input {input_number}&quot;)&#10;&#10;            params = {&#10;                &quot;Function&quot;: function,&#10;                &quot;Input&quot;: input_number&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error toggling audio in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def adjust_audio_volume(self, input_number, volume):&#10;        &quot;&quot;&quot;&#10;        Ajuste le volume d'une entrée audio&#10;&#10;        Args:&#10;            input_number: Numéro ou nom de l'input&#10;            volume: Valeur du volume (entre 0 et 100)&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # S'assurer que le volume est entre 0 et 100&#10;            volume = max(0, min(100, volume))&#10;&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetVolume&quot;,&#10;                &quot;Input&quot;: input_number,&#10;                &quot;Value&quot;: volume&#10;            }&#10;            logger.info(f&quot;Ajustement volume pour input {input_number} à {volume}%&quot;)&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error adjusting volume in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_audio_status(self, input_number=None):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut audio des entrées vMix&#10;&#10;        Args:&#10;            input_number: Si spécifié, retourne uniquement le statut de cet input&#10;&#10;        Returns:&#10;            dict: Statut audio des entrées ou None en cas d'erreur&#10;        &quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=2)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;&#10;                audio_statuses = {}&#10;                for input_elem in root.findall('.//inputs/input'):&#10;                    input_id = input_elem.get('number')&#10;&#10;                    # Si un input_number spécifique est demandé, ne traiter que celui-là&#10;                    if input_number and input_id != str(input_number):&#10;                        continue&#10;&#10;                    # Récupérer les informations audio&#10;                    audio_status = {&#10;                        'id': input_id,&#10;                        'title': input_elem.get('title', ''),&#10;                        'muted': input_elem.get('muted', 'False').lower() == 'true',&#10;                        'volume': input_elem.get('volume', '100'),&#10;                        'balance': input_elem.get('balance', '0'),&#10;                        'audiobusses': input_elem.get('audiobusses', '')&#10;                    }&#10;&#10;                    audio_statuses[input_id] = audio_status&#10;&#10;                return audio_statuses if not input_number else (audio_statuses.get(str(input_number), None))&#10;&#10;            return None&#10;        except Exception as e:&#10;            logger.error(f&quot;Error getting audio status from vMix: {e}&quot;)&#10;            return None&#10;&#10;    ######### handle overlay #########&#10;&#10;    def set_overlay(self, input_name, overlay_number, state=True):&#10;        &quot;&quot;&quot;Contrôle les overlays vMix&quot;&quot;&quot;&#10;        action = &quot;SetOverlayOn&quot; if state else &quot;SetOverlayOff&quot;&#10;        logger.info(f&quot;Configuration overlay: {action}, input={input_name}, overlay={overlay_number}&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function={action}&amp;Input={input_name}&amp;Value={overlay_number}&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la configuration de l'overlay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def show_score_overlay(self, overlay_number=1):&#10;        &quot;&quot;&quot;Affiche l'overlay du score&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage de l'overlay de score n°{overlay_number}&quot;)&#10;        return self.set_overlay(overlay_number, 1, True)&#10;&#10;    def show_player_stats(self, player_id, overlay_number=2):&#10;        &quot;&quot;&quot;Affiche les statistiques d'un joueur spécifique&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage des stats du joueur {player_id} sur l'overlay n°{overlay_number}&quot;)&#10;        # D'abord définir les données du joueur dans l'overlay&#10;        # Puis afficher l'overlay&#10;        return self.set_overlay(overlay_number, 2, True)&#10;&#10;    def show_match_thumbnail(self, thumbnail_input, overlay_number=3):&#10;        &quot;&quot;&quot;Affiche la miniature du match comme overlay&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage de la miniature du match depuis l'entrée {thumbnail_input}&quot;)&#10;        # Configurer l'overlay pour utiliser l'entrée de la miniature&#10;        self.send_command(&quot;SetOverlayInput1&quot;, input=overlay_number, value=thumbnail_input)&#10;        # Afficher l'overlay&#10;        return self.set_overlay(overlay_number, 3, True)&#10;&#10;    ######### Méthodes pour la gestion des replays #########&#10;&#10;    def create_replay_event(self, event_name=None, duration=10):&#10;        &quot;&quot;&quot;Crée un nouvel événement de replay avec une durée spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Création d'un événement replay de {duration} secondes&quot;)&#10;        params = {&quot;duration&quot;: duration}&#10;        if event_name:&#10;            params[&quot;value&quot;] = event_name&#10;        return self.send_command(&quot;ReplayPlayEventToOutput&quot;, **params)&#10;&#10;    def start_recording_replay(self):&#10;        &quot;&quot;&quot;Démarre l'enregistrement du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement du replay&quot;)&#10;        return self.send_command(&quot;ReplayStartRecording&quot;)&#10;&#10;    def stop_recording_replay(self):&#10;        &quot;&quot;&quot;Arrête l'enregistrement du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement du replay&quot;)&#10;        return self.send_command(&quot;ReplayStopRecording&quot;)&#10;&#10;    def play_last_replay(self, speed=100):&#10;        &quot;&quot;&quot;Joue le dernier replay enregistré à la vitesse spécifiée (en pourcentage)&quot;&quot;&quot;&#10;        logger.info(f&quot;Lecture du dernier replay à {speed}% de la vitesse normale&quot;)&#10;&#10;        # Vérifier que la vitesse est une valeur valide (généralement 25%, 50% ou 100%)&#10;        valid_speeds = [25, 50, 75, 100]&#10;        if speed not in valid_speeds:&#10;            speed = 100  # Valeur par défaut&#10;&#10;        return self.send_command(&quot;ReplayPlay&quot;, speed=speed)&#10;&#10;    def pause_replay(self):&#10;        &quot;&quot;&quot;Met en pause la lecture du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Mise en pause du replay&quot;)&#10;        return self.send_command(&quot;ReplayPause&quot;)&#10;&#10;    def mark_replay_event(self, event_name=&quot;&quot;):&#10;        &quot;&quot;&quot;Marque un événement dans le replay avec un nom optionnel&quot;&quot;&quot;&#10;        logger.info(f&quot;Marquage d'événement replay: {event_name}&quot;)&#10;        if event_name:&#10;            return self.send_command(&quot;ReplayMarkIn&quot;, value=event_name)&#10;        else:&#10;            return self.send_command(&quot;ReplayMarkIn&quot;)&#10;&#10;    def get_replay_events(self):&#10;        &quot;&quot;&quot;Récupère la liste des événements de replay marqués&quot;&quot;&quot;&#10;        logger.info(&quot;Récupération des événements de replay&quot;)&#10;        # Cette fonction est conceptuelle - l'API vMix actuelle ne permet pas directement&#10;        # de récupérer la liste des événements. Vous devrez peut-être implémenter une&#10;        # solution personnalisée en utilisant les événements marqués dans votre application.&#10;        return []&#10;&#10;    def play_replay_event(self, event_index, speed=100):&#10;        &quot;&quot;&quot;Joue un événement de replay spécifique à la vitesse spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Lecture de l'événement replay {event_index} à {speed}% de la vitesse&quot;)&#10;&#10;        # Vérifier que la vitesse est une valeur valide&#10;        valid_speeds = [25, 50, 75, 100]&#10;        if speed not in valid_speeds:&#10;            speed = 100  # Valeur par défaut&#10;&#10;        return self.send_command(&quot;ReplayPlayEvent&quot;, value=event_index, speed=speed)&#10;&#10;    def set_replay_duration(self, seconds=8):&#10;        &quot;&quot;&quot;Configure la durée du buffer de replay en secondes&quot;&quot;&quot;&#10;        logger.info(f&quot;Configuration de la durée du buffer de replay à {seconds} secondes&quot;)&#10;        return self.send_command(&quot;ReplaySetDuration&quot;, value=seconds)&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;Démarre l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement&quot;)&#10;        return self.send_command(&quot;StartRecording&quot;)&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;Arrête l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement&quot;)&#10;        return self.send_command(&quot;StopRecording&quot;)&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;Met en pause l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Mise en pause de l'enregistrement&quot;)&#10;        return self.send_command(&quot;PauseRecording&quot;)&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;Charge un preset vMix enregistré&quot;&quot;&quot;&#10;        logger.info(f&quot;Chargement du preset {preset_name}&quot;)&#10;        return self.send_command(&quot;OpenPreset&quot;, value=preset_name)&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;Enregistre l'état actuel de vMix comme un preset&quot;&quot;&quot;&#10;        logger.info(f&quot;Enregistrement du preset {preset_name}&quot;)&#10;        return self.send_command(&quot;SavePreset&quot;, value=preset_name)&#10;&#10;    def execute_script(self, script_name):&#10;        &quot;&quot;&quot;Exécute un script vMix&quot;&quot;&quot;&#10;        logger.info(f&quot;Exécution du script {script_name}&quot;)&#10;        return self.send_command(&quot;ScriptStart&quot;, value=script_name)&#10;&#10;    ####### get vMix status #########&#10;    def get_streaming_status(self):&#10;        &quot;&quot;&quot;Récupère l'état actuel du streaming&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                streaming = root.find('streaming')&#10;                if streaming is not None:&#10;                    return streaming.text == 'True'&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut de streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_recording_status(self):&#10;        &quot;&quot;&quot;Récupère l'état actuel de l'enregistrement&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                recording = root.find('recording')&#10;                if recording is not None:&#10;                    return recording.text == 'True'&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut d'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_active_input(self):&#10;        &quot;&quot;&quot;Récupère l'entrée actuellement active dans vMix&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                active = root.find('active')&#10;                if active is not None:&#10;                    return active.text&#10;            return None&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération de l'entrée active: {str(e)}&quot;)&#10;            return None&#10;&#10;&#10;    #### méthode pour le voleyball ####&#10;    # todo to move into a specific file/module&#10;    def update_score(self, home_score, away_score, input_number, layer_home=0, layer_away=1):&#10;        &quot;&quot;&quot;Met à jour le score du match&quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du score: {home_score}-{away_score}&quot;)&#10;        self.set_text(input_number, str(home_score), layer_home)&#10;        return self.set_text(input_number, str(away_score), layer_away)&#10;&#10;    def update_set_scores(self, sets_score, input_number, layer=2):&#10;        &quot;&quot;&quot;Met à jour le score des sets (par exemple '2-1')&quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du score des sets: {sets_score}&quot;)&#10;        return self.set_text(input_number, sets_score, layer)&#10;&#10;    def show_timeout_graphic(self, team, duration=30, overlay_number=4):&#10;        &quot;&quot;&quot;Affiche un graphique de timeout pour une équipe spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage du graphique de timeout pour l'équipe {team}&quot;)&#10;        # Configuration du graphique de timeout&#10;        self.set_text(overlay_number, f&quot;TIMEOUT {team}&quot;, 0)&#10;        # Affichage de l'overlay&#10;        result = self.set_overlay(overlay_number, 4, True)&#10;        # Programmation de la disparition après la durée spécifiée&#10;        # Notez que ceci est conceptuel - vous devrez implémenter la temporisation ailleurs&#10;        return result&#10;&#10;    #### websocket connection ####&#10;    #todo to move into a specific file&#10;    def setup_websocket_monitoring(self, callback):&#10;        &quot;&quot;&quot;&#10;        Configure une connexion WebSocket pour surveiller les changements d'état de vMix&#10;        Cette fonction est conceptuelle et nécessiterait une implémentation spécifique&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Configuration de la surveillance WebSocket vMix&quot;)&#10;        # La mise en œuvre dépendrait de la façon dont vMix expose ses événements WebSocket&#10;        # Cette fonction servirait de point d'entrée pour cette fonctionnalité&#10;&#10;    def set_text(self, input_id, value, selected_name=0):&#10;        &quot;&quot;&quot;&#10;        Envoie une commande SetText à un titre vMix.&#10;&#10;        Args:&#10;            input_id: ID ou nom de l'input titre&#10;            value: texte à définir&#10;            selected_name: nom du champ (ou index) dans le titre&#10;&#10;        Returns:&#10;            bool: True si la commande a réussi&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                'Function': 'SetText',&#10;                'Input': input_id,&#10;                'SelectedName': str(selected_name),&#10;                'Value': value&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'envoi de SetText: {e}&quot;)&#10;            return False&#10;&#10;    def update_scoreboard(self, team_a_name, team_b_name, score_a, score_b, sets_a, sets_b, title_input=&quot;scoreboard&quot;):&#10;        &quot;&quot;&quot;&#10;        Met à jour le scoreboard vMix avec les informations du match&#10;&#10;        Args:&#10;            team_a_name: Nom de l'équipe A&#10;            team_b_name: Nom de l'équipe B&#10;            score_a: Score de l'équipe A&#10;            score_b: Score de l'équipe B&#10;            sets_a: Sets gagnés par l'équipe A&#10;            sets_b: Sets gagnés par l'équipe B&#10;            title_input: Nom ou ID de l'input du scoreboard dans vMix&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du scoreboard: {team_a_name} {score_a}-{score_b} {team_b_name}, sets: {sets_a}-{sets_b}&quot;)&#10;&#10;        try:&#10;            # Format basé sur le code v1_0/vmix_score_updater.py&#10;            # Utilisation des noms de champs txt*.Text&#10;            # Nettoyage et validation des scores&#10;            score_a_str = '0' if not str(score_a).strip() or str(score_a).strip() == '-' else str(score_a)&#10;            score_b_str = '0' if not str(score_b).strip() or str(score_b).strip() == '-' else str(score_b)&#10;            sets_a_str = '0' if not str(sets_a).strip() or str(sets_a).strip() == '-' else str(sets_a)&#10;            sets_b_str = '0' if not str(sets_b).strip() or str(sets_b).strip() == '-' else str(sets_b)&#10;&#10;            # Mise à jour des scores et sets&#10;            fields_to_update = {&#10;                &quot;txtScoreTeamA.Text&quot;: score_a_str,&#10;                &quot;txtScoreTeamB.Text&quot;: score_b_str,&#10;                &quot;txtSetTeamA.Text&quot;: sets_a_str,&#10;                &quot;txtSetTeamB.Text&quot;: sets_b_str&#10;            }&#10;&#10;            # Mise à jour des noms d'équipes si fournis&#10;            if team_a_name:&#10;                fields_to_update[&quot;txtTeamA.Text&quot;] = team_a_name&#10;            if team_b_name:&#10;                fields_to_update[&quot;txtTeamB.Text&quot;] = team_b_name&#10;&#10;            # Essayer toutes les variantes possibles des noms de champs&#10;            all_fields = {}&#10;            all_fields.update(fields_to_update)&#10;&#10;            # Variantes sans le .Text&#10;            for field, value in fields_to_update.items():&#10;                field_without_text = field.replace(&quot;.Text&quot;, &quot;&quot;)&#10;                all_fields[field_without_text] = value&#10;&#10;            # Variantes sans le txt&#10;            for field, value in fields_to_update.items():&#10;                field_without_txt = field.replace(&quot;txt&quot;, &quot;&quot;)&#10;                all_fields[field_without_txt] = value&#10;                field_without_both = field.replace(&quot;txt&quot;, &quot;&quot;).replace(&quot;.Text&quot;, &quot;&quot;)&#10;                all_fields[field_without_both] = value&#10;&#10;            # Variantes avec les noms standard&#10;            standard_fields = {&#10;                &quot;teamNameA&quot;: team_a_name,&#10;                &quot;teamNameB&quot;: team_b_name,&#10;                &quot;scoreTeamA&quot;: score_a_str,&#10;                &quot;scoreTeamB&quot;: score_b_str,&#10;                &quot;setTeamA&quot;: sets_a_str,&#10;                &quot;setTeamB&quot;: sets_b_str&#10;            }&#10;            all_fields.update(standard_fields)&#10;&#10;            # Envoi direct des requêtes à vMix (méthode de v1_0)&#10;            success = True&#10;            for field_name, value in all_fields.items():&#10;                try:&#10;                    url = f&quot;{self.base_url}?Function=SetText&amp;Input={title_input}&amp;SelectedName={field_name}&amp;Value={value}&quot;&#10;                    response = requests.get(url, timeout=3)&#10;                    if response.status_code == 200:&#10;                        logger.info(f&quot;Texte mis à jour: Input={title_input}, Champ={field_name}, Valeur={value}&quot;)&#10;                    else:&#10;                        success = False&#10;                        logger.warning(f&quot;Échec de mise à jour pour le champ {field_name}: {response.status_code}&quot;)&#10;                except Exception as e:&#10;                    success = False&#10;                    logger.error(f&quot;Erreur lors de la mise à jour pour le champ {field_name}: {e}&quot;)&#10;&#10;            return success&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du scoreboard: {e}&quot;)&#10;            return False&#10;" />
              <option name="updatedContent" value="#fonctionnalités à implémenter :&#10;# -connexion vmix, -status de la connexion (websocket), -gestion des inputs (add, switch de cam, mute micros, replay)&#10;# -gestion des overlays (-thumbnail, -liste équipe, -detail joueur, -score, -pub/sponsors)&#10;&#10;import requests&#10;from requests import RequestException&#10;from urllib.parse import urljoin # this import is used to construct URLs correctly&#10;import xml.etree.ElementTree as ET #todo source de cet import&#10;import logging&#10;# Configuration du logger&#10;logging.basicConfig(level=logging.INFO,&#10;                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('vmix_manager')&#10;&#10;&#10;#var global&#10;#host = '127.0.0.1'&#10;#port = 8088&#10;&#10;class VMixManager:&#10;    def __init__(self, host='127.0.0.1', port=8088):&#10;        &quot;&quot;&quot;&#10;        Initialise le gestionnaire vMix&#10;&#10;        Args:&#10;            host: Adresse IP du serveur vMix&#10;            port: Port du serveur vMix&#10;        &quot;&quot;&quot;&#10;        self.host = host&#10;        self.port = port&#10;        self.base_url = f&quot;http://{host}:{port}/api/&quot;&#10;        logger.info(f&quot;VMixManager initialized with base URL: {self.base_url}&quot;)&#10;&#10;    def check_connection(self):&#10;        &quot;&quot;&quot;Vérifie la connexion à vMix&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException:&#10;            logger.error(&quot;Failed to connect to vMix&quot;)&#10;            return False&#10;&#10;    def get_inputs(self):&#10;        &quot;&quot;&quot;Récupère la liste des inputs disponibles dans vMix&quot;&quot;&quot;&#10;        try:&#10;            logger.info(&quot;Récupération des entrées vMix&quot;)&#10;&#10;            # Utilisation de l'API de base vMix sans spécifier de fonction particulière&#10;            # Cela renvoie l'état complet de vMix en XML&#10;            url = f&quot;http://{self.host}:{self.port}/api/&quot;&#10;            logger.info(f&quot;URL de requête: {url}&quot;)&#10;&#10;            response = requests.get(url, timeout=5)&#10;            logger.info(f&quot;Code de réponse: {response.status_code}&quot;)&#10;&#10;            if response.status_code == 200:&#10;                try:&#10;                    # Analyser la réponse XML&#10;                    root = ET.fromstring(response.text)&#10;                    inputs = []&#10;&#10;                    # Dans l'API vMix standard, les inputs sont directement sous le nœud racine &quot;vmix/inputs&quot;&#10;                    for input_elem in root.findall('./inputs/input'):&#10;                        # Récupérer les attributs avec gestion des valeurs par défaut&#10;                        input_number = input_elem.get('number', '')&#10;                        title = input_elem.get('title', '')&#10;&#10;                        # Le type est parfois stocké comme attribut, parfois comme élément enfant&#10;                        input_type = input_elem.get('type', '')&#10;                        state = input_elem.get('state', '')&#10;&#10;                        if not title:&#10;                            title = f&quot;Input {input_number}&quot;&#10;&#10;                        logger.info(f&quot;Input détecté - Numéro: {input_number}, Titre: {title}, Type: {input_type}&quot;)&#10;&#10;                        # Déterminer la catégorie de l'input&#10;                        category = self._determine_input_category(input_type, title)&#10;&#10;                        input_data = {&#10;                            'id': input_number,&#10;                            'number': input_number,&#10;                            'name': title,&#10;                            'title': title,&#10;                            'type': input_type,&#10;                            'state': state,&#10;                            'category': category&#10;                        }&#10;                        inputs.append(input_data)&#10;&#10;                    logger.info(f&quot;Récupération réussie: {len(inputs)} entrées trouvées&quot;)&#10;                    return inputs&#10;                except ET.ParseError as xml_err:&#10;                    logger.error(f&quot;Erreur de parsing XML: {str(xml_err)}&quot;)&#10;            else:&#10;                logger.warning(f&quot;Échec de récupération des entrées: code {response.status_code}&quot;)&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération des entrées vMix: {str(e)}&quot;, exc_info=True)&#10;&#10;        # Si tout échoue, retourner une liste vide&#10;        logger.warning(&quot;Aucune entrée n'a pu être récupérée, retour d'une liste vide&quot;)&#10;        return []&#10;&#10;    def _determine_input_category(self, input_type, title):&#10;        &quot;&quot;&quot;Détermine la catégorie d'une entrée en fonction de son type et de son titre&quot;&quot;&quot;&#10;        input_type_lower = input_type.lower() if input_type else ''&#10;        title_lower = title.lower() if title else ''&#10;&#10;        # Mots-clés pour détecter les caméras&#10;        camera_keywords = ['camera', 'webcam', 'capture', 'video capture', 'cam', 'caméra', 'webcamera']&#10;&#10;        # Mots-clés pour les vidéos&#10;        video_keywords = ['video', 'movie', 'mp4', 'avi', 'mov', 'film', 'clip', 'vidéo']&#10;&#10;        # Mots-clés pour l'audio&#10;        audio_keywords = ['audio', 'sound', 'mic', 'microphone', 'son', 'micro', 'ambient', 'ambiance']&#10;&#10;        # Vérification des types spéciaux&#10;        if input_type_lower == 'blank' or title_lower == 'blank':&#10;            return 'blank'&#10;&#10;        # Vérification des caméras basée sur le type ou le titre&#10;        if any(cam_type in input_type_lower for cam_type in camera_keywords) or \&#10;           any(cam_type in title_lower for cam_type in camera_keywords):&#10;            return 'camera'&#10;&#10;        # Vérification des vidéos&#10;        if any(vid_type in input_type_lower for vid_type in video_keywords) or \&#10;           any(vid_type in title_lower for vid_type in video_keywords):&#10;            return 'video'&#10;&#10;        # Vérification de l'audio&#10;        if any(audio_type in input_type_lower for audio_type in audio_keywords) or \&#10;           any(audio_type in title_lower for audio_type in audio_keywords):&#10;            return 'audio'&#10;&#10;        # Si aucune correspondance n'est trouvée, retourner une catégorie par défaut&#10;        if 'title' in input_type_lower:&#10;            return 'title'&#10;&#10;        return 'other'&#10;&#10;    def send_roster_to_vmix(self, team_name, players):&#10;        &quot;&quot;&quot;&#10;        Envoie les données d'un roster d'équipe vers vMix&#10;&#10;        Args:&#10;            team_name: Nom de l'équipe&#10;            players: Liste des joueurs&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Exemple d'implémentation - à adapter selon vos besoins&#10;            # Supposons que vous utilisez un input de type &quot;Title&quot; avec un ID spécifique&#10;            title_input = &quot;TeamRoster&quot;  # Nom ou numéro de l'input dans vMix&#10;&#10;            # Construction des données à envoyer&#10;            player_list = &quot;&quot;&#10;            for i, player in enumerate(players):&#10;                player_info = f&quot;{player.get('numero', 'N/A')} - {player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;                player_list += f&quot;{player_info}&lt;br&gt;&quot;&#10;&#10;            # Envoi des données à vMix&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;TeamName&quot;,&#10;                &quot;Value&quot;: team_name&#10;            }&#10;            response1 = requests.get(self.base_url, params=params, timeout=2)&#10;&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerList&quot;,&#10;                &quot;Value&quot;: player_list&#10;            }&#10;            response2 = requests.get(self.base_url, params=params, timeout=2)&#10;&#10;            return response1.status_code == 200 and response2.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error sending roster to vMix: {e}&quot;)&#10;            return False&#10;&#10;    def show_player_details(self, player, team_name=None):&#10;        &quot;&quot;&quot;&#10;        Affiche les détails d'un joueur dans vMix&#10;&#10;        Args:&#10;            player: Dictionnaire contenant les données du joueur&#10;            team_name: Nom de l'équipe (optionnel)&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Exemple d'implémentation - à adapter selon vos besoins&#10;            title_input = &quot;PlayerDetails&quot;  # Nom ou numéro de l'input dans vMix&#10;&#10;            # Envoi des données à vMix&#10;            responses = []&#10;&#10;            # Nom du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerName&quot;,&#10;                &quot;Value&quot;: f&quot;{player.get('prenom', '')} {player.get('nom', '').upper()}&quot;&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Numéro du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;PlayerNumber&quot;,&#10;                &quot;Value&quot;: player.get('numero', 'N/A')&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Position du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;Position&quot;,&#10;                &quot;Value&quot;: player.get('position', 'Non spécifiée')&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Taille du joueur&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;Height&quot;,&#10;                &quot;Value&quot;: f&quot;{player.get('taille', 'N/A')} cm&quot; if player.get('taille') else &quot;Non spécifiée&quot;&#10;            }&#10;            responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Équipe du joueur (si fournie)&#10;            if team_name:&#10;                params = {&#10;                    &quot;Function&quot;: &quot;SetText&quot;,&#10;                    &quot;Input&quot;: title_input,&#10;                    &quot;SelectedName&quot;: &quot;TeamName&quot;,&#10;                    &quot;Value&quot;: team_name&#10;                }&#10;                responses.append(requests.get(self.base_url, params=params, timeout=2))&#10;&#10;            # Vérifier que toutes les requêtes ont réussi&#10;            return all(response.status_code == 200 for response in responses)&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error showing player details in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def set_title_text(self, input_name, field_name, value):&#10;        &quot;&quot;&quot;&#10;        Définit le texte d'un champ dans un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_name: Nom du champ&#10;            value: Valeur à définir&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: input_name,&#10;                &quot;SelectedName&quot;: field_name,&#10;                &quot;Value&quot;: value&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error setting title text in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def update_title_multiple(self, input_name, field_values):&#10;        &quot;&quot;&quot;&#10;        Met à jour plusieurs champs dans un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_values: Dictionnaire {nom_champ: valeur}&#10;&#10;        Returns:&#10;            bool: True si toutes les opérations ont réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            results = []&#10;            for field_name, value in field_values.items():&#10;                result = self.set_title_text(input_name, field_name, value)&#10;                results.append(result)&#10;&#10;            return all(results)&#10;        except Exception as e:&#10;            logger.error(f&quot;Error updating multiple fields in vMix title: {e}&quot;)&#10;            return False&#10;&#10;    def set_image(self, input_name, field_name, image_path):&#10;        &quot;&quot;&quot;&#10;        Définit une image dans un champ d'un titre vMix&#10;&#10;        Args:&#10;            input_name: Nom ou numéro de l'input&#10;            field_name: Nom du champ&#10;            image_path: Chemin vers l'image&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetImage&quot;,&#10;                &quot;Input&quot;: input_name,&#10;                &quot;SelectedName&quot;: field_name,&#10;                &quot;Value&quot;: image_path&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error setting image in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def send_command(self, function, **params):&#10;        &quot;&quot;&quot;&#10;        Envoie une commande à l'API vMix&#10;&#10;        Args:&#10;            function (str): Nom de la fonction vMix à appeler&#10;            **params: Paramètres additionnels à passer à la fonction&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        # Construire l'URL de la commande&#10;        url = self.base_url + f&quot;?Function={function}&quot;&#10;&#10;        # Ajouter les paramètres à l'URL&#10;        for key, value in params.items():&#10;            url += f&quot;&amp;{key}={value}&quot;&#10;&#10;        try:&#10;            logger.info(f&quot;Envoi commande vMix: {function} avec paramètres: {params}&quot;)&#10;            response = requests.get(url, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(&quot;Commande exécutée avec succès&quot;)&#10;                return True&#10;            else:&#10;                logger.warning(f&quot;Échec de la commande: code {response.status_code}&quot;)&#10;                return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'envoi de la commande: {str(e)}&quot;)&#10;            return False&#10;&#10;    ######### title cmd #########&#10;&#10;    def set_title_text(self, input_id, field_name, text):&#10;        &quot;&quot;&quot;&#10;        Met à jour un champ texte d'un titre vMix&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_name (str): Le nom du champ à mettre à jour&#10;            text (str): Le texte à insérer dans le champ&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Construire les paramètres pour la fonction SetText&#10;            params = {&#10;                'Function': 'SetText',&#10;                'Input': input_id,&#10;                'SelectedName': field_name,&#10;                'Value': text&#10;            }&#10;&#10;            # Envoyer la requête à l'API vMix&#10;            url = self.base_url&#10;            response = requests.get(url, params=params, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(f&quot;Texte mis à jour: Input={input_id}, Champ={field_name}, Valeur={text}&quot;)&#10;                return True&#10;            else:&#10;                logger.error(f&quot;Échec de mise à jour du texte: {response.status_code}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du texte: {e}&quot;)&#10;            return False&#10;&#10;    def update_title_multiple(self, input_id, field_values):&#10;        &quot;&quot;&quot;&#10;        Met à jour plusieurs champs d'un titre vMix en une seule fois&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_values (dict): Dictionnaire de paires {nom_champ: valeur}&#10;&#10;        Returns:&#10;            bool: True si toutes les mises à jour ont réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        success = True&#10;        for field_name, value in field_values.items():&#10;            result = self.set_title_text(input_id, field_name, str(value))&#10;            if not result:&#10;                success = False&#10;                logger.error(f&quot;Échec de mise à jour pour le champ {field_name}&quot;)&#10;        return success&#10;&#10;    def update_scoreboard(self, team_a_name, team_b_name, score_a, score_b, sets_a, sets_b, title_input=&quot;Scoreboard&quot;):&#10;        &quot;&quot;&quot;&#10;        Met à jour le scoreboard dans vMix avec les informations du match&#10;&#10;        Args:&#10;            team_a_name: Nom de l'équipe A&#10;            team_b_name: Nom de l'équipe B&#10;            score_a: Score de l'équipe A&#10;            score_b: Score de l'équipe B&#10;            sets_a: Sets gagnés par l'équipe A&#10;            sets_b: Sets gagnés par l'équipe B&#10;            title_input: Nom ou ID de l'input du scoreboard dans vMix&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Nettoyage et validation des scores&#10;            score_a_str = '0' if not str(score_a).strip() or str(score_a).strip() == '-' else str(score_a)&#10;            score_b_str = '0' if not str(score_b).strip() or str(score_b).strip() == '-' else str(score_b)&#10;            sets_a_str = '0' if not str(sets_a).strip() or str(sets_a).strip() == '-' else str(sets_a)&#10;            sets_b_str = '0' if not str(sets_b).strip() or str(sets_b).strip() == '-' else str(sets_b)&#10;&#10;            # Construction des URLs pour mettre à jour les scores et sets avec les noms de champs spécifiés&#10;            score_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=scoreTeamA&amp;Value={score_a_str}'&#10;            score_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=scoreTeamB&amp;Value={score_b_str}'&#10;            sets_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=setTeamA&amp;Value={sets_a_str}'&#10;            sets_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=setTeamB&amp;Value={sets_b_str}'&#10;&#10;            # Mettre à jour les noms d'équipes si fournis&#10;            team_a_url = None&#10;            team_b_url = None&#10;            if team_a_name:&#10;                team_a_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=teamNameA&amp;Value={team_a_name}'&#10;            if team_b_name:&#10;                team_b_url = f'http://{self.host}:{self.port}/API/?Function=SetText&amp;Input={title_input}&amp;SelectedName=teamNameB&amp;Value={team_b_name}'&#10;&#10;            # Envoi des requêtes à vMix&#10;            logger.info(f&quot;Mise à jour du scoreboard dans vMix: {score_a_str}-{score_b_str} Sets: {sets_a_str}-{sets_b_str}&quot;)&#10;&#10;            requests.get(score_a_url, timeout=3)&#10;            requests.get(score_b_url, timeout=3)&#10;            requests.get(sets_a_url, timeout=3)&#10;            requests.get(sets_b_url, timeout=3)&#10;&#10;            # Mise à jour des noms d'équipes si spécifiés&#10;            if team_a_url:&#10;                requests.get(team_a_url, timeout=3)&#10;            if team_b_url:&#10;                requests.get(team_b_url, timeout=3)&#10;&#10;            logger.info(f&quot;Scoreboard mis à jour avec succès: {team_a_name} {score_a_str}-{score_b_str} {team_b_name}, sets: {sets_a_str}-{sets_b_str}&quot;)&#10;            return True&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du scoreboard: {str(e)}&quot;)&#10;            return False&#10;&#10;    def set_image(self, input_id, field_name, image_path):&#10;        &quot;&quot;&quot;&#10;        Met à jour un champ image d'un titre vMix&#10;&#10;        Args:&#10;            input_id (str): L'ID de l'entrée titre&#10;            field_name (str): Le nom du champ à mettre à jour&#10;            image_path (str): Le chemin vers l'image à utiliser&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Construire les paramètres pour la fonction SetImage&#10;            params = {&#10;                'Function': 'SetImage',&#10;                'Input': input_id,&#10;                'SelectedName': field_name,&#10;                'Value': image_path&#10;            }&#10;&#10;            # Envoyer la requête à l'API vMix&#10;            url = self.base_url&#10;            response = requests.get(url, params=params, timeout=3)&#10;&#10;            if response.status_code == 200:&#10;                logger.info(f&quot;Image mise à jour: Input={input_id}, Champ={field_name}, Image={image_path}&quot;)&#10;                return True&#10;            else:&#10;                logger.error(f&quot;Échec de mise à jour de l'image: {response.status_code}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour de l'image: {e}&quot;)&#10;            return False&#10;&#10;    def find_title_input_by_name(self, name_pattern):&#10;        &quot;&quot;&quot;&#10;        Trouve un input de type titre par son nom (recherche partielle)&#10;&#10;        Args:&#10;            name_pattern (str): Motif à rechercher dans le nom de l'input&#10;&#10;        Returns:&#10;            str: ID de l'input trouvé ou None si non trouvé&#10;        &quot;&quot;&quot;&#10;        inputs = self.get_inputs()&#10;        for input_item in inputs:&#10;            if ('title' in input_item.get('type', '').lower() or 'gt' in input_item.get('type', '').lower()) and \&#10;               name_pattern.lower() in input_item.get('name', '').lower():&#10;                return input_item['id']&#10;        return None&#10;&#10;    def start_streaming(self, channel=0):&#10;        &quot;&quot;&quot;&#10;        Démarre le streaming sur un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (0 = tous les canaux, 1-5 = canal spécifique)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Démarrage du streaming sur le canal {channel if channel else 'par défaut'}&quot;)&#10;        try:&#10;            # Si un canal spécifique est demandé (1-5)&#10;            if 1 &lt;= channel &lt;= 5:&#10;                response = requests.get(f&quot;{self.base_url}?Function=StartStreaming&amp;Value={channel}&quot;, timeout=3)&#10;            else:&#10;                # Utiliser le canal par défaut (généralement le 1)&#10;                response = requests.get(f&quot;{self.base_url}?Function=StartStreaming&quot;, timeout=3)&#10;&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_streaming(self, channel=0):&#10;        &quot;&quot;&quot;&#10;        Arrête le streaming sur un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (0 = tous les canaux, 1-5 = canal spécifique)&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Arrêt du streaming sur le canal {channel if channel else 'par défaut'}&quot;)&#10;        try:&#10;            # Si un canal spécifique est demandé (1-5)&#10;            if 1 &lt;= channel &lt;= 5:&#10;                response = requests.get(f&quot;{self.base_url}?Function=StopStreaming&amp;Value={channel}&quot;, timeout=3)&#10;            else:&#10;                # Arrêter tous les canaux&#10;                response = requests.get(f&quot;{self.base_url}?Function=StopStreaming&quot;, timeout=3)&#10;&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_streaming_status(self, channel=1):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut du streaming pour un canal spécifique&#10;&#10;        Args:&#10;            channel (int): Numéro du canal de streaming (1-5)&#10;&#10;        Returns:&#10;            bool: True si le streaming est actif, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Récupérer l'état général de vMix&#10;            response = requests.get(f&quot;{self.base_url}?Function=GetStatus&quot;, timeout=3)&#10;            if response.status_code != 200:&#10;                return False&#10;&#10;            # Analyser le XML pour trouver l'état du streaming&#10;            root = ET.fromstring(response.text)&#10;&#10;            # Rechercher l'état du canal spécifique&#10;            if 1 &lt;= channel &lt;= 5:&#10;                streaming_element = root.find(f&quot;./Streaming[@channel='{channel}']&quot;)&#10;                if streaming_element is not None:&#10;                    return streaming_element.text.lower() == &quot;true&quot;&#10;&#10;            # Rechercher l'état général du streaming&#10;            streaming_element = root.find(&quot;./Streaming&quot;)&#10;            if streaming_element is not None:&#10;                return streaming_element.text.lower() == &quot;true&quot;&#10;&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut du streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_recording_status(self):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut de l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si l'enregistrement est actif, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Récupérer l'état général de vMix&#10;            response = requests.get(f&quot;{self.base_url}?Function=GetStatus&quot;, timeout=3)&#10;            if response.status_code != 200:&#10;                return False&#10;&#10;            # Analyser le XML pour trouver l'état de l'enregistrement&#10;            root = ET.fromstring(response.text)&#10;            recording_element = root.find(&quot;./Recording&quot;)&#10;&#10;            if recording_element is not None:&#10;                return recording_element.text.lower() == &quot;true&quot;&#10;&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;&#10;        Démarre l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function=StartRecording&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors du démarrage de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;&#10;        Arrête l'enregistrement&#10;&#10;        Returns:&#10;            bool: True si réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function=StopRecording&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'arrêt de l'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def toggle_audio(self, input_number, mute=None):&#10;        &quot;&quot;&quot;&#10;        Active ou désactive l'audio d'une entrée spécifique.&#10;&#10;        Args:&#10;            input_number: Numéro ou nom de l'input&#10;            mute: Si None, inverse l'état actuel (toggle).&#10;                 Si True, coupe l'audio.&#10;                 Si False, active l'audio.&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            function = None&#10;            if mute is None:&#10;                function = &quot;AudioToggle&quot;&#10;                logger.info(f&quot;Toggle audio pour input {input_number}&quot;)&#10;            elif mute:&#10;                function = &quot;AudioOff&quot;&#10;                logger.info(f&quot;Mute audio pour input {input_number}&quot;)&#10;            else:&#10;                function = &quot;AudioOn&quot;&#10;                logger.info(f&quot;Unmute audio pour input {input_number}&quot;)&#10;&#10;            params = {&#10;                &quot;Function&quot;: function,&#10;                &quot;Input&quot;: input_number&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error toggling audio in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def adjust_audio_volume(self, input_number, volume):&#10;        &quot;&quot;&quot;&#10;        Ajuste le volume d'une entrée audio&#10;&#10;        Args:&#10;            input_number: Numéro ou nom de l'input&#10;            volume: Valeur du volume (entre 0 et 100)&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # S'assurer que le volume est entre 0 et 100&#10;            volume = max(0, min(100, volume))&#10;&#10;            params = {&#10;                &quot;Function&quot;: &quot;SetVolume&quot;,&#10;                &quot;Input&quot;: input_number,&#10;                &quot;Value&quot;: volume&#10;            }&#10;            logger.info(f&quot;Ajustement volume pour input {input_number} à {volume}%&quot;)&#10;            response = requests.get(self.base_url, params=params, timeout=2)&#10;            return response.status_code == 200&#10;        except RequestException as e:&#10;            logger.error(f&quot;Error adjusting volume in vMix: {e}&quot;)&#10;            return False&#10;&#10;    def get_audio_status(self, input_number=None):&#10;        &quot;&quot;&quot;&#10;        Récupère le statut audio des entrées vMix&#10;&#10;        Args:&#10;            input_number: Si spécifié, retourne uniquement le statut de cet input&#10;&#10;        Returns:&#10;            dict: Statut audio des entrées ou None en cas d'erreur&#10;        &quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=2)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;&#10;                audio_statuses = {}&#10;                for input_elem in root.findall('.//inputs/input'):&#10;                    input_id = input_elem.get('number')&#10;&#10;                    # Si un input_number spécifique est demandé, ne traiter que celui-là&#10;                    if input_number and input_id != str(input_number):&#10;                        continue&#10;&#10;                    # Récupérer les informations audio&#10;                    audio_status = {&#10;                        'id': input_id,&#10;                        'title': input_elem.get('title', ''),&#10;                        'muted': input_elem.get('muted', 'False').lower() == 'true',&#10;                        'volume': input_elem.get('volume', '100'),&#10;                        'balance': input_elem.get('balance', '0'),&#10;                        'audiobusses': input_elem.get('audiobusses', '')&#10;                    }&#10;&#10;                    audio_statuses[input_id] = audio_status&#10;&#10;                return audio_statuses if not input_number else (audio_statuses.get(str(input_number), None))&#10;&#10;            return None&#10;        except Exception as e:&#10;            logger.error(f&quot;Error getting audio status from vMix: {e}&quot;)&#10;            return None&#10;&#10;    ######### handle overlay #########&#10;&#10;    def set_overlay(self, input_name, overlay_number, state=True):&#10;        &quot;&quot;&quot;Contrôle les overlays vMix&quot;&quot;&quot;&#10;        action = &quot;SetOverlayOn&quot; if state else &quot;SetOverlayOff&quot;&#10;        logger.info(f&quot;Configuration overlay: {action}, input={input_name}, overlay={overlay_number}&quot;)&#10;        try:&#10;            response = requests.get(f&quot;{self.base_url}?Function={action}&amp;Input={input_name}&amp;Value={overlay_number}&quot;, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la configuration de l'overlay: {str(e)}&quot;)&#10;            return False&#10;&#10;    def show_score_overlay(self, overlay_number=1):&#10;        &quot;&quot;&quot;Affiche l'overlay du score&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage de l'overlay de score n°{overlay_number}&quot;)&#10;        return self.set_overlay(overlay_number, 1, True)&#10;&#10;    def show_player_stats(self, player_id, overlay_number=2):&#10;        &quot;&quot;&quot;Affiche les statistiques d'un joueur spécifique&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage des stats du joueur {player_id} sur l'overlay n°{overlay_number}&quot;)&#10;        # D'abord définir les données du joueur dans l'overlay&#10;        # Puis afficher l'overlay&#10;        return self.set_overlay(overlay_number, 2, True)&#10;&#10;    def show_match_thumbnail(self, thumbnail_input, overlay_number=3):&#10;        &quot;&quot;&quot;Affiche la miniature du match comme overlay&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage de la miniature du match depuis l'entrée {thumbnail_input}&quot;)&#10;        # Configurer l'overlay pour utiliser l'entrée de la miniature&#10;        self.send_command(&quot;SetOverlayInput1&quot;, input=overlay_number, value=thumbnail_input)&#10;        # Afficher l'overlay&#10;        return self.set_overlay(overlay_number, 3, True)&#10;&#10;    ######### Méthodes pour la gestion des replays #########&#10;&#10;    def create_replay_event(self, event_name=None, duration=10):&#10;        &quot;&quot;&quot;Crée un nouvel événement de replay avec une durée spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Création d'un événement replay de {duration} secondes&quot;)&#10;        params = {&quot;duration&quot;: duration}&#10;        if event_name:&#10;            params[&quot;value&quot;] = event_name&#10;        return self.send_command(&quot;ReplayPlayEventToOutput&quot;, **params)&#10;&#10;    def start_recording_replay(self):&#10;        &quot;&quot;&quot;Démarre l'enregistrement du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement du replay&quot;)&#10;        return self.send_command(&quot;ReplayStartRecording&quot;)&#10;&#10;    def stop_recording_replay(self):&#10;        &quot;&quot;&quot;Arrête l'enregistrement du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement du replay&quot;)&#10;        return self.send_command(&quot;ReplayStopRecording&quot;)&#10;&#10;    def play_last_replay(self, speed=100):&#10;        &quot;&quot;&quot;Joue le dernier replay enregistré à la vitesse spécifiée (en pourcentage)&quot;&quot;&quot;&#10;        logger.info(f&quot;Lecture du dernier replay à {speed}% de la vitesse normale&quot;)&#10;&#10;        # Vérifier que la vitesse est une valeur valide (généralement 25%, 50% ou 100%)&#10;        valid_speeds = [25, 50, 75, 100]&#10;        if speed not in valid_speeds:&#10;            speed = 100  # Valeur par défaut&#10;&#10;        return self.send_command(&quot;ReplayPlay&quot;, speed=speed)&#10;&#10;    def pause_replay(self):&#10;        &quot;&quot;&quot;Met en pause la lecture du replay&quot;&quot;&quot;&#10;        logger.info(&quot;Mise en pause du replay&quot;)&#10;        return self.send_command(&quot;ReplayPause&quot;)&#10;&#10;    def mark_replay_event(self, event_name=&quot;&quot;):&#10;        &quot;&quot;&quot;Marque un événement dans le replay avec un nom optionnel&quot;&quot;&quot;&#10;        logger.info(f&quot;Marquage d'événement replay: {event_name}&quot;)&#10;        if event_name:&#10;            return self.send_command(&quot;ReplayMarkIn&quot;, value=event_name)&#10;        else:&#10;            return self.send_command(&quot;ReplayMarkIn&quot;)&#10;&#10;    def get_replay_events(self):&#10;        &quot;&quot;&quot;Récupère la liste des événements de replay marqués&quot;&quot;&quot;&#10;        logger.info(&quot;Récupération des événements de replay&quot;)&#10;        # Cette fonction est conceptuelle - l'API vMix actuelle ne permet pas directement&#10;        # de récupérer la liste des événements. Vous devrez peut-être implémenter une&#10;        # solution personnalisée en utilisant les événements marqués dans votre application.&#10;        return []&#10;&#10;    def play_replay_event(self, event_index, speed=100):&#10;        &quot;&quot;&quot;Joue un événement de replay spécifique à la vitesse spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Lecture de l'événement replay {event_index} à {speed}% de la vitesse&quot;)&#10;&#10;        # Vérifier que la vitesse est une valeur valide&#10;        valid_speeds = [25, 50, 75, 100]&#10;        if speed not in valid_speeds:&#10;            speed = 100  # Valeur par défaut&#10;&#10;        return self.send_command(&quot;ReplayPlayEvent&quot;, value=event_index, speed=speed)&#10;&#10;    def set_replay_duration(self, seconds=8):&#10;        &quot;&quot;&quot;Configure la durée du buffer de replay en secondes&quot;&quot;&quot;&#10;        logger.info(f&quot;Configuration de la durée du buffer de replay à {seconds} secondes&quot;)&#10;        return self.send_command(&quot;ReplaySetDuration&quot;, value=seconds)&#10;&#10;    def start_recording(self):&#10;        &quot;&quot;&quot;Démarre l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Démarrage de l'enregistrement&quot;)&#10;        return self.send_command(&quot;StartRecording&quot;)&#10;&#10;    def stop_recording(self):&#10;        &quot;&quot;&quot;Arrête l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Arrêt de l'enregistrement&quot;)&#10;        return self.send_command(&quot;StopRecording&quot;)&#10;&#10;    def pause_recording(self):&#10;        &quot;&quot;&quot;Met en pause l'enregistrement&quot;&quot;&quot;&#10;        logger.info(&quot;Mise en pause de l'enregistrement&quot;)&#10;        return self.send_command(&quot;PauseRecording&quot;)&#10;&#10;    def load_preset(self, preset_name):&#10;        &quot;&quot;&quot;Charge un preset vMix enregistré&quot;&quot;&quot;&#10;        logger.info(f&quot;Chargement du preset {preset_name}&quot;)&#10;        return self.send_command(&quot;OpenPreset&quot;, value=preset_name)&#10;&#10;    def save_preset(self, preset_name):&#10;        &quot;&quot;&quot;Enregistre l'état actuel de vMix comme un preset&quot;&quot;&quot;&#10;        logger.info(f&quot;Enregistrement du preset {preset_name}&quot;)&#10;        return self.send_command(&quot;SavePreset&quot;, value=preset_name)&#10;&#10;    def execute_script(self, script_name):&#10;        &quot;&quot;&quot;Exécute un script vMix&quot;&quot;&quot;&#10;        logger.info(f&quot;Exécution du script {script_name}&quot;)&#10;        return self.send_command(&quot;ScriptStart&quot;, value=script_name)&#10;&#10;    ####### get vMix status #########&#10;    def get_streaming_status(self):&#10;        &quot;&quot;&quot;Récupère l'état actuel du streaming&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                streaming = root.find('streaming')&#10;                if streaming is not None:&#10;                    return streaming.text == 'True'&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut de streaming: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_recording_status(self):&#10;        &quot;&quot;&quot;Récupère l'état actuel de l'enregistrement&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                recording = root.find('recording')&#10;                if recording is not None:&#10;                    return recording.text == 'True'&#10;            return False&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération du statut d'enregistrement: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_active_input(self):&#10;        &quot;&quot;&quot;Récupère l'entrée actuellement active dans vMix&quot;&quot;&quot;&#10;        try:&#10;            response = requests.get(self.base_url, timeout=3)&#10;            if response.status_code == 200:&#10;                root = ET.fromstring(response.text)&#10;                active = root.find('active')&#10;                if active is not None:&#10;                    return active.text&#10;            return None&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la récupération de l'entrée active: {str(e)}&quot;)&#10;            return None&#10;&#10;&#10;    #### méthode pour le voleyball ####&#10;    # todo to move into a specific file/module&#10;    def update_score(self, home_score, away_score, input_number, layer_home=0, layer_away=1):&#10;        &quot;&quot;&quot;Met à jour le score du match&quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du score: {home_score}-{away_score}&quot;)&#10;        self.set_text(input_number, str(home_score), layer_home)&#10;        return self.set_text(input_number, str(away_score), layer_away)&#10;&#10;    def update_set_scores(self, sets_score, input_number, layer=2):&#10;        &quot;&quot;&quot;Met à jour le score des sets (par exemple '2-1')&quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du score des sets: {sets_score}&quot;)&#10;        return self.set_text(input_number, sets_score, layer)&#10;&#10;    def show_timeout_graphic(self, team, duration=30, overlay_number=4):&#10;        &quot;&quot;&quot;Affiche un graphique de timeout pour une équipe spécifiée&quot;&quot;&quot;&#10;        logger.info(f&quot;Affichage du graphique de timeout pour l'équipe {team}&quot;)&#10;        # Configuration du graphique de timeout&#10;        self.set_text(overlay_number, f&quot;TIMEOUT {team}&quot;, 0)&#10;        # Affichage de l'overlay&#10;        result = self.set_overlay(overlay_number, 4, True)&#10;        # Programmation de la disparition après la durée spécifiée&#10;        # Notez que ceci est conceptuel - vous devrez implémenter la temporisation ailleurs&#10;        return result&#10;&#10;    #### websocket connection ####&#10;    #todo to move into a specific file&#10;    def setup_websocket_monitoring(self, callback):&#10;        &quot;&quot;&quot;&#10;        Configure une connexion WebSocket pour surveiller les changements d'état de vMix&#10;        Cette fonction est conceptuelle et nécessiterait une implémentation spécifique&#10;        &quot;&quot;&quot;&#10;        logger.info(&quot;Configuration de la surveillance WebSocket vMix&quot;)&#10;        # La mise en œuvre dépendrait de la façon dont vMix expose ses événements WebSocket&#10;        # Cette fonction servirait de point d'entrée pour cette fonctionnalité&#10;&#10;    def set_text(self, input_id, value, selected_name=0):&#10;        &quot;&quot;&quot;&#10;        Envoie une commande SetText à un titre vMix.&#10;&#10;        Args:&#10;            input_id: ID ou nom de l'input titre&#10;            value: texte à définir&#10;            selected_name: nom du champ (ou index) dans le titre&#10;&#10;        Returns:&#10;            bool: True si la commande a réussi&#10;        &quot;&quot;&quot;&#10;        try:&#10;            params = {&#10;                'Function': 'SetText',&#10;                'Input': input_id,&#10;                'SelectedName': str(selected_name),&#10;                'Value': value&#10;            }&#10;            response = requests.get(self.base_url, params=params, timeout=3)&#10;            return response.status_code == 200&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de l'envoi de SetText: {e}&quot;)&#10;            return False&#10;&#10;    def update_scoreboard(self, team_a_name, team_b_name, score_a, score_b, sets_a, sets_b, title_input=&quot;scoreboard&quot;):&#10;        &quot;&quot;&quot;&#10;        Met à jour le scoreboard vMix avec les informations du match&#10;&#10;        Args:&#10;            team_a_name: Nom de l'équipe A&#10;            team_b_name: Nom de l'équipe B&#10;            score_a: Score de l'équipe A&#10;            score_b: Score de l'équipe B&#10;            sets_a: Sets gagnés par l'équipe A&#10;            sets_b: Sets gagnés par l'équipe B&#10;            title_input: Nom ou ID de l'input du scoreboard dans vMix&#10;&#10;        Returns:&#10;            bool: True si l'opération a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        logger.info(f&quot;Mise à jour du scoreboard: {team_a_name} {score_a}-{score_b} {team_b_name}, sets: {sets_a}-{sets_b}&quot;)&#10;&#10;        try:&#10;            # Format basé sur le code v1_0/vmix_score_updater.py&#10;            # Utilisation des noms de champs txt*.Text&#10;            # Nettoyage et validation des scores&#10;            score_a_str = '0' if not str(score_a).strip() or str(score_a).strip() == '-' else str(score_a)&#10;            score_b_str = '0' if not str(score_b).strip() or str(score_b).strip() == '-' else str(score_b)&#10;            sets_a_str = '0' if not str(sets_a).strip() or str(sets_a).strip() == '-' else str(sets_a)&#10;            sets_b_str = '0' if not str(sets_b).strip() or str(sets_b).strip() == '-' else str(sets_b)&#10;&#10;            # Mise à jour des scores et sets&#10;            fields_to_update = {&#10;                &quot;txtScoreTeamA.Text&quot;: score_a_str,&#10;                &quot;txtScoreTeamB.Text&quot;: score_b_str,&#10;                &quot;txtSetTeamA.Text&quot;: sets_a_str,&#10;                &quot;txtSetTeamB.Text&quot;: sets_b_str&#10;            }&#10;&#10;            # Mise à jour des noms d'équipes si fournis&#10;            if team_a_name:&#10;                fields_to_update[&quot;txtTeamA.Text&quot;] = team_a_name&#10;            if team_b_name:&#10;                fields_to_update[&quot;txtTeamB.Text&quot;] = team_b_name&#10;&#10;            # Essayer toutes les variantes possibles des noms de champs&#10;            all_fields = {}&#10;            all_fields.update(fields_to_update)&#10;&#10;            # Variantes sans le .Text&#10;            for field, value in fields_to_update.items():&#10;                field_without_text = field.replace(&quot;.Text&quot;, &quot;&quot;)&#10;                all_fields[field_without_text] = value&#10;&#10;            # Variantes sans le txt&#10;            for field, value in fields_to_update.items():&#10;                field_without_txt = field.replace(&quot;txt&quot;, &quot;&quot;)&#10;                all_fields[field_without_txt] = value&#10;                field_without_both = field.replace(&quot;txt&quot;, &quot;&quot;).replace(&quot;.Text&quot;, &quot;&quot;)&#10;                all_fields[field_without_both] = value&#10;&#10;            # Variantes avec les noms standard&#10;            standard_fields = {&#10;                &quot;teamNameA&quot;: team_a_name,&#10;                &quot;teamNameB&quot;: team_b_name,&#10;                &quot;scoreTeamA&quot;: score_a_str,&#10;                &quot;scoreTeamB&quot;: score_b_str,&#10;                &quot;setTeamA&quot;: sets_a_str,&#10;                &quot;setTeamB&quot;: sets_b_str&#10;            }&#10;            all_fields.update(standard_fields)&#10;&#10;            # Envoi direct des requêtes à vMix (méthode de v1_0)&#10;            success = True&#10;            for field_name, value in all_fields.items():&#10;                try:&#10;                    url = f&quot;{self.base_url}?Function=SetText&amp;Input={title_input}&amp;SelectedName={field_name}&amp;Value={value}&quot;&#10;                    response = requests.get(url, timeout=3)&#10;                    if response.status_code == 200:&#10;                        logger.info(f&quot;Texte mis à jour: Input={title_input}, Champ={field_name}, Valeur={value}&quot;)&#10;                    else:&#10;                        success = False&#10;                        logger.warning(f&quot;Échec de mise à jour pour le champ {field_name}: {response.status_code}&quot;)&#10;                except Exception as e:&#10;                    success = False&#10;                    logger.error(f&quot;Erreur lors de la mise à jour pour le champ {field_name}: {e}&quot;)&#10;&#10;            return success&#10;&#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du scoreboard: {e}&quot;)&#10;            return False&#10;&#10;    def update_scoreboard(self, team_a_name, team_b_name, score_a, score_b, sets_a, sets_b, title_input=&quot;scoreboard&quot;):&#10;        &quot;&quot;&quot;&#10;        Met à jour le scoreboard dans vMix.&#10;        &#10;        Args:&#10;            team_a_name (str): Nom de l'équipe A&#10;            team_b_name (str): Nom de l'équipe B&#10;            score_a (int): Score de l'équipe A&#10;            score_b (int): Score de l'équipe B&#10;            sets_a (int): Sets gagnés par l'équipe A&#10;            sets_b (int): Sets gagnés par l'équipe B&#10;            title_input (str): Nom de l'entrée title vMix à mettre à jour (par défaut: &quot;scoreboard&quot;)&#10;            &#10;        Returns:&#10;            bool: True si la mise à jour a réussi, False sinon&#10;        &quot;&quot;&quot;&#10;        try:&#10;            # Vérifier la connexion à vMix&#10;            if not self.check_connection():&#10;                logger.error(&quot;Impossible de se connecter à vMix pour mettre à jour le scoreboard&quot;)&#10;                return False&#10;            &#10;            # Mettre à jour le nom de l'équipe A&#10;            params_team_a = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;teamNameA&quot;,&#10;                &quot;Value&quot;: str(team_a_name)&#10;            }&#10;            response_team_a = requests.get(self.base_url, params=params_team_a, timeout=2)&#10;            &#10;            # Mettre à jour le nom de l'équipe B&#10;            params_team_b = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;teamNameB&quot;,&#10;                &quot;Value&quot;: str(team_b_name)&#10;            }&#10;            response_team_b = requests.get(self.base_url, params=params_team_b, timeout=2)&#10;            &#10;            # Mettre à jour le score de l'équipe A&#10;            params_score_a = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;scoreTeamA&quot;,&#10;                &quot;Value&quot;: str(score_a)&#10;            }&#10;            response_score_a = requests.get(self.base_url, params=params_score_a, timeout=2)&#10;            &#10;            # Mettre à jour le score de l'équipe B&#10;            params_score_b = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;scoreTeamB&quot;,&#10;                &quot;Value&quot;: str(score_b)&#10;            }&#10;            response_score_b = requests.get(self.base_url, params=params_score_b, timeout=2)&#10;            &#10;            # Mettre à jour les sets de l'équipe A&#10;            params_sets_a = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;setTeamA&quot;,&#10;                &quot;Value&quot;: str(sets_a)&#10;            }&#10;            response_sets_a = requests.get(self.base_url, params=params_sets_a, timeout=2)&#10;            &#10;            # Mettre à jour les sets de l'équipe B&#10;            params_sets_b = {&#10;                &quot;Function&quot;: &quot;SetText&quot;,&#10;                &quot;Input&quot;: title_input,&#10;                &quot;SelectedName&quot;: &quot;setTeamB&quot;,&#10;                &quot;Value&quot;: str(sets_b)&#10;            }&#10;            response_sets_b = requests.get(self.base_url, params=params_sets_b, timeout=2)&#10;            &#10;            # Vérifier si toutes les requêtes ont réussi&#10;            success = (&#10;                response_team_a.status_code == 200 and&#10;                response_team_b.status_code == 200 and&#10;                response_score_a.status_code == 200 and&#10;                response_score_b.status_code == 200 and&#10;                response_sets_a.status_code == 200 and&#10;                response_sets_b.status_code == 200&#10;            )&#10;            &#10;            if success:&#10;                logger.info(f&quot;Scoreboard mis à jour avec succès: {team_a_name} {score_a}-{score_b} {team_b_name}, sets: {sets_a}-{sets_b}&quot;)&#10;            else:&#10;                logger.error(&quot;Échec de la mise à jour du scoreboard&quot;)&#10;            &#10;            return success&#10;        &#10;        except Exception as e:&#10;            logger.error(f&quot;Erreur lors de la mise à jour du scoreboard: {str(e)}&quot;)&#10;            return False&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/static/js/live_broadcast.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/static/js/live_broadcast.js" />
              <option name="originalContent" value="// Application Vue pour la diffusion en direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // État de chargement&#10;            loading: true,&#10;&#10;            // Système de notifications&#10;            notifications: [],&#10;            notificationId: 0,&#10;&#10;            // Données du score&#10;            scoreData: {&#10;                teamA: {&#10;                    name: &quot;Équipe A&quot;,&#10;                    score: 0,&#10;                    sets: 0&#10;                },&#10;                teamB: {&#10;                    name: &quot;Équipe B&quot;,&#10;                    score: 0,&#10;                    sets: 0&#10;                }&#10;            },&#10;&#10;            // Statut de streaming et d'enregistrement&#10;            streamingStatus: {&#10;                isStreaming: false,&#10;                isRecording: false,&#10;                streamingStartTime: null,&#10;                recordingStartTime: null,&#10;                streamingTime: 0,&#10;                recordingTime: 0&#10;            },&#10;&#10;            // Canal de streaming sélectionné&#10;            streamingChannel: 0,&#10;&#10;            // Configuration audio commentateur et ambiance&#10;            commentatorAudio: true,&#10;            commentatorVolume: 100,&#10;            commentatorInputId: null,&#10;            ambientAudio: true,&#10;            ambientVolume: 80,&#10;            ambientInputId: null,&#10;&#10;            // Liste des entrées vidéo disponibles dans vMix&#10;            videoInputs: [],&#10;&#10;            // État de l'audio pour chaque entrée&#10;            audioStates: {},&#10;&#10;            // Configuration des replays&#10;            replayConfig: {&#10;                duration: 8&#10;            },&#10;&#10;            // État des replays&#10;            replayStatus: {&#10;                isRecording: false,&#10;                isPlaying: false&#10;            },&#10;&#10;            // Événements de replay marqués&#10;            replayEvents: [],&#10;&#10;            // Nom pour le marquage d'événements&#10;            eventName: &quot;&quot;,&#10;&#10;            // Canal actif pour le streaming&#10;            activeStreamingChannel: null,&#10;&#10;            // Statut du rafraîchissement&#10;            isRefreshing: false,&#10;&#10;            // Variables pour suivre les points consécutifs&#10;            consecutivePoints: {&#10;                A: 0,&#10;                B: 0&#10;            }&#10;        };&#10;    },&#10;&#10;    computed: {&#10;        // Afficher le bouton de rafraîchissement si aucune source audio n'est détectée&#10;        showRefreshButton() {&#10;            return !this.commentatorInputId &amp;&amp; !this.ambientInputId;&#10;        },&#10;&#10;        // Calculer le nombre de points consécutifs pour l'équipe A&#10;        consecutivePointsA() {&#10;            return this.consecutivePoints.A || 0;&#10;        },&#10;&#10;        // Calculer le nombre de points consécutifs pour l'équipe B&#10;        consecutivePointsB() {&#10;            return this.consecutivePoints.B || 0;&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Initialiser l'application&#10;        this.initialize();&#10;&#10;        // Configurer socket.io pour les mises à jour en temps réel&#10;        this.setupSocketConnection();&#10;&#10;        // Mettre à jour les timers de streaming/enregistrement toutes les secondes&#10;        setInterval(() =&gt; {&#10;            this.updateTimers();&#10;        }, 1000);&#10;    },&#10;&#10;    methods: {&#10;        // Initialisation&#10;        async initialize() {&#10;            try {&#10;                // Récupérer le statut de connexion à vMix&#10;                await this.checkVMixConnection();&#10;&#10;                // Récupérer les entrées vidéo disponibles&#10;                await this.fetchVMixInputs();&#10;&#10;                // Récupérer le statut du streaming et de l'enregistrement&#10;                await this.fetchStreamingStatus();&#10;&#10;                // Charger la configuration des replays&#10;                await this.fetchReplayConfig();&#10;&#10;                // Charger les données des équipes du match&#10;                await this.loadMatchTeams();&#10;&#10;                // Charger les événements de replay existants&#10;                await this.loadReplayEvents();&#10;&#10;                // Tout est chargé&#10;                this.loading = false;&#10;&#10;                // Détecter les inputs pour le commentateur et l'ambiance&#10;                this.detectSpecialInputs();&#10;&#10;                // Notification de démarrage&#10;                this.addNotification(&quot;Interface de diffusion initialisée&quot;, &quot;success&quot;);&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors de l'initialisation:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors de l'initialisation&quot;, &quot;danger&quot;);&#10;                this.loading = false;&#10;            }&#10;        },&#10;&#10;        // Vérifier la connexion à vMix&#10;        async checkVMixConnection() {&#10;            try {&#10;                const response = await fetch('/api/vmix/status');&#10;                const data = await response.json();&#10;&#10;                if (!data.connected) {&#10;                    this.addNotification(&quot;Impossible de se connecter à vMix&quot;, &quot;danger&quot;);&#10;                    return false;&#10;                }&#10;&#10;                this.addNotification(`Connecté à vMix (${data.host}:${data.port})`, &quot;success&quot;);&#10;                return true;&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors de la vérification de la connexion vMix:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors de la connexion à vMix&quot;, &quot;danger&quot;);&#10;                return false;&#10;            }&#10;        },&#10;&#10;        // Récupérer les entrées vMix&#10;        async fetchVMixInputs() {&#10;            try {&#10;                this.isRefreshing = true;&#10;                const response = await fetch('/api/vmix/inputs');&#10;                const data = await response.json();&#10;&#10;                // Si nous avons une réponse catégorisée&#10;                if (data.video || data.audio) {&#10;                    // Combiner toutes les entrées et les trier&#10;                    let allInputs = [];&#10;&#10;                    if (data.video) {&#10;                        allInputs = [...allInputs, ...data.video.map(input =&gt; ({...input, category: 'video'}))];&#10;                    }&#10;&#10;                    if (data.audio) {&#10;                        allInputs = [...allInputs, ...data.audio.map(input =&gt; ({...input, category: 'audio'}))];&#10;                    }&#10;&#10;                    if (data.title) {&#10;                        allInputs = [...allInputs, ...data.title.map(input =&gt; ({...input, category: 'title'}))];&#10;                    }&#10;&#10;                    if (data.other) {&#10;                        allInputs = [...allInputs, ...data.other.map(input =&gt; ({...input, category: 'other'}))];&#10;                    }&#10;&#10;                    this.videoInputs = allInputs.sort((a, b) =&gt; a.id - b.id);&#10;                } else if (Array.isArray(data.inputs)) {&#10;                    // Ancienne structure API&#10;                    this.videoInputs = data.inputs;&#10;                } else {&#10;                    console.error(&quot;Format de réponse inattendu:&quot;, data);&#10;                    this.addNotification(&quot;Erreur lors de la récupération des entrées vMix&quot;, &quot;danger&quot;);&#10;                }&#10;&#10;                // Initialiser l'état audio pour chaque entrée&#10;                this.videoInputs.forEach(input =&gt; {&#10;                    if (!this.audioStates.hasOwnProperty(input.id)) {&#10;                        this.$set(this.audioStates, input.id, true);  // Par défaut, l'audio est activé&#10;                    }&#10;                });&#10;&#10;                // Détecter les entrées spéciales (commentateur, ambiance)&#10;                this.detectSpecialInputs();&#10;&#10;                console.log(&quot;Entrées vMix récupérées:&quot;, this.videoInputs);&#10;                this.isRefreshing = false;&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors de la récupération des entrées vMix:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors de la récupération des entrées vMix&quot;, &quot;danger&quot;);&#10;                this.isRefreshing = false;&#10;            }&#10;        },&#10;&#10;        // Rafraîchir les entrées vMix&#10;        async refreshAudioInputs() {&#10;            try {&#10;                this.isRefreshing = true;&#10;                await this.fetchVMixInputs();&#10;                this.addNotification(&quot;Sources audio rafraîchies&quot;, &quot;success&quot;);&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors du rafraîchissement des sources audio:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors du rafraîchissement des sources audio&quot;, &quot;danger&quot;);&#10;            } finally {&#10;                this.isRefreshing = false;&#10;            }&#10;        },&#10;&#10;        // Détecter les entrées spéciales (commentateur, ambiance)&#10;        detectSpecialInputs() {&#10;            // Chercher l'entrée du commentateur&#10;            const commentatorInput = this.videoInputs.find(input =&gt;&#10;                input.name.toLowerCase().includes('comment') ||&#10;                input.name.toLowerCase().includes('micro') ||&#10;                input.name.toLowerCase().includes('mic')&#10;            );&#10;&#10;            if (commentatorInput) {&#10;                this.commentatorInputId = commentatorInput.id;&#10;                console.log(&quot;Entrée commentateur détectée:&quot;, commentatorInput);&#10;            }&#10;&#10;            // Chercher l'entrée d'ambiance&#10;            const ambientInput = this.videoInputs.find(input =&gt;&#10;                input.name.toLowerCase().includes('ambiance') ||&#10;                input.name.toLowerCase().includes('ambient') ||&#10;                input.name.toLowerCase().includes('crowd')&#10;            );&#10;&#10;            if (ambientInput) {&#10;                this.ambientInputId = ambientInput.id;&#10;                console.log(&quot;Entrée ambiance détectée:&quot;, ambientInput);&#10;            }&#10;        },&#10;&#10;        // Vérifier si une entrée est une source audio spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'une entrée&#10;        async toggleAudio(inputId) {&#10;            try {&#10;                // Inverser l'état actuel&#10;                const newState = !this.audioStates[inputId];&#10;&#10;                // Mettre à jour l'état localement&#10;                this.$set(this.audioStates, inputId, newState);&#10;&#10;                // Envoyer la commande à vMix&#10;                const response = await fetch('/api/vmix/audio/toggle', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        inputId: inputId,&#10;                        mute: !newState  // true pour mute, false pour unmute&#10;                    })&#10;                });&#10;&#10;                const data = await response.json();&#10;&#10;                if (data.status === 'success') {&#10;                    const inputName = this.videoInputs.find(input =&gt; input.id === inputId)?.name || `Input ${inputId}`;&#10;                    this.addNotification(`Audio ${newState ? 'activé' : 'désactivé'} pour ${inputName}`, &quot;success&quot;);&#10;                } else {&#10;                    throw new Error(data.error || &quot;Erreur inconnue&quot;);&#10;                }&#10;            } catch (error) {&#10;                console.error(`Erreur lors de la modification de l'audio pour l'entrée ${inputId}:`, error);&#10;                this.addNotification(`Erreur lors de la modification de l'audio: ${error.message}`, &quot;danger&quot;);&#10;&#10;                // Rétablir l'état précédent en cas d'erreur&#10;                this.$set(this.audioStates, inputId, !this.audioStates[inputId]);&#10;            }&#10;        },&#10;&#10;        // Activer/désactiver l'audio du commentateur&#10;        async toggleCommentatorAudio() {&#10;            if (this.commentatorInputId) {&#10;                this.commentatorAudio = !this.commentatorAudio;&#10;                await this.toggleAudio(this.commentatorInputId);&#10;            }&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'ambiance&#10;        async toggleAmbientAudio() {&#10;            if (this.ambientInputId) {&#10;                this.ambientAudio = !this.ambientAudio;&#10;                await this.toggleAudio(this.ambientInputId);&#10;            }&#10;        },&#10;&#10;        // Mettre à jour le volume du commentateur&#10;        async updateCommentatorVolume() {&#10;            if (this.commentatorInputId) {&#10;                try {&#10;                    const response = await fetch('/api/vmix/audio/volume', {&#10;                        method: 'POST',&#10;                        headers: {&#10;                            'Content-Type': 'application/json'&#10;                        },&#10;                        body: JSON.stringify({&#10;                            inputId: this.commentatorInputId,&#10;                            volume: this.commentatorVolume&#10;                        })&#10;                    });&#10;&#10;                    const data = await response.json();&#10;&#10;                    if (data.status !== 'success') {&#10;                        throw new Error(data.error || &quot;Erreur inconnue&quot;);&#10;                    }&#10;                } catch (error) {&#10;                    console.error(&quot;Erreur lors de la mise à jour du volume du commentateur:&quot;, error);&#10;                    this.addNotification(`Erreur lors de la mise à jour du volume: ${error.message}`, &quot;danger&quot;);&#10;                }&#10;            }&#10;        },&#10;&#10;        // Mettre à jour le volume d'ambiance&#10;        async updateAmbientVolume() {&#10;            if (this.ambientInputId) {&#10;                try {&#10;                    const response = await fetch('/api/vmix/audio/volume', {&#10;                        method: 'POST',&#10;                        headers: {&#10;                            'Content-Type': 'application/json'&#10;                        },&#10;                        body: JSON.stringify({&#10;                            inputId: this.ambientInputId,&#10;                            volume: this.ambientVolume&#10;                        })&#10;                    });&#10;&#10;                    const data = await response.json();&#10;&#10;                    if (data.status !== 'success') {&#10;                        throw new Error(data.error || &quot;Erreur inconnue&quot;);&#10;                    }&#10;                } catch (error) {&#10;                    console.error(&quot;Erreur lors de la mise à jour du volume d'ambiance:&quot;, error);&#10;                    this.addNotification(`Erreur lors de la mise à jour du volume: ${error.message}`, &quot;danger&quot;);&#10;                }&#10;            }&#10;        },&#10;&#10;        // Initialisation&#10;        initialize() {&#10;            // Charger les entrées vMix&#10;            this.loadVMixInputs();&#10;&#10;            // Charger les données des équipes du match&#10;            this.loadMatchTeams();&#10;&#10;            // Vérifier l'état de streaming et d'enregistrement&#10;            this.checkStreamingStatus();&#10;&#10;            // Charger les événements de replay existants&#10;            this.loadReplayEvents();&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        loadVMixInputs() {&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Organiser les inputs par catégorie&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Trouver les sources audio principales&#10;                    // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                    const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                    if (commentatorInput) {&#10;                        this.commentatorInputId = commentatorInput.id;&#10;                        console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                    }&#10;&#10;                    // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                    const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                    if (ambientInput) {&#10;                        this.ambientInputId = ambientInput.id;&#10;                        console.log('Input ambiance trouvé:', ambientInput.name);&#10;                    }&#10;&#10;                    // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;                    this.loading = false;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                    this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                    this.loading = false;&#10;                });&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Initialisation&#10;        initialize() {&#10;            // Charger les entrées vMix&#10;            this.loadVMixInputs();&#10;&#10;            // Charger les données des équipes du match&#10;            this.loadMatchTeams();&#10;&#10;            // Vérifier l'état de streaming et d'enregistrement&#10;            this.checkStreamingStatus();&#10;&#10;            // Charger les événements de replay existants&#10;            this.loadReplayEvents();&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        loadVMixInputs() {&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Organiser les inputs par catégorie&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Trouver les sources audio principales&#10;                    // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                    const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                    if (commentatorInput) {&#10;                        this.commentatorInputId = commentatorInput.id;&#10;                        console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                    }&#10;&#10;                    // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                    const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                    if (ambientInput) {&#10;                        this.ambientInputId = ambientInput.id;&#10;                        console.log('Input ambiance trouvé:', ambientInput.name);&#10;                    }&#10;&#10;                    // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;                    this.loading = false;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                    this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                    this.loading = false;&#10;                });&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Initialisation&#10;        initialize() {&#10;            // Charger les entrées vMix&#10;            this.loadVMixInputs();&#10;&#10;            // Charger les données des équipes du match&#10;            this.loadMatchTeams();&#10;&#10;            // Vérifier l'état de streaming et d'enregistrement&#10;            this.checkStreamingStatus();&#10;&#10;            // Charger les événements de replay existants&#10;            this.loadReplayEvents();&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        loadVMixInputs() {&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Organiser les inputs par catégorie&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Trouver les sources audio principales&#10;                    // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                    const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                    if (commentatorInput) {&#10;                        this.commentatorInputId = commentatorInput.id;&#10;                        console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                    }&#10;&#10;                    // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                    const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                    if (ambientInput) {&#10;                        this.ambientInputId = ambientInput.id;&#10;                        console.log('Input ambiance trouvé:', ambientInput.name);&#10;                    }&#10;&#10;                    // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;                    this.loading = false;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                    this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                    this.loading = false;&#10;                });&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Initialisation&#10;        initialize() {&#10;            // Charger les entrées vMix&#10;            this.loadVMixInputs();&#10;&#10;            // Charger les données des équipes du match&#10;            this.loadMatchTeams();&#10;&#10;            // Vérifier l'état de streaming et d'enregistrement&#10;            this.checkStreamingStatus();&#10;&#10;            // Charger les événements de replay existants&#10;            this.loadReplayEvents();&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        loadVMixInputs() {&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Organiser les inputs par catégorie&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Trouver les sources audio principales&#10;                    // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                    const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                    if (commentatorInput) {&#10;                        this.commentatorInputId = commentatorInput.id;&#10;                        console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                    }&#10;&#10;                    // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                    const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                    if (ambientInput) {&#10;                        this.ambientInputId = ambientInput.id;&#10;                        console.log('Input ambiance trouvé:', ambientInput.name);&#10;                    }&#10;&#10;                    // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;                    this.loading = false;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                    this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                    this.loading = false;&#10;                });&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Initialisation&#10;        initialize() {&#10;            // Charger les entrées vMix&#10;            this.loadVMixInputs();&#10;&#10;            // Charger les données des équipes du match&#10;            this.loadMatchTeams();&#10;&#10;            // Vérifier l'état de streaming et d'enregistrement&#10;            this.checkStreamingStatus();&#10;&#10;            // Charger les événements de replay existants&#10;            this.loadReplayEvents();&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        loadVMixInputs() {&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Organiser les inputs par catégorie&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Trouver les sources audio principales&#10;                    // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                    const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                    if (commentatorInput) {&#10;                        this.commentatorInputId = commentatorInput.id;&#10;                        console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                    }&#10;&#10;                    // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                    const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                    if (ambientInput) {&#10;                        this.ambientInputId = ambientInput.id;&#10;                        console.log('Input ambiance trouvé:', ambientInput.name);&#10;                    }&#10;&#10;                    // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;                    this.loading = false;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                    this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                    this.loading = false;&#10;                });&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Activer/désactiver l'audio du commentateur&#10;        toggleCommentatorAudio() {&#10;            if (!this.commentatorInputId) return;&#10;&#10;            fetch('/api/vmix/audio/toggle', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    mute: !this.commentatorAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Audio commentateur ${this.commentatorAudio ? 'désactivé' : 'activé'}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio commentateur', 'danger');&#10;                    // Revenir à l'état précédent en cas d'erreur&#10;                    this.commentatorAudio = !this.commentatorAudio;&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio commentateur:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio commentateur', 'danger');&#10;                // Revenir à l'état précédent en cas d'erreur&#10;                this.commentatorAudio = !this.commentatorAudio;&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume du commentateur&#10;        updateCommentatorVolume() {&#10;            if (!this.commentatorInputId) return;&#10;&#10;            fetch('/api/vmix/audio/volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    volume: this.commentatorVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Volume commentateur ajusté à ${this.commentatorVolume}%`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de l\'ajustement du volume commentateur', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de l\'ajustement du volume commentateur:', error);&#10;                this.addNotification('Erreur lors de l\'ajustement du volume commentateur', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'ambiance&#10;        toggleAmbientAudio() {&#10;            if (!this.ambientInputId) return;&#10;&#10;            fetch('/api/vmix/audio/toggle', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    mute: !this.ambientAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Audio d'ambiance ${this.ambientAudio ? 'désactivé' : 'activé'}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio d\'ambiance', 'danger');&#10;                    // Revenir à l'état précédent en cas d'erreur&#10;                    this.ambientAudio = !this.ambientAudio;&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio d\'ambiance:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio d\'ambiance', 'danger');&#10;                // Revenir à l'état précédent en cas d'erreur&#10;                this.ambientAudio = !this.ambientAudio;&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume d'ambiance&#10;        updateAmbientVolume() {&#10;            if (!this.ambientInputId) return;&#10;&#10;            fetch('/api/vmix/audio/volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    volume: this.ambientVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Volume d'ambiance ajusté à ${this.ambientVolume}%`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de l\'ajustement du volume d\'ambiance', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de l\'ajustement du volume d\'ambiance:', error);&#10;                this.addNotification('Erreur lors de l\'ajustement du volume d\'ambiance', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'une entrée générique&#10;        toggleAudio(inputId) {&#10;            if (!inputId) return;&#10;&#10;            fetch('/api/vmix/audio/toggle', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: inputId,&#10;                    mute: !this.audioStates[inputId]&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    const inputName = this.getInputNameById(inputId);&#10;                    this.addNotification(`Audio ${inputName} ${this.audioStates[inputId] ? 'désactivé' : 'activé'}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio', 'danger');&#10;                    // Revenir à l'état précédent en cas d'erreur&#10;                    this.audioStates[inputId] = !this.audioStates[inputId];&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio', 'danger');&#10;                // Revenir à l'état précédent en cas d'erreur&#10;                this.audioStates[inputId] = !this.audioStates[inputId];&#10;            });&#10;        },&#10;&#10;        // Obtenir le nom d'un input par son ID&#10;        getInputNameById(inputId) {&#10;            const input = this.videoInputs.find(input =&gt; input.id === inputId);&#10;            return input ? input.name : `Input ${inputId}`;&#10;        },&#10;&#10;        // Charger les données des équipes du match&#10;        loadMatchTeams() {&#10;            fetch('/api/teams/match/current')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.team_a) {&#10;                        this.scoreData.teamA.name = data.team_a.name;&#10;                    }&#10;&#10;                    if (data.team_b) {&#10;                        this.scoreData.teamB.name = data.team_b.name;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des équipes du match:', error);&#10;                });&#10;        },&#10;&#10;        // Vérifier l'état de streaming et d'enregistrement&#10;        checkStreamingStatus() {&#10;            fetch('/api/vmix/streaming-status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.updateStreamingStatus(data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la vérification du statut de streaming:', error);&#10;                });&#10;        },&#10;&#10;        // Mettre à jour l'état de streaming et d'enregistrement&#10;        updateStreamingStatus(data) {&#10;            this.streamingStatus.isStreaming = data.isStreaming || false;&#10;            this.streamingStatus.isRecording = data.isRecording || false;&#10;&#10;            // Initialiser les timers si nécessaire&#10;            if (this.streamingStatus.isStreaming &amp;&amp; !this.streamingStatus.streamingStartTime) {&#10;                this.streamingStatus.streamingStartTime = data.streamingStartTime || Date.now();&#10;            } else if (!this.streamingStatus.isStreaming) {&#10;                this.streamingStatus.streamingStartTime = null;&#10;                this.streamingStatus.streamingTime = 0;&#10;            }&#10;&#10;            if (this.streamingStatus.isRecording &amp;&amp; !this.streamingStatus.recordingStartTime) {&#10;                this.streamingStatus.recordingStartTime = data.recordingStartTime || Date.now();&#10;            } else if (!this.streamingStatus.isRecording) {&#10;                this.streamingStatus.recordingStartTime = null;&#10;                this.streamingStatus.recordingTime = 0;&#10;            }&#10;        },&#10;&#10;        // Mettre à jour les timers de streaming et d'enregistrement&#10;        updateTimers() {&#10;            const now = Date.now();&#10;&#10;            if (this.streamingStatus.isStreaming &amp;&amp; this.streamingStatus.streamingStartTime) {&#10;                this.streamingStatus.streamingTime = Math.floor((now - this.streamingStatus.streamingStartTime) / 1000);&#10;            }&#10;&#10;            if (this.streamingStatus.isRecording &amp;&amp; this.streamingStatus.recordingStartTime) {&#10;                this.streamingStatus.recordingTime = Math.floor((now - this.streamingStatus.recordingStartTime) / 1000);&#10;            }&#10;        },&#10;&#10;        // Charger les événements de replay&#10;        loadReplayEvents() {&#10;            fetch('/api/replay/events')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.replayEvents = data.events || [];&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des événements de replay:', error);&#10;                });&#10;        },&#10;&#10;        // Formater une durée en format mm:ss ou hh:mm:ss&#10;        formatDuration(seconds) {&#10;            if (!seconds) return '00:00';&#10;&#10;            const hours = Math.floor(seconds / 3600);&#10;            const minutes = Math.floor((seconds % 3600) / 60);&#10;            const remainingSeconds = seconds % 60;&#10;&#10;            if (hours &gt; 0) {&#10;                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;&#10;            } else {&#10;                return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;&#10;            }&#10;        },&#10;&#10;        // Formater un timestamp en heure locale&#10;        formatTime(timestamp) {&#10;            if (!timestamp) return '';&#10;            return new Date(timestamp).toLocaleTimeString();&#10;        },&#10;&#10;        // Ajouter une notification&#10;        addNotification(message, type = 'info') {&#10;            const id = this.notificationId++;&#10;            this.notifications.push({ id, message, type });&#10;&#10;            // Supprimer automatiquement après 5 secondes&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, 5000);&#10;        },&#10;&#10;        // === GESTION DU SCORE ===&#10;&#10;        // Variables pour suivre les points consécutifs&#10;        computed: {&#10;            // Calculer le nombre de points consécutifs pour l'équipe A&#10;            consecutivePointsA() {&#10;                return this.consecutivePoints.A || 0;&#10;            },&#10;&#10;            // Calculer le nombre de points consécutifs pour l'équipe B&#10;            consecutivePointsB() {&#10;                return this.consecutivePoints.B || 0;&#10;            }&#10;        },&#10;&#10;        // Incrémenter le score d'une équipe&#10;        incrementScore(team) {&#10;            if (team === 'A') {&#10;                this.scoreData.teamA.score++;&#10;                // Incrémenter les points consécutifs pour l'équipe A&#10;                this.consecutivePoints.A = (this.consecutivePoints.A || 0) + 1;&#10;                // Réinitialiser les points consécutifs pour l'équipe B&#10;                this.consecutivePoints.B = 0;&#10;            } else {&#10;                this.scoreData.teamB.score++;&#10;                // Incrémenter les points consécutifs pour l'équipe B&#10;                this.consecutivePoints.B = (this.consecutivePoints.B || 0) + 1;&#10;                // Réinitialiser les points consécutifs pour l'équipe A&#10;                this.consecutivePoints.A = 0;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Décrémenter le score d'une équipe&#10;        decrementScore(team) {&#10;            if (team === 'A' &amp;&amp; this.scoreData.teamA.score &gt; 0) {&#10;                this.scoreData.teamA.score--;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints.A = 0;&#10;            } else if (team === 'B' &amp;&amp; this.scoreData.teamB.score &gt; 0) {&#10;                this.scoreData.teamB.score--;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints.B = 0;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Mettre à jour les sets&#10;        updateSets(team) {&#10;            if (team === 'A') {&#10;                this.scoreData.teamA.sets++;&#10;            } else {&#10;                this.scoreData.teamB.sets++;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Réinitialiser les scores (implémentation pour le bouton &quot;Réinitialiser&quot;)&#10;        resetScores() {&#10;            // Demander confirmation avant de réinitialiser&#10;            if (confirm('Êtes-vous sûr de vouloir réinitialiser tous les scores?')) {&#10;                // Réinitialiser les scores des deux équipes&#10;                this.scoreData.teamA.score = 0;&#10;                this.scoreData.teamB.score = 0;&#10;                this.scoreData.teamA.sets = 0;&#10;                this.scoreData.teamB.sets = 0;&#10;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints = { A: 0, B: 0 };&#10;&#10;                // Mettre à jour le score dans vMix&#10;                this.updateScoreInVMix();&#10;&#10;                // Afficher une notification&#10;                this.addNotification('Tous les scores ont été réinitialisés', 'success');&#10;            }&#10;        },&#10;&#10;        // Commencer un nouveau set (implémentation pour le bouton &quot;Nouveau set&quot;)&#10;        newSet() {&#10;            // Demander confirmation avant de commencer un nouveau set&#10;            if (confirm('Êtes-vous sûr de vouloir commencer un nouveau set?')) {&#10;                // Déterminer le gagnant du set actuel&#10;                if (this.scoreData.teamA.score &gt; this.scoreData.teamB.score) {&#10;                    // L'équipe A gagne le set&#10;                    this.scoreData.teamA.sets++;&#10;                } else if (this.scoreData.teamB.score &gt; this.scoreData.teamA.score) {&#10;                    // L'équipe B gagne le set&#10;                    this.scoreData.teamB.sets++;&#10;                } else {&#10;                    // En cas d'égalité, demander qui gagne le set&#10;                    if (confirm('Les scores sont à égalité. L\'équipe A remporte-t-elle le set? Cliquez sur Annuler pour l\'équipe B.')) {&#10;                        this.scoreData.teamA.sets++;&#10;                    } else {&#10;                        this.scoreData.teamB.sets++;&#10;                    }&#10;                }&#10;&#10;                // Réinitialiser les scores pour le nouveau set&#10;                this.scoreData.teamA.score = 0;&#10;                this.scoreData.teamB.score = 0;&#10;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints = { A: 0, B: 0 };&#10;&#10;                // Mettre à jour le score dans vMix&#10;                this.updateScoreInVMix();&#10;&#10;                // Afficher une notification&#10;                this.addNotification('Nouveau set commencé', 'success');&#10;            }&#10;        },&#10;&#10;        // Envoyer le score vers vMix&#10;        updateScoreInVMix() {&#10;            fetch('/api/stream/update-score', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    teamA: {&#10;                        name: this.scoreData.teamA.name,&#10;                        score: this.scoreData.teamA.score,&#10;                        sets: this.scoreData.teamA.sets&#10;                    },&#10;                    teamB: {&#10;                        name: this.scoreData.teamB.name,&#10;                        score: this.scoreData.teamB.score,&#10;                        sets: this.scoreData.teamB.sets&#10;                    }&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification('Score mis à jour dans vMix', 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la mise à jour du score', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la mise à jour du score:', error);&#10;                this.addNotification('Erreur lors de la mise à jour du score', 'danger');&#10;            });&#10;        },&#10;&#10;        // === GESTION DU STREAMING ===&#10;&#10;        // Démarrer le streaming&#10;        startStreaming() {&#10;            // Récupérer le canal sélectionné et ajouter 1 pour la correspondance avec vMix (canaux 1-5)&#10;            const selectedChannel = parseInt(this.streamingChannel) + 1;&#10;&#10;            fetch('/api/vmix/start-streaming', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    channel: selectedChannel&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    // Enregistrer le canal utilisé pour pouvoir l'utiliser lors de l'arrêt&#10;                    this.activeStreamingChannel = selectedChannel;&#10;                    this.addNotification(`Streaming démarré sur le canal ${selectedChannel}`, 'success');&#10;                    this.streamingStatus.isStreaming = true;&#10;                    this.streamingStatus.streamingStartTime = Date.now();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du démarrage du streaming:', error);&#10;                this.addNotification('Erreur lors du démarrage du streaming', 'danger');&#10;            });&#10;        },&#10;&#10;        // Arrêter le streaming&#10;        stopStreaming() {&#10;            if (confirm('Êtes-vous sûr de vouloir arrêter le streaming?')) {&#10;                // Utiliser le canal actif pour l'arrêt du streaming&#10;                const channelToStop = this.activeStreamingChannel || parseInt(this.streamingChannel) + 1;&#10;&#10;                fetch('/api/vmix/stop-streaming', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        channel: channelToStop&#10;                    })&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Streaming arrêté', 'success');&#10;                        this.streamingStatus.isStreaming = false;&#10;                        this.streamingStatus.streamingStartTime = null;&#10;                        this.streamingStatus.streamingTime = 0;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de l\'arrêt du streaming:', error);&#10;                    this.addNotification('Erreur lors de l\'arrêt du streaming', 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Démarrer l'enregistrement&#10;        startRecording() {&#10;            fetch('/api/vmix/start-recording', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification('Enregistrement démarré', 'success');&#10;                    this.streamingStatus.isRecording = true;&#10;                    this.streamingStatus.recordingStartTime = Date.now();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du démarrage de l\'enregistrement:', error);&#10;                this.addNotification('Erreur lors du démarrage de l\'enregistrement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Arrêter l'enregistrement&#10;        stopRecording() {&#10;            if (confirm('Êtes-vous sûr de vouloir arrêter l\'enregistrement?')) {&#10;                fetch('/api/vmix/stop-recording', {&#10;                    method: 'POST'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Enregistrement arrêté', 'success');&#10;                        this.streamingStatus.isRecording = false;&#10;                        this.streamingStatus.recordingStartTime = null;&#10;                        this.streamingStatus.recordingTime = 0;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de l\'arrêt de l\'enregistrement:', error);&#10;                    this.addNotification('Erreur lors de l\'arrêt de l\'enregistrement', 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // === GESTION DES CAMÉRAS ET DE L'AUDIO ===&#10;&#10;        // Changer d'entrée vidéo&#10;        switchToInput(inputId, transitionType = 'cut') {&#10;            fetch('/api/vmix/switch-input', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: inputId,&#10;                    transitionType: transitionType&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    const inputName = this.videoInputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.addNotification(`Passage à ${inputName} (${transitionType})`, 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du changement d\'entrée:', error);&#10;                this.addNotification('Erreur lors du changement d\'entrée', 'danger');&#10;            });&#10;        },&#10;&#10;        // Vérifier si une entrée est une source audio spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            // Vérifier si c'est le micro commentateur (chercher des mots-clés dans le nom)&#10;            if (input.name &amp;&amp; (&#10;                input.name.toLowerCase().includes('comment') ||&#10;                input.name.toLowerCase().includes('micro') ||&#10;                input.name.toLowerCase().includes('mic')&#10;            )) {&#10;                // Si c'est la première fois qu'on identifie le micro du commentateur, sauvegarder son ID&#10;                if (!this.commentatorInputId) {&#10;                    this.commentatorInputId = input.id;&#10;                }&#10;                return true;&#10;            }&#10;&#10;            // Vérifier si c'est le son d'ambiance&#10;            if (input.name &amp;&amp; (&#10;                input.name.toLowerCase().includes('ambiance') ||&#10;                input.name.toLowerCase().includes('ambient') ||&#10;                input.name.toLowerCase().includes('room')&#10;            )) {&#10;                // Si c'est la première fois qu'on identifie le son d'ambiance, sauvegarder son ID&#10;                if (!this.ambientInputId) {&#10;                    this.ambientInputId = input.id;&#10;                }&#10;                return true;&#10;            }&#10;&#10;            return false;&#10;        },&#10;&#10;        // Activer/désactiver le micro commentateur&#10;        toggleCommentatorAudio() {&#10;            // Si aucun input n'a été identifié, chercher le premier qui pourrait correspondre&#10;            if (!this.commentatorInputId) {&#10;                const commentatorInput = this.videoInputs.find(input =&gt;&#10;                    input.name &amp;&amp; (&#10;                        input.name.toLowerCase().includes('comment') ||&#10;                        input.name.toLowerCase().includes('micro') ||&#10;                        input.name.toLowerCase().includes('mic')&#10;                    )&#10;                );&#10;&#10;                if (commentatorInput) {&#10;                    this.commentatorInputId = commentatorInput.id;&#10;                } else {&#10;                    this.addNotification('Aucun micro de commentateur identifié', 'warning');&#10;                    return;&#10;                }&#10;            }&#10;&#10;            // Activer/désactiver l'audio pour cet input&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    mute: !this.commentatorAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                    // Rétablir l'état précédent en cas d'erreur&#10;                    this.commentatorAudio = !this.commentatorAudio;&#10;                } else {&#10;                    this.addNotification(`Micro commentateur ${this.commentatorAudio ? 'activé' : 'désactivé'}`, 'success');&#10;&#10;                    // Mettre à jour l'état audio général pour cet input&#10;                    if (this.commentatorInputId) {&#10;                        this.$set(this.audioStates, this.commentatorInputId, this.commentatorAudio);&#10;                    }&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio du commentateur:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio du commentateur', 'danger');&#10;                // Rétablir l'état précédent en cas d'erreur&#10;                this.commentatorAudio = !this.commentatorAudio;&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume du micro commentateur&#10;        updateCommentatorVolume() {&#10;            if (!this.commentatorInputId) {&#10;                this.addNotification('Aucun micro de commentateur identifié', 'warning');&#10;                return;&#10;            }&#10;&#10;            fetch('/api/vmix/set-volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    volume: this.commentatorVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(`Volume du micro commentateur réglé à ${this.commentatorVolume}%`, 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du réglage du volume du commentateur:', error);&#10;                this.addNotification('Erreur lors du réglage du volume du commentateur', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver le son d'ambiance&#10;        toggleAmbientAudio() {&#10;            // Si aucun input n'a été identifié, chercher le premier qui pourrait correspondre&#10;            if (!this.ambientInputId) {&#10;                const ambientInput = this.videoInputs.find(input =&gt;&#10;                    input.name &amp;&amp; (&#10;                        input.name.toLowerCase().includes('ambiance') ||&#10;                        input.name.toLowerCase().includes('ambient') ||&#10;                        input.name.toLowerCase().includes('room')&#10;                    )&#10;                );&#10;&#10;                if (ambientInput) {&#10;                    this.ambientInputId = ambientInput.id;&#10;                } else {&#10;                    this.addNotification('Aucun son d\'ambiance identifié', 'warning');&#10;                    return;&#10;                }&#10;            }&#10;&#10;            // Activer/désactiver l'audio pour cet input&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    mute: !this.ambientAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                    // Rétablir l'état précédent en cas d'erreur&#10;                    this.ambientAudio = !this.ambientAudio;&#10;                } else {&#10;                    this.addNotification(`Son d'ambiance ${this.ambientAudio ? 'activé' : 'désactivé'}`, 'success');&#10;&#10;                    // Mettre à jour l'état audio général pour cet input&#10;                    if (this.ambientInputId) {&#10;                        this.$set(this.audioStates, this.ambientInputId, this.ambientAudio);&#10;                    }&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification du son d\'ambiance:', error);&#10;                this.addNotification('Erreur lors de la modification du son d\'ambiance', 'danger');&#10;                // Rétablir l'état précédent en cas d'erreur&#10;                this.ambientAudio = !this.ambientAudio;&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume du son d'ambiance&#10;        updateAmbientVolume() {&#10;            if (!this.ambientInputId) {&#10;                this.addNotification('Aucun son d\'ambiance identifié', 'warning');&#10;                return;&#10;            }&#10;&#10;            fetch('/api/vmix/set-volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    volume: this.ambientVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(`Volume du son d'ambiance réglé à ${this.ambientVolume}%`, 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du réglage du volume d\'ambiance:', error);&#10;                this.addNotification('Erreur lors du réglage du volume d\'ambiance', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'une entrée&#10;        toggleAudio(inputId) {&#10;            const mute = !this.audioStates[inputId];&#10;&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: inputId,&#10;                    mute: mute&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                    // Rétablir l'état précédent en cas d'erreur&#10;                    this.$set(this.audioStates, inputId, mute);&#10;                } else {&#10;                    const inputName = this.videoInputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.addNotification(`Audio ${mute ? 'désactivé' : 'activé'} pour ${inputName}`, 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio', 'danger');&#10;                // Rétablir l'état précédent en cas d'erreur&#10;                this.$set(this.audioStates, inputId, mute);&#10;            });&#10;        },&#10;&#10;        // === GESTION DES REPLAYS ===&#10;&#10;        // Définir la durée du buffer de replay&#10;        setReplayDuration() {&#10;            fetch('/api/replay/set-duration', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    duration: this.replayConfig.duration&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(data.message, 'success');&#10;                } else {&#10;                    this.addNotification(data.error, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la définition de la durée du replay:', error);&#10;                this.addNotification('Erreur lors de la définition de la durée du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'enregistrement des replays&#10;        toggleReplayRecording() {&#10;            const action = this.replayStatus.isRecording ? 'stop-recording' : 'start-recording';&#10;&#10;            fetch(`/api/replay/${action}`, {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.replayStatus.isRecording = !this.replayStatus.isRecording;&#10;                    this.addNotification(data.message, 'success');&#10;                } else {&#10;                    this.addNotification(data.error, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la gestion de l\'enregistrement des replays:', error);&#10;                this.addNotification('Erreur lors de la gestion de l\'enregistrement des replays', 'danger');&#10;            });&#10;        },&#10;&#10;        // Lire le dernier replay&#10;        playLastReplay(speed) {&#10;            fetch('/api/replay/play-last', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    speed: speed&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(data.message, 'success');&#10;                } else {&#10;                    this.addNotification(data.error, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la lecture du replay:', error);&#10;                this.addNotification('Erreur lors de la lecture du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Mettre en pause le replay&#10;        pauseReplay() {&#10;            fetch('/api/replay/pause', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(data.message, 'success');&#10;                } else {&#10;                    this.addNotification(data.error, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la mise en pause du replay:', error);&#10;                this.addNotification('Erreur lors de la mise en pause du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Marquer un événement de replay&#10;        markReplayEvent(eventName) {&#10;            // Utiliser soit le nom d'événement passé en paramètre, soit celui dans le champ de saisie&#10;            const name = eventName || this.eventName;&#10;&#10;            // Si aucun nom n'est fourni, utiliser un nom par défaut&#10;            const eventDisplayName = name || `Événement ${this.replayEvents.length + 1}`;&#10;&#10;            fetch('/api/replay/mark', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    name: eventDisplayName,&#10;                    type: 'custom'&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    // Mettre à jour la liste des événements si elle est retournée par l'API&#10;                    if (data.events &amp;&amp; Array.isArray(data.events)) {&#10;                        this.replayEvents = data.events;&#10;                    }&#10;&#10;                    // Réinitialiser le champ de saisie&#10;                    this.eventName = '';&#10;&#10;                    // Afficher une notification de succès&#10;                    this.addNotification(`Événement &quot;${eventDisplayName}&quot; marqué avec succès`, 'success');&#10;                } else {&#10;                    // Afficher l'erreur retournée par l'API&#10;                    this.addNotification(data.error || 'Erreur lors du marquage de l\'événement', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du marquage de l\'événement:', error);&#10;                this.addNotification('Erreur lors du marquage de l\'événement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Lire un événement de replay spécifique&#10;        playReplayEvent(eventIndex, speed) {&#10;            fetch('/api/replay/play-event', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    eventIndex: eventIndex,&#10;                    speed: speed&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(data.message, 'success');&#10;                } else {&#10;                    this.addNotification(data.error, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la lecture de l\'événement:', error);&#10;                this.addNotification('Erreur lors de la lecture de l\'événement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Supprimer un événement de replay&#10;        deleteReplayEvent(eventIndex) {&#10;            if (confirm('Êtes-vous sûr de vouloir supprimer cet événement ?')) {&#10;                fetch('/api/replay/delete-event', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        eventIndex: eventIndex&#10;                    })&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success') {&#10;                        this.addNotification('Événement supprimé avec succès', 'success');&#10;                        // Recharger les événements de replay après suppression&#10;                        this.loadReplayEvents();&#10;                    } else {&#10;                        this.addNotification(data.error || 'Erreur lors de la suppression de l\'événement', 'danger');&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la suppression de l\'événement:', error);&#10;                    this.addNotification('Erreur lors de la suppression de l\'événement', 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Rafraîchir les entrées audio&#10;        refreshAudioInputs() {&#10;            this.isRefreshing = true;&#10;&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Mettre à jour les entrées vidéo&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Réinitialiser les IDs des sources spéciales&#10;                    this.commentatorInputId = null;&#10;                    this.ambientInputId = null;&#10;&#10;                    // Chercher les sources audio spéciales dans les entrées audio&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            const inputName = input.name.toLowerCase();&#10;&#10;                            // Détecter le commentateur&#10;                            if (!this.commentatorInputId &amp;&amp; (&#10;                                inputName.includes('comment') ||&#10;                                inputName.includes('micro') ||&#10;                                inputName.includes('mic')&#10;                            )) {&#10;                                this.commentatorInputId = input.id;&#10;                                console.log('Input commentateur trouvé:', input.name);&#10;                            }&#10;&#10;                            // Détecter l'ambiance&#10;                            if (!this.ambientInputId &amp;&amp; (&#10;                                inputName.includes('ambiance') ||&#10;                                inputName.includes('ambient') ||&#10;                                inputName.includes('room')&#10;                            )) {&#10;                                this.ambientInputId = input.id;&#10;                                console.log('Input ambiance trouvé:', input.name);&#10;                            }&#10;&#10;                            // Ajouter à la liste des entrées si ce n'est pas une source spéciale&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    // Initialiser les états audio et charger leur statut&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;&#10;                    // Afficher un message approprié&#10;                    if (this.commentatorInputId || this.ambientInputId) {&#10;                        this.addNotification('Sources audio détectées et mises à jour', 'success');&#10;                    } else {&#10;                        this.addNotification('Aucune source audio spéciale trouvée', 'warning');&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du rafraîchissement des entrées audio:', error);&#10;                    this.addNotification('Erreur lors du rafraîchissement des entrées audio', 'danger');&#10;                })&#10;                .finally(() =&gt; {&#10;                    this.isRefreshing = false;&#10;                });&#10;        }&#10;    }&#10;}).mount('#app');&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="// Application Vue pour la diffusion en direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // État de chargement&#10;            loading: true,&#10;&#10;            // Système de notifications&#10;            notifications: [],&#10;            notificationId: 0,&#10;&#10;            // Données du score&#10;            scoreData: {&#10;                teamA: {&#10;                    name: &quot;Équipe A&quot;,&#10;                    score: 0,&#10;                    sets: 0&#10;                },&#10;                teamB: {&#10;                    name: &quot;Équipe B&quot;,&#10;                    score: 0,&#10;                    sets: 0&#10;                }&#10;            },&#10;&#10;            // Statut de streaming et d'enregistrement&#10;            streamingStatus: {&#10;                isStreaming: false,&#10;                isRecording: false,&#10;                streamingStartTime: null,&#10;                recordingStartTime: null,&#10;                streamingTime: 0,&#10;                recordingTime: 0&#10;            },&#10;&#10;            // Canal de streaming sélectionné&#10;            streamingChannel: 0,&#10;&#10;            // Configuration audio commentateur et ambiance&#10;            commentatorAudio: true,&#10;            commentatorVolume: 100,&#10;            commentatorInputId: null,&#10;            ambientAudio: true,&#10;            ambientVolume: 80,&#10;            ambientInputId: null,&#10;&#10;            // Liste des entrées vidéo disponibles dans vMix&#10;            videoInputs: [],&#10;&#10;            // État de l'audio pour chaque entrée&#10;            audioStates: {},&#10;&#10;            // Configuration des replays&#10;            replayConfig: {&#10;                duration: 8&#10;            },&#10;&#10;            // État des replays&#10;            replayStatus: {&#10;                isRecording: false,&#10;                isPlaying: false&#10;            },&#10;&#10;            // Événements de replay marqués&#10;            replayEvents: [],&#10;&#10;            // Nom pour le marquage d'événements&#10;            eventName: &quot;&quot;,&#10;&#10;            // Canal actif pour le streaming&#10;            activeStreamingChannel: null,&#10;&#10;            // Statut du rafraîchissement&#10;            isRefreshing: false,&#10;&#10;            // Variables pour suivre les points consécutifs&#10;            consecutivePoints: {&#10;                A: 0,&#10;                B: 0&#10;            }&#10;        };&#10;    },&#10;&#10;    computed: {&#10;        // Afficher le bouton de rafraîchissement si aucune source audio n'est détectée&#10;        showRefreshButton() {&#10;            return !this.commentatorInputId &amp;&amp; !this.ambientInputId;&#10;        },&#10;&#10;        // Calculer le nombre de points consécutifs pour l'équipe A&#10;        consecutivePointsA() {&#10;            return this.consecutivePoints.A || 0;&#10;        },&#10;&#10;        // Calculer le nombre de points consécutifs pour l'équipe B&#10;        consecutivePointsB() {&#10;            return this.consecutivePoints.B || 0;&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Initialiser l'application&#10;        this.initialize();&#10;&#10;        // Configurer socket.io pour les mises à jour en temps réel&#10;        this.setupSocketConnection();&#10;&#10;        // Mettre à jour les timers de streaming/enregistrement toutes les secondes&#10;        setInterval(() =&gt; {&#10;            this.updateTimers();&#10;        }, 1000);&#10;    },&#10;&#10;    methods: {&#10;        // Initialisation unifiée de l'application&#10;        async initialize() {&#10;            try {&#10;                // Récupérer le statut de connexion à vMix&#10;                await this.checkVMixConnection();&#10;&#10;                // Récupérer les entrées vidéo disponibles&#10;                await this.loadVMixInputs();&#10;&#10;                // Charger les données des équipes du match&#10;                await this.loadMatchTeams();&#10;&#10;                // Vérifier l'état de streaming et d'enregistrement&#10;                await this.checkStreamingStatus();&#10;&#10;                // Charger les événements de replay existants&#10;                await this.loadReplayEvents();&#10;&#10;                // Détecter les inputs pour le commentateur et l'ambiance&#10;                this.detectSpecialInputs();&#10;&#10;                // Notification de démarrage&#10;                this.addNotification(&quot;Interface de diffusion initialisée&quot;, &quot;success&quot;);&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors de l'initialisation:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors de l'initialisation&quot;, &quot;danger&quot;);&#10;                this.loading = false;&#10;            }&#10;        },&#10;&#10;        // Vérifier la connexion à vMix&#10;        async checkVMixConnection() {&#10;            try {&#10;                const response = await fetch('/api/vmix/status');&#10;                const data = await response.json();&#10;&#10;                if (!data.connected) {&#10;                    this.addNotification(&quot;Impossible de se connecter à vMix&quot;, &quot;danger&quot;);&#10;                    return false;&#10;                }&#10;&#10;                this.addNotification(`Connecté à vMix (${data.host}:${data.port})`, &quot;success&quot;);&#10;                return true;&#10;            } catch (error) {&#10;                console.error(&quot;Erreur lors de la vérification de la connexion vMix:&quot;, error);&#10;                this.addNotification(&quot;Erreur lors de la connexion à vMix&quot;, &quot;danger&quot;);&#10;                return false;&#10;            }&#10;        },&#10;&#10;        // Configuration de socket.io&#10;        setupSocketConnection() {&#10;            const socket = io();&#10;&#10;            // Gérer les mises à jour de score&#10;            socket.on('score_updated', (data) =&gt; {&#10;                this.scoreData = data;&#10;            });&#10;&#10;            // Gérer les mises à jour de l'état de streaming&#10;            socket.on('streaming_status', (data) =&gt; {&#10;                this.updateStreamingStatus(data);&#10;            });&#10;&#10;            // Gérer les mises à jour des entrées vMix&#10;            socket.on('vmix_inputs_updated', (data) =&gt; {&#10;                this.videoInputs = data.inputs;&#10;                this.initializeAudioStates();&#10;            });&#10;&#10;            // Gérer les notifications d'événements&#10;            socket.on('event_notification', (data) =&gt; {&#10;                this.addNotification(data.message, data.type || 'info');&#10;            });&#10;&#10;            // Gérer les mises à jour des événements de replay&#10;            socket.on('replay_events_updated', (data) =&gt; {&#10;                this.replayEvents = data.events;&#10;            });&#10;        },&#10;&#10;        // Charger les entrées vMix&#10;        async loadVMixInputs() {&#10;            try {&#10;                const response = await fetch('/api/vmix/inputs');&#10;                const data = await response.json();&#10;&#10;                // Organiser les inputs par catégorie&#10;                this.videoInputs = data.video || [];&#10;&#10;                // Trouver les sources audio principales&#10;                // Chercher un input avec &quot;commentateur&quot; ou &quot;comment&quot; dans le nom pour le commentateur&#10;                const commentatorInput = this.findInput(data.audio || [], 'comment');&#10;                if (commentatorInput) {&#10;                    this.commentatorInputId = commentatorInput.id;&#10;                    console.log('Input commentateur trouvé:', commentatorInput.name);&#10;                }&#10;&#10;                // Chercher un input avec &quot;ambiance&quot; ou &quot;ambient&quot; dans le nom pour l'ambiance&#10;                const ambientInput = this.findInput(data.audio || [], 'ambi');&#10;                if (ambientInput) {&#10;                    this.ambientInputId = ambientInput.id;&#10;                    console.log('Input ambiance trouvé:', ambientInput.name);&#10;                }&#10;&#10;                // Ajouter les autres sources audio à videoInputs pour l'affichage&#10;                if (data.audio) {&#10;                    data.audio.forEach(input =&gt; {&#10;                        if (!this.isSpecialAudioSource(input)) {&#10;                            this.videoInputs.push(input);&#10;                        }&#10;                    });&#10;                }&#10;&#10;                this.initializeAudioStates();&#10;                this.loadAudioStatus();&#10;                this.loading = false;&#10;            } catch (error) {&#10;                console.error('Erreur lors du chargement des entrées vMix:', error);&#10;                this.addNotification('Erreur lors du chargement des entrées vMix', 'danger');&#10;                this.loading = false;&#10;            }&#10;        },&#10;&#10;        // Trouver un input par mot-clé dans son nom&#10;        findInput(inputs, keyword) {&#10;            return inputs.find(input =&gt;&#10;                input.name &amp;&amp; input.name.toLowerCase().includes(keyword.toLowerCase())&#10;            );&#10;        },&#10;&#10;        // Vérifier si une source audio est spéciale (commentateur ou ambiance)&#10;        isSpecialAudioSource(input) {&#10;            if (!input || !input.id) return false;&#10;            return input.id === this.commentatorInputId || input.id === this.ambientInputId;&#10;        },&#10;&#10;        // Initialiser l'état audio pour chaque entrée&#10;        initializeAudioStates() {&#10;            this.videoInputs.forEach(input =&gt; {&#10;                if (this.audioStates[input.id] === undefined) {&#10;                    this.audioStates[input.id] = true; // Audio activé par défaut&#10;                }&#10;            });&#10;        },&#10;&#10;        // Charger le statut audio des entrées vMix&#10;        loadAudioStatus() {&#10;            fetch('/api/vmix/audio/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success' &amp;&amp; data.audioStatus) {&#10;                        // Mettre à jour les états audio selon les données reçues&#10;                        const audioStatus = data.audioStatus;&#10;&#10;                        for (const [inputId, status] of Object.entries(audioStatus)) {&#10;                            this.audioStates[inputId] = !status.muted;&#10;&#10;                            // Mettre à jour le volume du commentateur et de l'ambiance&#10;                            if (inputId === this.commentatorInputId) {&#10;                                this.commentatorVolume = parseInt(status.volume) || 100;&#10;                                this.commentatorAudio = !status.muted;&#10;                            } else if (inputId === this.ambientInputId) {&#10;                                this.ambientVolume = parseInt(status.volume) || 80;&#10;                                this.ambientAudio = !status.muted;&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement du statut audio:', error);&#10;                });&#10;        },&#10;&#10;        // Activer/désactiver l'audio du commentateur&#10;        toggleCommentatorAudio() {&#10;            if (!this.commentatorInputId) return;&#10;&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    mute: !this.commentatorAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.commentatorAudio = !this.commentatorAudio;&#10;                    this.addNotification(`Audio commentateur ${this.commentatorAudio ? 'activé' : 'désactivé'}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio commentateur', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio commentateur:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio commentateur', 'danger');&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume du commentateur&#10;        updateCommentatorVolume() {&#10;            if (!this.commentatorInputId) return;&#10;&#10;            fetch('/api/vmix/audio/volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.commentatorInputId,&#10;                    volume: this.commentatorVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Volume commentateur ajusté à ${this.commentatorVolume}%`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de l\'ajustement du volume commentateur', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de l\'ajustement du volume commentateur:', error);&#10;                this.addNotification('Erreur lors de l\'ajustement du volume commentateur', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'ambiance&#10;        toggleAmbientAudio() {&#10;            if (!this.ambientInputId) return;&#10;&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    mute: !this.ambientAudio&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.ambientAudio = !this.ambientAudio;&#10;                    this.addNotification(`Audio d'ambiance ${this.ambientAudio ? 'activé' : 'désactivé'}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio d\'ambiance', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio d\'ambiance:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio d\'ambiance', 'danger');&#10;            });&#10;        },&#10;&#10;        // Mettre à jour le volume d'ambiance&#10;        updateAmbientVolume() {&#10;            if (!this.ambientInputId) return;&#10;&#10;            fetch('/api/vmix/audio/volume', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: this.ambientInputId,&#10;                    volume: this.ambientVolume&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Volume d'ambiance ajusté à ${this.ambientVolume}%`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de l\'ajustement du volume d\'ambiance', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de l\'ajustement du volume d\'ambiance:', error);&#10;                this.addNotification('Erreur lors de l\'ajustement du volume d\'ambiance', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'audio d'une entrée générique&#10;        toggleAudio(inputId) {&#10;            if (!inputId) return;&#10;&#10;            fetch('/api/vmix/toggle-audio', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: inputId,&#10;                    mute: !this.audioStates[inputId]&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    // Mettre à jour l'état audio localement&#10;                    this.$set(this.audioStates, inputId, !this.audioStates[inputId]);&#10;                    const inputName = this.getInputNameById(inputId);&#10;                    this.addNotification(`Audio ${this.audioStates[inputId] ? 'activé' : 'désactivé'} pour ${inputName}`, 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la modification de l\'audio', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la modification de l\'audio:', error);&#10;                this.addNotification('Erreur lors de la modification de l\'audio', 'danger');&#10;            });&#10;        },&#10;&#10;        // Obtenir le nom d'un input par son ID&#10;        getInputNameById(inputId) {&#10;            const input = this.videoInputs.find(input =&gt; input.id === inputId);&#10;            return input ? input.name : `Input ${inputId}`;&#10;        },&#10;&#10;        // Charger les données des équipes du match&#10;        loadMatchTeams() {&#10;            return fetch('/api/teams/match/current')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.team_a) {&#10;                        this.scoreData.teamA.name = data.team_a.name;&#10;                    }&#10;&#10;                    if (data.team_b) {&#10;                        this.scoreData.teamB.name = data.team_b.name;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des équipes du match:', error);&#10;                });&#10;        },&#10;&#10;        // Vérifier l'état de streaming et d'enregistrement&#10;        checkStreamingStatus() {&#10;            return fetch('/api/vmix/streaming-status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.updateStreamingStatus(data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la vérification du statut de streaming:', error);&#10;                });&#10;        },&#10;&#10;        // Mettre à jour l'état de streaming et d'enregistrement&#10;        updateStreamingStatus(data) {&#10;            this.streamingStatus.isStreaming = data.isStreaming || false;&#10;            this.streamingStatus.isRecording = data.isRecording || false;&#10;&#10;            // Initialiser les timers si nécessaire&#10;            if (this.streamingStatus.isStreaming &amp;&amp; !this.streamingStatus.streamingStartTime) {&#10;                this.streamingStatus.streamingStartTime = data.streamingStartTime || Date.now();&#10;            } else if (!this.streamingStatus.isStreaming) {&#10;                this.streamingStatus.streamingStartTime = null;&#10;                this.streamingStatus.streamingTime = 0;&#10;            }&#10;&#10;            if (this.streamingStatus.isRecording &amp;&amp; !this.streamingStatus.recordingStartTime) {&#10;                this.streamingStatus.recordingStartTime = data.recordingStartTime || Date.now();&#10;            } else if (!this.streamingStatus.isRecording) {&#10;                this.streamingStatus.recordingStartTime = null;&#10;                this.streamingStatus.recordingTime = 0;&#10;            }&#10;        },&#10;&#10;        // Mettre à jour les timers de streaming et d'enregistrement&#10;        updateTimers() {&#10;            const now = Date.now();&#10;&#10;            if (this.streamingStatus.isStreaming &amp;&amp; this.streamingStatus.streamingStartTime) {&#10;                this.streamingStatus.streamingTime = Math.floor((now - this.streamingStatus.streamingStartTime) / 1000);&#10;            }&#10;&#10;            if (this.streamingStatus.isRecording &amp;&amp; this.streamingStatus.recordingStartTime) {&#10;                this.streamingStatus.recordingTime = Math.floor((now - this.streamingStatus.recordingStartTime) / 1000);&#10;            }&#10;        },&#10;&#10;        // Charger les événements de replay&#10;        loadReplayEvents() {&#10;            return fetch('/api/replay/events')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.replayEvents = data.events || [];&#10;                    console.log(&quot;Événements de replay chargés:&quot;, this.replayEvents);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement des événements de replay:', error);&#10;                });&#10;        },&#10;&#10;        // Formater une durée en format mm:ss ou hh:mm:ss&#10;        formatDuration(seconds) {&#10;            if (!seconds) return '00:00';&#10;&#10;            const hours = Math.floor(seconds / 3600);&#10;            const minutes = Math.floor((seconds % 3600) / 60);&#10;            const remainingSeconds = seconds % 60;&#10;&#10;            if (hours &gt; 0) {&#10;                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;&#10;            } else {&#10;                return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;&#10;            }&#10;        },&#10;&#10;        // Formater un timestamp en heure locale&#10;        formatTime(timestamp) {&#10;            if (!timestamp) return '';&#10;            return new Date(timestamp).toLocaleTimeString();&#10;        },&#10;&#10;        // Ajouter une notification&#10;        addNotification(message, type = 'info') {&#10;            const id = this.notificationId++;&#10;            this.notifications.push({ id, message, type });&#10;&#10;            // Supprimer automatiquement après 5 secondes&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, 5000);&#10;        },&#10;&#10;        // Détecter les entrées spéciales (commentateur, ambiance)&#10;        detectSpecialInputs() {&#10;            // Chercher l'entrée du commentateur&#10;            const commentatorInput = this.videoInputs.find(input =&gt;&#10;                input.name &amp;&amp; (&#10;                    input.name.toLowerCase().includes('comment') ||&#10;                    input.name.toLowerCase().includes('micro') ||&#10;                    input.name.toLowerCase().includes('mic')&#10;                )&#10;            );&#10;&#10;            if (commentatorInput) {&#10;                this.commentatorInputId = commentatorInput.id;&#10;                console.log(&quot;Entrée commentateur détectée:&quot;, commentatorInput);&#10;            }&#10;&#10;            // Chercher l'entrée d'ambiance&#10;            const ambientInput = this.videoInputs.find(input =&gt;&#10;                input.name &amp;&amp; (&#10;                    input.name.toLowerCase().includes('ambiance') ||&#10;                    input.name.toLowerCase().includes('ambient') ||&#10;                    input.name.toLowerCase().includes('crowd')&#10;                )&#10;            );&#10;&#10;            if (ambientInput) {&#10;                this.ambientInputId = ambientInput.id;&#10;                console.log(&quot;Entrée ambiance détectée:&quot;, ambientInput);&#10;            }&#10;        },&#10;&#10;        // === GESTION DU SCORE ===&#10;&#10;        // Incrémenter le score d'une équipe&#10;        incrementScore(team) {&#10;            if (team === 'A') {&#10;                this.scoreData.teamA.score++;&#10;                // Incrémenter les points consécutifs pour l'équipe A&#10;                this.consecutivePoints.A = (this.consecutivePoints.A || 0) + 1;&#10;                // Réinitialiser les points consécutifs pour l'équipe B&#10;                this.consecutivePoints.B = 0;&#10;            } else {&#10;                this.scoreData.teamB.score++;&#10;                // Incrémenter les points consécutifs pour l'équipe B&#10;                this.consecutivePoints.B = (this.consecutivePoints.B || 0) + 1;&#10;                // Réinitialiser les points consécutifs pour l'équipe A&#10;                this.consecutivePoints.A = 0;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Décrémenter le score d'une équipe&#10;        decrementScore(team) {&#10;            if (team === 'A' &amp;&amp; this.scoreData.teamA.score &gt; 0) {&#10;                this.scoreData.teamA.score--;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints.A = 0;&#10;            } else if (team === 'B' &amp;&amp; this.scoreData.teamB.score &gt; 0) {&#10;                this.scoreData.teamB.score--;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints.B = 0;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Mettre à jour les sets&#10;        updateSets(team) {&#10;            if (team === 'A') {&#10;                this.scoreData.teamA.sets++;&#10;            } else {&#10;                this.scoreData.teamB.sets++;&#10;            }&#10;            this.updateScoreInVMix();&#10;        },&#10;&#10;        // Réinitialiser les scores&#10;        resetScores() {&#10;            // Demander confirmation avant de réinitialiser&#10;            if (confirm('Êtes-vous sûr de vouloir réinitialiser tous les scores?')) {&#10;                // Réinitialiser les scores des deux équipes&#10;                this.scoreData.teamA.score = 0;&#10;                this.scoreData.teamB.score = 0;&#10;                this.scoreData.teamA.sets = 0;&#10;                this.scoreData.teamB.sets = 0;&#10;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints = { A: 0, B: 0 };&#10;&#10;                // Mettre à jour le score dans vMix&#10;                this.updateScoreInVMix();&#10;&#10;                // Afficher une notification&#10;                this.addNotification('Tous les scores ont été réinitialisés', 'success');&#10;            }&#10;        },&#10;&#10;        // Commencer un nouveau set&#10;        newSet() {&#10;            // Demander confirmation avant de commencer un nouveau set&#10;            if (confirm('Êtes-vous sûr de vouloir commencer un nouveau set?')) {&#10;                // Déterminer le gagnant du set actuel&#10;                if (this.scoreData.teamA.score &gt; this.scoreData.teamB.score) {&#10;                    // L'équipe A gagne le set&#10;                    this.scoreData.teamA.sets++;&#10;                } else if (this.scoreData.teamB.score &gt; this.scoreData.teamA.score) {&#10;                    // L'équipe B gagne le set&#10;                    this.scoreData.teamB.sets++;&#10;                } else {&#10;                    // En cas d'égalité, demander qui gagne le set&#10;                    if (confirm('Les scores sont à égalité. L\'équipe A remporte-t-elle le set? Cliquez sur Annuler pour l\'équipe B.')) {&#10;                        this.scoreData.teamA.sets++;&#10;                    } else {&#10;                        this.scoreData.teamB.sets++;&#10;                    }&#10;                }&#10;&#10;                // Réinitialiser les scores pour le nouveau set&#10;                this.scoreData.teamA.score = 0;&#10;                this.scoreData.teamB.score = 0;&#10;&#10;                // Réinitialiser les points consécutifs&#10;                this.consecutivePoints = { A: 0, B: 0 };&#10;&#10;                // Mettre à jour le score dans vMix&#10;                this.updateScoreInVMix();&#10;&#10;                // Afficher une notification&#10;                this.addNotification('Nouveau set commencé', 'success');&#10;            }&#10;        },&#10;&#10;        // Envoyer le score vers vMix&#10;        updateScoreInVMix() {&#10;            fetch('/api/stream/update-score', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    teamA: {&#10;                        name: this.scoreData.teamA.name,&#10;                        score: this.scoreData.teamA.score,&#10;                        sets: this.scoreData.teamA.sets&#10;                    },&#10;                    teamB: {&#10;                        name: this.scoreData.teamB.name,&#10;                        score: this.scoreData.teamB.score,&#10;                        sets: this.scoreData.teamB.sets&#10;                    }&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification('Score mis à jour dans vMix', 'success');&#10;                } else {&#10;                    this.addNotification('Erreur lors de la mise à jour du score', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la mise à jour du score:', error);&#10;                this.addNotification('Erreur lors de la mise à jour du score', 'danger');&#10;            });&#10;        },&#10;&#10;        // === GESTION DU STREAMING ===&#10;&#10;        // Démarrer le streaming&#10;        startStreaming() {&#10;            // Récupérer le canal sélectionné et ajouter 1 pour la correspondance avec vMix (canaux 1-5)&#10;            const selectedChannel = parseInt(this.streamingChannel) + 1;&#10;&#10;            fetch('/api/vmix/start-streaming', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    channel: selectedChannel&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    // Enregistrer le canal utilisé pour pouvoir l'utiliser lors de l'arrêt&#10;                    this.activeStreamingChannel = selectedChannel;&#10;                    this.addNotification(`Streaming démarré sur le canal ${selectedChannel}`, 'success');&#10;                    this.streamingStatus.isStreaming = true;&#10;                    this.streamingStatus.streamingStartTime = Date.now();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du démarrage du streaming:', error);&#10;                this.addNotification('Erreur lors du démarrage du streaming', 'danger');&#10;            });&#10;        },&#10;&#10;        // Arrêter le streaming&#10;        stopStreaming() {&#10;            if (confirm('Êtes-vous sûr de vouloir arrêter le streaming?')) {&#10;                // Utiliser le canal actif pour l'arrêt du streaming&#10;                const channelToStop = this.activeStreamingChannel || parseInt(this.streamingChannel) + 1;&#10;&#10;                fetch('/api/vmix/stop-streaming', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        channel: channelToStop&#10;                    })&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Streaming arrêté', 'success');&#10;                        this.streamingStatus.isStreaming = false;&#10;                        this.streamingStatus.streamingStartTime = null;&#10;                        this.streamingStatus.streamingTime = 0;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de l\'arrêt du streaming:', error);&#10;                    this.addNotification('Erreur lors de l\'arrêt du streaming', 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Démarrer l'enregistrement&#10;        startRecording() {&#10;            fetch('/api/vmix/start-recording', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification('Enregistrement démarré', 'success');&#10;                    this.streamingStatus.isRecording = true;&#10;                    this.streamingStatus.recordingStartTime = Date.now();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du démarrage de l\'enregistrement:', error);&#10;                this.addNotification('Erreur lors du démarrage de l\'enregistrement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Arrêter l'enregistrement&#10;        stopRecording() {&#10;            if (confirm('Êtes-vous sûr de vouloir arrêter l\'enregistrement?')) {&#10;                fetch('/api/vmix/stop-recording', {&#10;                    method: 'POST'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification('Enregistrement arrêté', 'success');&#10;                        this.streamingStatus.isRecording = false;&#10;                        this.streamingStatus.recordingStartTime = null;&#10;                        this.streamingStatus.recordingTime = 0;&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de l\'arrêt de l\'enregistrement:', error);&#10;                    this.addNotification('Erreur lors de l\'arrêt de l\'enregistrement', 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // === GESTION DES CAMÉRAS ===&#10;&#10;        // Changer d'entrée vidéo&#10;        switchToInput(inputId, transitionType = 'cut') {&#10;            fetch('/api/vmix/switch-input', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    inputId: inputId,&#10;                    transitionType: transitionType&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    const inputName = this.videoInputs.find(input =&gt; input.id === inputId)?.name || inputId;&#10;                    this.addNotification(`Passage à ${inputName} (${transitionType})`, 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du changement d\'entrée:', error);&#10;                this.addNotification('Erreur lors du changement d\'entrée', 'danger');&#10;            });&#10;        },&#10;&#10;        // Rafraîchir les entrées audio&#10;        refreshAudioInputs() {&#10;            this.isRefreshing = true;&#10;&#10;            fetch('/api/vmix/inputs')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    // Mettre à jour les entrées vidéo&#10;                    this.videoInputs = data.video || [];&#10;&#10;                    // Réinitialiser les IDs des sources spéciales&#10;                    this.commentatorInputId = null;&#10;                    this.ambientInputId = null;&#10;&#10;                    // Chercher les sources audio spéciales dans les entrées audio&#10;                    if (data.audio) {&#10;                        data.audio.forEach(input =&gt; {&#10;                            const inputName = input.name.toLowerCase();&#10;&#10;                            // Détecter le commentateur&#10;                            if (!this.commentatorInputId &amp;&amp; (&#10;                                inputName.includes('comment') ||&#10;                                inputName.includes('micro') ||&#10;                                inputName.includes('mic')&#10;                            )) {&#10;                                this.commentatorInputId = input.id;&#10;                                console.log('Input commentateur trouvé:', input.name);&#10;                            }&#10;&#10;                            // Détecter l'ambiance&#10;                            if (!this.ambientInputId &amp;&amp; (&#10;                                inputName.includes('ambiance') ||&#10;                                inputName.includes('ambient') ||&#10;                                inputName.includes('room')&#10;                            )) {&#10;                                this.ambientInputId = input.id;&#10;                                console.log('Input ambiance trouvé:', input.name);&#10;                            }&#10;&#10;                            // Ajouter à la liste des entrées si ce n'est pas une source spéciale&#10;                            if (!this.isSpecialAudioSource(input)) {&#10;                                this.videoInputs.push(input);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    // Initialiser les états audio et charger leur statut&#10;                    this.initializeAudioStates();&#10;                    this.loadAudioStatus();&#10;&#10;                    // Afficher un message approprié&#10;                    if (this.commentatorInputId || this.ambientInputId) {&#10;                        this.addNotification('Sources audio détectées et mises à jour', 'success');&#10;                    } else {&#10;                        this.addNotification('Aucune source audio spéciale trouvée', 'warning');&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du rafraîchissement des entrées audio:', error);&#10;                    this.addNotification('Erreur lors du rafraîchissement des entrées audio', 'danger');&#10;                })&#10;                .finally(() =&gt; {&#10;                    this.isRefreshing = false;&#10;                });&#10;        },&#10;&#10;        // === GESTION DES REPLAYS ===&#10;&#10;        // Définir la durée du buffer de replay&#10;        setReplayDuration() {&#10;            fetch('/api/replay/set-duration', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    duration: this.replayConfig.duration&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(data.message || 'Durée du buffer définie avec succès', 'success');&#10;                } else {&#10;                    this.addNotification(data.error || 'Erreur lors de la définition de la durée du buffer', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la définition de la durée du replay:', error);&#10;                this.addNotification('Erreur lors de la définition de la durée du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Activer/désactiver l'enregistrement des replays&#10;        toggleReplayRecording() {&#10;            const action = this.replayStatus.isRecording ? 'stop-recording' : 'start-recording';&#10;&#10;            fetch(`/api/replay/${action}`, {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.replayStatus.isRecording = !this.replayStatus.isRecording;&#10;                    const actionText = this.replayStatus.isRecording ? 'démarré' : 'arrêté';&#10;                    this.addNotification(`Enregistrement des replays ${actionText}`, 'success');&#10;                } else {&#10;                    this.addNotification(data.error || `Erreur lors de l'action sur l'enregistrement des replays`, 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la gestion de l\'enregistrement des replays:', error);&#10;                this.addNotification('Erreur lors de la gestion de l\'enregistrement des replays', 'danger');&#10;            });&#10;        },&#10;&#10;        // Lire le dernier replay&#10;        playLastReplay(speed) {&#10;            fetch('/api/replay/play-last', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    speed: speed&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Lecture du dernier replay à ${speed}%`, 'success');&#10;                } else {&#10;                    this.addNotification(data.error || 'Erreur lors de la lecture du replay', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la lecture du replay:', error);&#10;                this.addNotification('Erreur lors de la lecture du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Mettre en pause le replay&#10;        pauseReplay() {&#10;            fetch('/api/replay/pause', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification('Replay mis en pause', 'success');&#10;                } else {&#10;                    this.addNotification(data.error || 'Erreur lors de la mise en pause du replay', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la mise en pause du replay:', error);&#10;                this.addNotification('Erreur lors de la mise en pause du replay', 'danger');&#10;            });&#10;        },&#10;&#10;        // Marquer un événement de replay&#10;        markReplayEvent(eventName) {&#10;            // Si eventName est un objet d'événement DOM ou n'est pas une chaîne, utiliser this.eventName à la place&#10;            const actualEventName = (typeof eventName === 'string') ? eventName : this.eventName;&#10;&#10;            // Si aucun nom n'est fourni, utiliser un nom par défaut&#10;            const eventDisplayName = actualEventName || `Événement ${this.replayEvents.length + 1}`;&#10;&#10;            fetch('/api/replay/mark', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    name: eventDisplayName,&#10;                    type: 'custom'&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    // Mettre à jour la liste des événements si elle est retournée par l'API&#10;                    if (data.events &amp;&amp; Array.isArray(data.events)) {&#10;                        this.replayEvents = data.events;&#10;                    } else {&#10;                        // Sinon, recharger les événements&#10;                        this.loadReplayEvents();&#10;                    }&#10;&#10;                    // Réinitialiser le champ de saisie&#10;                    this.eventName = '';&#10;&#10;                    // Afficher une notification de succès&#10;                    this.addNotification(`Événement &quot;${eventDisplayName}&quot; marqué avec succès`, 'success');&#10;                } else {&#10;                    // Afficher l'erreur retournée par l'API&#10;                    this.addNotification(data.error || 'Erreur lors du marquage de l\'événement', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du marquage de l\'événement:', error);&#10;                this.addNotification('Erreur lors du marquage de l\'événement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Lire un événement de replay spécifique&#10;        playReplayEvent(eventIndex, speed) {&#10;            fetch('/api/replay/play-event', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    eventIndex: eventIndex,&#10;                    speed: speed&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.status === 'success') {&#10;                    this.addNotification(`Lecture de l'événement à ${speed}%`, 'success');&#10;                } else {&#10;                    this.addNotification(data.error || 'Erreur lors de la lecture de l\'événement', 'danger');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de la lecture de l\'événement:', error);&#10;                this.addNotification('Erreur lors de la lecture de l\'événement', 'danger');&#10;            });&#10;        },&#10;&#10;        // Supprimer un événement de replay&#10;        deleteReplayEvent(eventIndex) {&#10;            if (confirm('Êtes-vous sûr de vouloir supprimer cet événement ?')) {&#10;                fetch('/api/replay/delete-event', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify({&#10;                        eventIndex: eventIndex&#10;                    })&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.status === 'success') {&#10;                        this.addNotification('Événement supprimé avec succès', 'success');&#10;                        // Recharger les événements de replay après suppression&#10;                        this.loadReplayEvents();&#10;                    } else {&#10;                        this.addNotification(data.error || 'Erreur lors de la suppression de l\'événement', 'danger');&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la suppression de l\'événement:', error);&#10;                    this.addNotification('Erreur lors de la suppression de l\'événement', 'danger');&#10;                });&#10;            }&#10;        }&#10;    }&#10;}).mount('#live-broadcast-app');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/static/js/live_setup.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/static/js/live_setup.js" />
              <option name="originalContent" value="// Application Vue pour la configuration du direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // Statut de connexion vMix&#10;            vmixStatus: {&#10;                connected: false,&#10;                host: '127.0.0.1',&#10;                port: 8088,&#10;                lastChecked: null&#10;            },&#10;&#10;            // Configuration du streaming simplifiée&#10;            streamingConfig: {&#10;        checkVMixConnection() {&#10;            fetch('/api/vmix/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.vmixStatus.connected = data.connected;&#10;                    this.vmixStatus.lastChecked = new Date();&#10;&#10;                    // Si des informations supplémentaires sont fournies par l'API&#10;                    if (data.host) this.vmixStatus.host = data.host;&#10;                    if (data.port) this.vmixStatus.port = data.port;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la vérification de la connexion vMix:', error);&#10;                    this.vmixStatus.connected = false;&#10;                    this.vmixStatus.lastChecked = new Date();&#10;                });&#10;        },&#10;&#10;        // Charger les configurations sauvegardées&#10;        loadSavedConfig() {&#10;            // Charger la configuration du streaming&#10;            fetch('/api/stream/config')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.config) {&#10;                        // Ne récupérer que les champs que nous utilisons&#10;                        if (data.config.rtmpUrl) this.streamingConfig.rtmpUrl = data.config.rtmpUrl;&#10;&#10;                        if (data.config.thumbnailUrl) {&#10;                            this.thumbnailVisible = data.config.thumbnailVisible || false;&#10;                    }&#10;                .catch(error =&gt; {&#10;                });&#10;&#10;        saveStreamingConfig() {&#10;            formData.append('rtmpUrl', this.streamingConfig.rtmpUrl);&#10;            if (this.streamingConfig.streamKey &amp;&amp; !this.streamingConfig.streamKey.includes('•')) {&#10;&#10;                body: formData&#10;            .then(data =&gt; {&#10;            .catch(error =&gt; {&#10;            });&#10;        // Gérer l'upload de la miniature&#10;            if (!file) return;&#10;&#10;&#10;        },&#10;        uploadThumbnail() {&#10;            const formData = new FormData();&#10;            fetch('/api/stream/upload-thumbnail', {&#10;            })&#10;                if (data.success) {&#10;                    alert('Miniature téléchargée avec succès');&#10;                }&#10;                console.error('Erreur lors du téléchargement de la miniature:', error);&#10;        },&#10;        removeThumbnail() {&#10;                    method: 'POST'&#10;                })&#10;                .then(data =&gt; {&#10;                    if (data.success) {&#10;                        this.thumbnailFile = null;&#10;                        alert('Miniature supprimée avec succès');&#10;                        alert('Erreur lors de la suppression de la miniature: ' + data.message);&#10;                    }&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la suppression de la miniature:', error);&#10;                });&#10;            }&#10;&#10;        // Activer/désactiver la miniature dans vMix&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;                method: 'POST',&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;                },&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;                })&#10;            })&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;            .then(data =&gt; {&#10;                if (!data.success) {&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;                    this.thumbnailVisible = !this.thumbnailVisible;&#10;                    alert('Erreur: ' + data.message);&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;            })&#10;            .catch(error =&gt; {&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;                // Restaurer l'état précédent en cas d'erreur&#10;                this.thumbnailVisible = !this.thumbnailVisible;&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;            });&#10;        }&#10;            fetch('/api/vmix/toggle-thumbnail', {&#10;}).mount('#live-setup-app');&#10;" />
              <option name="updatedContent" value="// Application Vue pour la configuration du direct&#10;const { createApp } = Vue;&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // Statut de connexion vMix&#10;            vmixStatus: {&#10;                connected: false,&#10;                host: '127.0.0.1',&#10;                port: 8088,&#10;                lastChecked: null&#10;            },&#10;&#10;            // Configuration du streaming simplifiée&#10;            streamingConfig: {&#10;                title: '',&#10;                rtmpUrl: '',&#10;                streamKey: ''&#10;            },&#10;&#10;            // Contrôle de la miniature&#10;            thumbnailVisible: false,&#10;            thumbnailPreview: null,&#10;            thumbnailFile: null,&#10;&#10;            // Afficher/masquer la clé de stream&#10;            showStreamKey: false&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Charger les configurations sauvegardées&#10;        this.loadSavedConfig();&#10;&#10;        // Vérifier la connexion à vMix au chargement&#10;        this.checkVMixConnection();&#10;    },&#10;&#10;    methods: {&#10;        // Formater une date pour l'affichage&#10;        formatDateTime(timestamp) {&#10;            if (!timestamp) return '';&#10;            const date = new Date(timestamp);&#10;            return date.toLocaleString();&#10;        },&#10;&#10;        // Vérifier la connexion à vMix&#10;        checkVMixConnection() {&#10;            fetch('/api/vmix/status')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    this.vmixStatus.connected = data.connected;&#10;                    this.vmixStatus.lastChecked = new Date();&#10;&#10;                    // Si des informations supplémentaires sont fournies par l'API&#10;                    if (data.host) this.vmixStatus.host = data.host;&#10;                    if (data.port) this.vmixStatus.port = data.port;&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la vérification de la connexion vMix:', error);&#10;                    this.vmixStatus.connected = false;&#10;                    this.vmixStatus.lastChecked = new Date();&#10;                });&#10;        },&#10;&#10;        // Charger les configurations sauvegardées&#10;        loadSavedConfig() {&#10;            // Charger la configuration du streaming&#10;            fetch('/api/stream/config')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.config) {&#10;                        // Ne récupérer que les champs que nous utilisons&#10;                        if (data.config.title) this.streamingConfig.title = data.config.title;&#10;                        if (data.config.rtmpUrl) this.streamingConfig.rtmpUrl = data.config.rtmpUrl;&#10;                        if (data.config.streamKey) this.streamingConfig.streamKey = data.config.streamKey;&#10;&#10;                        // Charger la miniature si elle existe&#10;                        if (data.config.thumbnailUrl) {&#10;                            this.thumbnailPreview = data.config.thumbnailUrl;&#10;                            this.thumbnailVisible = data.config.thumbnailVisible || false;&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors du chargement de la configuration de streaming:', error);&#10;                });&#10;        },&#10;&#10;        // Enregistrer la configuration du streaming&#10;        saveStreamingConfig() {&#10;            const formData = new FormData();&#10;            formData.append('title', this.streamingConfig.title);&#10;            formData.append('rtmpUrl', this.streamingConfig.rtmpUrl);&#10;&#10;            // N'envoyer la clé que si elle a été modifiée (pas les astérisques)&#10;            if (this.streamingConfig.streamKey &amp;&amp; !this.streamingConfig.streamKey.includes('•')) {&#10;                formData.append('streamKey', this.streamingConfig.streamKey);&#10;            }&#10;&#10;            fetch('/api/stream/config', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                alert('Configuration RTMP enregistrée avec succès');&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors de l\'enregistrement de la configuration:', error);&#10;                alert('Erreur lors de l\'enregistrement de la configuration');&#10;            });&#10;        },&#10;&#10;        // Gérer l'upload de la miniature&#10;        handleThumbnailUpload(event) {&#10;            const file = event.target.files[0];&#10;            if (!file) return;&#10;&#10;            this.thumbnailFile = file;&#10;&#10;            // Créer une URL pour la prévisualisation&#10;            this.thumbnailPreview = URL.createObjectURL(file);&#10;&#10;            // Uploader la miniature automatiquement&#10;            this.uploadThumbnail();&#10;        },&#10;&#10;        // Uploader la miniature au serveur&#10;        uploadThumbnail() {&#10;            if (!this.thumbnailFile) return;&#10;&#10;            const formData = new FormData();&#10;            formData.append('thumbnail', this.thumbnailFile);&#10;&#10;            fetch('/api/stream/upload-thumbnail', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    // Mettre à jour l'URL de la miniature avec celle retournée par le serveur&#10;                    this.thumbnailPreview = data.thumbnailUrl;&#10;                    alert('Miniature téléchargée avec succès');&#10;                } else {&#10;                    alert('Erreur lors du téléchargement de la miniature: ' + data.message);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du téléchargement de la miniature:', error);&#10;                alert('Erreur lors du téléchargement de la miniature');&#10;            });&#10;        },&#10;&#10;        // Supprimer la miniature&#10;        removeThumbnail() {&#10;            if (confirm('Êtes-vous sûr de vouloir supprimer cette miniature?')) {&#10;                fetch('/api/stream/remove-thumbnail', {&#10;                    method: 'POST'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.success) {&#10;                        this.thumbnailPreview = null;&#10;                        this.thumbnailFile = null;&#10;                        alert('Miniature supprimée avec succès');&#10;                    } else {&#10;                        alert('Erreur lors de la suppression de la miniature: ' + data.message);&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Erreur lors de la suppression de la miniature:', error);&#10;                    alert('Erreur lors de la suppression de la miniature');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Activer/désactiver la miniature dans vMix&#10;        toggleThumbnail() {&#10;            fetch('/api/stream/thumbnail/toggle', {  // Correction de l'URL pour correspondre au backend&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    show: this.thumbnailVisible&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (!data.success) {&#10;                    // Restaurer l'état précédent en cas d'erreur&#10;                    this.thumbnailVisible = !this.thumbnailVisible;&#10;                    alert('Erreur: ' + data.message);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erreur lors du changement de visibilité de la miniature:', error);&#10;                // Restaurer l'état précédent en cas d'erreur&#10;                this.thumbnailVisible = !this.thumbnailVisible;&#10;                alert('Erreur de connexion au serveur');&#10;            });&#10;        }&#10;    }&#10;}).mount('#live-setup-app');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/static/js/setup_team.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/static/js/setup_team.js" />
              <option name="updatedContent" value="// Application Vue pour la gestion des équipes&#10;const { createApp } = Vue;&#10;&#10;// Configuration du socket.io&#10;let socket;&#10;try {&#10;    socket = io();&#10;    console.log(&quot;Socket.IO initialisé avec succès&quot;);&#10;} catch (error) {&#10;    console.error(&quot;Erreur lors de l'initialisation de Socket.IO:&quot;, error);&#10;    // Simuler un objet socket pour éviter les erreurs&#10;    socket = {&#10;        on: function() {&#10;            console.log(&quot;Socket.IO non disponible - événement ignoré&quot;);&#10;        },&#10;        emit: function() {&#10;            console.log(&quot;Socket.IO non disponible - émission ignorée&quot;);&#10;        }&#10;    };&#10;}&#10;&#10;createApp({&#10;    data() {&#10;        return {&#10;            // Gestion des notifications&#10;            notifications: [],&#10;            notificationId: 0,&#10;&#10;            // Liste des équipes existantes&#10;            teams: [],&#10;&#10;            // Nouvelle équipe (pour l'ajout d'équipe)&#10;            newTeam: {&#10;                name: '',&#10;                logo: null,&#10;                players: null&#10;            },&#10;&#10;            // Équipe A (domicile)&#10;            teamA: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Équipe B (visiteur)&#10;            teamB: {&#10;                selectedId: '',&#10;                createNew: false,&#10;                name: '',&#10;                logo: null,&#10;                players: null,&#10;                playerCount: 0&#10;            },&#10;&#10;            // Sélection des joueurs pour l'affichage des détails&#10;            selectedTeamId: '',&#10;            teamPlayers: [],&#10;            selectedPlayerId: ''&#10;        }&#10;    },&#10;&#10;    computed: {&#10;        // Propriété calculée pour obtenir les détails du joueur sélectionné&#10;        selectedPlayer() {&#10;            if (this.selectedPlayerId === '' || !this.teamPlayers[this.selectedPlayerId]) {&#10;                return {};&#10;            }&#10;            return this.teamPlayers[this.selectedPlayerId];&#10;        }&#10;    },&#10;&#10;    mounted() {&#10;        // Charger la liste des équipes existantes&#10;        this.loadTeams();&#10;&#10;        // Écouter les événements socket&#10;        socket.on('connect', () =&gt; {&#10;            this.addNotification('Connexion établie avec le serveur', 'success');&#10;        });&#10;&#10;        socket.on('disconnect', () =&gt; {&#10;            this.addNotification('Connexion perdue avec le serveur', 'danger');&#10;        });&#10;&#10;        // Configuration du socket.io et gestion des événements&#10;        socket.on('team_created', (teamData) =&gt; {&#10;            this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été créée avec succès`, 'success');&#10;            this.teams.push(teamData);&#10;        });&#10;&#10;        socket.on('team_updated', (teamData) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === teamData.id);&#10;            if (index !== -1) {&#10;                this.teams[index] = teamData;&#10;                this.addNotification(`L'équipe &quot;${teamData.name}&quot; a été mise à jour`, 'success');&#10;            }&#10;        });&#10;&#10;        socket.on('team_deleted', (data) =&gt; {&#10;            const index = this.teams.findIndex(team =&gt; team.id === data.id);&#10;            if (index !== -1) {&#10;                const teamName = this.teams[index].name;&#10;                this.teams.splice(index, 1);&#10;                this.addNotification(`L'équipe &quot;${teamName}&quot; a été supprimée`, 'warning');&#10;            }&#10;        });&#10;&#10;        // Initialiser la navigation par onglets&#10;        this.initTabs();&#10;    },&#10;&#10;    methods: {&#10;        // Gestion des notifications&#10;        addNotification(message, type = 'info') {&#10;            const id = this.notificationId++;&#10;            this.notifications.push({ id, message, type });&#10;            console.log(`Notification ajoutée: ${message} (${type})`);&#10;&#10;            // Supprimer automatiquement après 5 secondes&#10;            setTimeout(() =&gt; {&#10;                this.notifications = this.notifications.filter(n =&gt; n.id !== id);&#10;            }, 5000);&#10;        },&#10;&#10;        // Initialiser la navigation par onglets&#10;        initTabs() {&#10;            document.querySelectorAll('.nav-link').forEach(link =&gt; {&#10;                link.addEventListener('click', (e) =&gt; {&#10;                    e.preventDefault();&#10;&#10;                    // Retirer la classe active de tous les liens&#10;                    document.querySelectorAll('.nav-link').forEach(l =&gt; {&#10;                        l.classList.remove('active');&#10;                    });&#10;&#10;                    // Ajouter la classe active au lien cliqué&#10;                    e.target.classList.add('active');&#10;&#10;                    // Afficher la section correspondante&#10;                    const targetId = e.target.getAttribute('href');&#10;                    document.querySelectorAll('.card').forEach(card =&gt; {&#10;                        if (card.id &amp;&amp; card.id === targetId.substring(1)) {&#10;                            card.style.display = 'block';&#10;                        } else if (card.id) {&#10;                            card.style.display = 'none';&#10;                        }&#10;                    });&#10;                });&#10;            });&#10;        },&#10;&#10;        // Charger la liste des équipes existantes&#10;        loadTeams() {&#10;            console.log(&quot;Chargement des équipes...&quot;);&#10;            fetch('/api/teams')&#10;                .then(response =&gt; {&#10;                    console.log(&quot;Réponse reçue:&quot;, response);&#10;                    return response.json();&#10;                })&#10;                .then(data =&gt; {&#10;                    console.log(&quot;Données reçues:&quot;, data);&#10;                    this.teams = data.teams || [];&#10;                    this.addNotification(`${this.teams.length} équipes chargées`, 'info');&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error(&quot;Erreur lors du chargement des équipes:&quot;, error);&#10;                    this.addNotification(`Erreur lors du chargement des équipes: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Créer une nouvelle équipe (depuis la section gestion des équipes)&#10;        createTeam(event) {&#10;            event.preventDefault();&#10;            console.log(&quot;Création d'une nouvelle équipe:&quot;, this.newTeam);&#10;&#10;            if (!this.newTeam.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            const formData = new FormData();&#10;            formData.append('team_name', this.newTeam.name);&#10;&#10;            if (this.newTeam.logo) {&#10;                formData.append('team_logo', this.newTeam.logo);&#10;            }&#10;&#10;            if (this.newTeam.players) {&#10;                formData.append('players_csv', this.newTeam.players);&#10;            }&#10;&#10;            fetch('/api/teams/create', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; {&#10;                console.log(&quot;Réponse reçue:&quot;, response);&#10;                return response.json();&#10;            })&#10;            .then(data =&gt; {&#10;                console.log(&quot;Données reçues:&quot;, data);&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(data.message || 'Équipe créée avec succès', 'success');&#10;                    this.newTeam = { name: '', logo: null, players: null };&#10;&#10;                    // Recharger les équipes si le serveur n'envoie pas de socket&#10;                    if (!data.team) {&#10;                        this.loadTeams();&#10;                    }&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error(&quot;Erreur lors de la création de l'équipe:&quot;, error);&#10;                this.addNotification(`Erreur lors de la création de l'équipe: ${error.message}`, 'danger');&#10;            });&#10;        },&#10;&#10;        // Afficher les détails d'une équipe&#10;        viewTeam(team) {&#10;            console.log(&quot;Affichage des détails de l'équipe:&quot;, team);&#10;            this.selectedTeamId = team.id;&#10;            this.loadTeamPlayers();&#10;        },&#10;&#10;        // Supprimer une équipe&#10;        deleteTeam(team) {&#10;            if (confirm(`Êtes-vous sûr de vouloir supprimer l'équipe &quot;${team.name}&quot; ?`)) {&#10;                console.log(&quot;Suppression de l'équipe:&quot;, team);&#10;                fetch(`/api/teams/${team.id}/delete`, {&#10;                    method: 'DELETE'&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification(data.message || 'Équipe supprimée avec succès', 'success');&#10;&#10;                        // Si le serveur ne supprime pas via socket, supprimons manuellement&#10;                        if (!data.socketUpdated) {&#10;                            const index = this.teams.findIndex(t =&gt; t.id === team.id);&#10;                            if (index !== -1) {&#10;                                this.teams.splice(index, 1);&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error(&quot;Erreur lors de la suppression de l'équipe:&quot;, error);&#10;                    this.addNotification(`Erreur lors de la suppression de l'équipe: ${error.message}`, 'danger');&#10;                });&#10;            }&#10;        },&#10;&#10;        // Charger les joueurs d'une équipe sélectionnée&#10;        loadTeamPlayers() {&#10;            if (!this.selectedTeamId) {&#10;                this.teamPlayers = [];&#10;                this.selectedPlayerId = '';&#10;                return;&#10;            }&#10;&#10;            console.log(&quot;Chargement des joueurs pour l'équipe:&quot;, this.selectedTeamId);&#10;            fetch(`/api/teams/${this.selectedTeamId}/players`)&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.teamPlayers = data.players || [];&#10;                        this.selectedPlayerId = '';&#10;                        console.log(&quot;Joueurs chargés:&quot;, this.teamPlayers);&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error(&quot;Erreur lors du chargement des joueurs:&quot;, error);&#10;                    this.addNotification(`Erreur lors du chargement des joueurs: ${error.message}`, 'danger');&#10;                });&#10;        },&#10;&#10;        // Sélectionner une équipe existante pour l'équipe A&#10;        selectTeamA() {&#10;            if (!this.teamA.selectedId) {&#10;                this.teamA = {&#10;                    selectedId: '',&#10;                    createNew: false,&#10;                    name: '',&#10;                    logo: null,&#10;                    players: null,&#10;                    playerCount: 0&#10;                };&#10;                return;&#10;            }&#10;&#10;            // Récupérer les détails de l'équipe sélectionnée&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamA.selectedId);&#10;            if (selectedTeam) {&#10;                console.log(&quot;Équipe A sélectionnée:&quot;, selectedTeam);&#10;                this.teamA.name = selectedTeam.name;&#10;                this.teamA.logo = selectedTeam.logo;&#10;                this.teamA.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;                this.teamA.createNew = false;&#10;&#10;                // Récupérer les joueurs si nécessaire&#10;                if (!selectedTeam.players || selectedTeam.players.length === 0) {&#10;                    fetch(`/api/teams/${selectedTeam.id}/players`)&#10;                        .then(response =&gt; response.json())&#10;                        .then(data =&gt; {&#10;                            if (!data.error) {&#10;                                this.teamA.players = data.players;&#10;                                this.teamA.playerCount = data.players.length;&#10;                                console.log(&quot;Joueurs de l'équipe A chargés:&quot;, data.players);&#10;                            }&#10;                        })&#10;                        .catch(error =&gt; {&#10;                            console.error(&quot;Erreur lors du chargement des joueurs:&quot;, error);&#10;                            this.addNotification(`Erreur lors du chargement des joueurs: ${error.message}`, 'danger');&#10;                        });&#10;                } else {&#10;                    this.teamA.players = selectedTeam.players;&#10;                }&#10;            }&#10;        },&#10;&#10;        // Sélectionner une équipe existante pour l'équipe B&#10;        selectTeamB() {&#10;            if (!this.teamB.selectedId) {&#10;                this.teamB = {&#10;                    selectedId: '',&#10;                    createNew: false,&#10;                    name: '',&#10;                    logo: null,&#10;                    players: null,&#10;                    playerCount: 0&#10;                };&#10;                return;&#10;            }&#10;&#10;            // Récupérer les détails de l'équipe sélectionnée&#10;            const selectedTeam = this.teams.find(team =&gt; team.id === this.teamB.selectedId);&#10;            if (selectedTeam) {&#10;                console.log(&quot;Équipe B sélectionnée:&quot;, selectedTeam);&#10;                this.teamB.name = selectedTeam.name;&#10;                this.teamB.logo = selectedTeam.logo;&#10;                this.teamB.playerCount = selectedTeam.players ? selectedTeam.players.length : 0;&#10;                this.teamB.createNew = false;&#10;&#10;                // Récupérer les joueurs si nécessaire&#10;                if (!selectedTeam.players || selectedTeam.players.length === 0) {&#10;                    fetch(`/api/teams/${selectedTeam.id}/players`)&#10;                        .then(response =&gt; response.json())&#10;                        .then(data =&gt; {&#10;                            if (!data.error) {&#10;                                this.teamB.players = data.players;&#10;                                this.teamB.playerCount = data.players.length;&#10;                                console.log(&quot;Joueurs de l'équipe B chargés:&quot;, data.players);&#10;                            }&#10;                        })&#10;                        .catch(error =&gt; {&#10;                            console.error(&quot;Erreur lors du chargement des joueurs:&quot;, error);&#10;                            this.addNotification(`Erreur lors du chargement des joueurs: ${error.message}`, 'danger');&#10;                        });&#10;                } else {&#10;                    this.teamB.players = selectedTeam.players;&#10;                }&#10;            }&#10;        },&#10;&#10;        // Gérer l'upload du logo d'une équipe&#10;        handleLogoUpload(team, event) {&#10;            const file = event.target.files[0];&#10;            if (!file) return;&#10;&#10;            // Vérifier que c'est bien une image&#10;            if (!file.type.match('image.*')) {&#10;                this.addNotification('Veuillez sélectionner une image valide (JPG, PNG)', 'warning');&#10;                event.target.value = ''; // Réinitialiser l'input&#10;                return;&#10;            }&#10;&#10;            console.log(`Logo uploadé pour l'équipe ${team}:`, file.name);&#10;&#10;            // Stocker le fichier&#10;            if (team === 'A') {&#10;                this.teamA.logo = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.logo = file;&#10;            }&#10;        },&#10;&#10;        // Gérer l'upload du CSV des joueurs&#10;        handleCsvUpload(team, event) {&#10;            const file = event.target.files[0];&#10;            if (!file) return;&#10;&#10;            // Vérifier que c'est bien un CSV&#10;            if (file.type !== 'text/csv' &amp;&amp; !file.name.endsWith('.csv')) {&#10;                this.addNotification('Veuillez sélectionner un fichier CSV valide', 'warning');&#10;                event.target.value = ''; // Réinitialiser l'input&#10;                return;&#10;            }&#10;&#10;            console.log(`CSV uploadé pour l'équipe ${team}:`, file.name);&#10;&#10;            // Stocker le fichier&#10;            if (team === 'A') {&#10;                this.teamA.players = file;&#10;            } else if (team === 'B') {&#10;                this.teamB.players = file;&#10;            }&#10;        },&#10;&#10;        // Enregistrer une équipe nouvellement créée (à partir des panneaux A ou B)&#10;        saveTeam(team) {&#10;            const teamData = team === 'A' ? this.teamA : this.teamB;&#10;            &#10;            if (!teamData.name) {&#10;                this.addNotification('Veuillez saisir un nom d\'équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            console.log(`Enregistrement de l'équipe ${team}:`, teamData);&#10;&#10;            const formData = new FormData();&#10;            formData.append('team_name', teamData.name);&#10;&#10;            if (teamData.logo) {&#10;                formData.append('team_logo', teamData.logo);&#10;                console.log(&quot;Logo ajouté au FormData:&quot;, teamData.logo.name);&#10;            }&#10;&#10;            if (teamData.players) {&#10;                formData.append('players_csv', teamData.players);&#10;                console.log(&quot;CSV ajouté au FormData:&quot;, teamData.players.name);&#10;            }&#10;&#10;            // Afficher le contenu du FormData pour le débogage&#10;            console.log(&quot;FormData créé:&quot;);&#10;            for (const pair of formData.entries()) {&#10;                console.log(`${pair[0]}: ${pair[1]}`);&#10;            }&#10;&#10;            fetch('/api/teams/create', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; {&#10;                console.log(&quot;Réponse reçue:&quot;, response);&#10;                return response.json();&#10;            })&#10;            .then(data =&gt; {&#10;                console.log(&quot;Données reçues:&quot;, data);&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(data.message || 'Équipe créée avec succès', 'success');&#10;                    &#10;                    // Ajouter l'équipe à la liste locale si elle n'y est pas déjà&#10;                    if (data.team &amp;&amp; !this.teams.find(t =&gt; t.id === data.team.id)) {&#10;                        this.teams.push(data.team);&#10;                    } else {&#10;                        // Recharger les équipes si le serveur n'a pas renvoyé les données de l'équipe&#10;                        this.loadTeams();&#10;                    }&#10;                    &#10;                    // Sélectionner automatiquement l'équipe créée&#10;                    if (team === 'A') {&#10;                        this.teamA.selectedId = data.team.id;&#10;                        this.teamA.createNew = false;&#10;                        this.selectTeamA();&#10;                    } else if (team === 'B') {&#10;                        this.teamB.selectedId = data.team.id;&#10;                        this.teamB.createNew = false;&#10;                        this.selectTeamB();&#10;                    }&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error(&quot;Erreur lors de la création de l'équipe:&quot;, error);&#10;                this.addNotification(`Erreur lors de la création de l'équipe: ${error.message}`, 'danger');&#10;            });&#10;        },&#10;&#10;        // Configurer les équipes pour le match&#10;        saveMatchTeams() {&#10;            // Vérifier que les deux équipes sont sélectionnées ou en cours de création&#10;            if ((!this.teamA.selectedId &amp;&amp; !this.teamA.createNew) || (!this.teamB.selectedId &amp;&amp; !this.teamB.createNew)) {&#10;                this.addNotification('Veuillez sélectionner ou créer les deux équipes pour ce match', 'warning');&#10;                return;&#10;            }&#10;&#10;            console.log(&quot;Configuration du match avec les équipes:&quot;, {&#10;                teamA: this.teamA,&#10;                teamB: this.teamB&#10;            });&#10;&#10;            // Si des nouvelles équipes sont en cours de création, les sauvegarder d'abord&#10;            const promises = [];&#10;            &#10;            if (this.teamA.createNew &amp;&amp; this.teamA.name) {&#10;                promises.push(new Promise(resolve =&gt; {&#10;                    this.saveTeam('A');&#10;                    resolve();&#10;                }));&#10;            }&#10;            &#10;            if (this.teamB.createNew &amp;&amp; this.teamB.name) {&#10;                promises.push(new Promise(resolve =&gt; {&#10;                    this.saveTeam('B');&#10;                    resolve();&#10;                }));&#10;            }&#10;&#10;            // Une fois les équipes sauvegardées, configurer le match&#10;            Promise.all(promises).then(() =&gt; {&#10;                // Préparer les données pour la configuration du match&#10;                const matchData = {&#10;                    teamA: {&#10;                        id: this.teamA.selectedId,&#10;                        createNew: this.teamA.createNew,&#10;                        name: this.teamA.name&#10;                    },&#10;                    teamB: {&#10;                        id: this.teamB.selectedId,&#10;                        createNew: this.teamB.createNew,&#10;                        name: this.teamB.name&#10;                    }&#10;                };&#10;&#10;                // Envoyer la configuration au serveur&#10;                fetch('/api/teams/match/configure', {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json'&#10;                    },&#10;                    body: JSON.stringify(matchData)&#10;                })&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    if (data.error) {&#10;                        this.addNotification(data.error, 'danger');&#10;                    } else {&#10;                        this.addNotification(data.message || 'Match configuré avec succès', 'success');&#10;                        // Redirection si spécifiée&#10;                        if (data.redirect) {&#10;                            window.location.href = data.redirect;&#10;                        }&#10;                    }&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error(&quot;Erreur lors de la configuration du match:&quot;, error);&#10;                    this.addNotification(`Erreur lors de la configuration du match: ${error.message}`, 'danger');&#10;                });&#10;            });&#10;        },&#10;&#10;        // Envoyer le roster d'une équipe vers vMix&#10;        sendRosterToVmix(team) {&#10;            const teamData = team === 'A' ? this.teamA : this.teamB;&#10;            &#10;            if (!teamData.selectedId &amp;&amp; !teamData.createNew) {&#10;                this.addNotification('Veuillez sélectionner ou créer une équipe d\'abord', 'warning');&#10;                return;&#10;            }&#10;&#10;            // Si c'est une nouvelle équipe, s'assurer qu'elle a des joueurs&#10;            if (teamData.createNew &amp;&amp; !teamData.players) {&#10;                this.addNotification('Veuillez ajouter une liste de joueurs pour cette équipe', 'warning');&#10;                return;&#10;            }&#10;&#10;            console.log(`Envoi du roster de l'équipe ${team} vers vMix:`, teamData);&#10;&#10;            // Préparer les données&#10;            const formData = new FormData();&#10;            &#10;            if (teamData.selectedId) {&#10;                formData.append('team_id', teamData.selectedId);&#10;            } else {&#10;                // Si c'est une nouvelle équipe, envoyer ses données&#10;                formData.append('team_name', teamData.name);&#10;                if (teamData.logo) formData.append('team_logo', teamData.logo);&#10;                if (teamData.players) formData.append('players_csv', teamData.players);&#10;            }&#10;            &#10;            formData.append('team_position', team); // A pour domicile, B pour visiteur&#10;&#10;            // Envoyer vers vMix&#10;            fetch('/api/vmix/send-roster', {&#10;                method: 'POST',&#10;                body: formData&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(data.message || 'Roster envoyé avec succès vers vMix', 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error(&quot;Erreur lors de l'envoi du roster vers vMix:&quot;, error);&#10;                this.addNotification(`Erreur lors de l'envoi du roster vers vMix: ${error.message}`, 'danger');&#10;            });&#10;        },&#10;&#10;        // Afficher les détails d'un joueur dans vMix&#10;        showPlayerDetailsInVmix() {&#10;            if (!this.selectedTeamId || this.selectedPlayerId === '') {&#10;                this.addNotification('Veuillez sélectionner un joueur', 'warning');&#10;                return;&#10;            }&#10;&#10;            const player = this.teamPlayers[this.selectedPlayerId];&#10;            console.log(&quot;Affichage des détails du joueur dans vMix:&quot;, player);&#10;            &#10;            fetch('/api/vmix/player-details', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    team_id: this.selectedTeamId,&#10;                    player: player&#10;                })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.error) {&#10;                    this.addNotification(data.error, 'danger');&#10;                } else {&#10;                    this.addNotification(data.message || 'Détails du joueur affichés dans vMix', 'success');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error(&quot;Erreur lors de l'affichage des détails du joueur:&quot;, error);&#10;                this.addNotification(`Erreur lors de l'affichage des détails du joueur: ${error.message}`, 'danger');&#10;            });&#10;        }&#10;    }&#10;}).mount('#setup-team-app');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/templates/core/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/templates/core/index.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Scoreboard Volleyball v3.0&lt;/title&gt;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;!-- Bootstrap Icons --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;!-- Custom CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;    &lt;div id=&quot;app&quot; class=&quot;container py-5&quot;&gt;&#10;        &lt;header class=&quot;pb-4 mb-5 border-bottom text-center&quot;&gt;&#10;            &lt;h1 class=&quot;display-4 fw-bold&quot;&gt;{% raw %}{{ appName }}{% endraw %}&lt;/h1&gt;&#10;            &lt;p class=&quot;lead&quot;&gt;Gestion de streaming semi-automatisée pour les matchs de volleyball&lt;/p&gt;&#10;            &lt;div class=&quot;mt-3&quot;&gt;&#10;                &lt;span v-if=&quot;connected&quot; class=&quot;badge bg-success&quot;&gt;&lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; vMix Connecté&lt;/span&gt;&#10;                &lt;span v-else class=&quot;badge bg-danger&quot;&gt;&lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; vMix Déconnecté&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;div class=&quot;row row-cols-1 row-cols-md-2 g-4 mb-5&quot;&gt;&#10;            &lt;div v-for=&quot;mode in modes&quot; :key=&quot;mode.id&quot; class=&quot;col&quot;&gt;&#10;                &lt;div class=&quot;card h-100 shadow-sm hover-card&quot;&gt;&#10;                    &lt;div class=&quot;card-body p-4&quot;&gt;&#10;                        &lt;div class=&quot;feature-icon bg-primary bg-gradient text-white mb-3 d-inline-flex align-items-center justify-content-center rounded-circle&quot;&gt;&#10;                            &lt;i class=&quot;bi&quot; :class=&quot;mode.icon&quot; style=&quot;font-size: 1.5rem;&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h2 class=&quot;card-title fs-4 fw-bold&quot;&gt;{% raw %}{{ mode.title }}{% endraw %}&lt;/h2&gt;&#10;                        &lt;p class=&quot;card-text&quot;&gt;{% raw %}{{ mode.description }}{% endraw %}&lt;/p&gt;&#10;                        &lt;a :href=&quot;mode.route&quot; class=&quot;btn btn-primary&quot;&gt;Sélectionner&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;footer class=&quot;pt-4 my-4 border-top text-center text-muted&quot;&gt;&#10;            &lt;p&gt;Développé dans le cadre du travail de bachelor HEPIA - Kevin Bonga &amp;copy; 2025&lt;/p&gt;&#10;        &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Vue.js --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Application Vue personnalisée --&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/home_app.js') }}&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/templates/core/live_broadcast.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/templates/core/live_broadcast.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Diffusion en Direct - VolleyStream&lt;/title&gt;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;!-- Bootstrap Icons --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;!-- Custom CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;    &lt;!-- Socket.io --&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        /* Styles spécifiques pour la page de diffusion */&#10;        .dashboard-card {&#10;            height: 100%;&#10;            transition: all 0.2s;&#10;        }&#10;        .dashboard-card:hover {&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;&#10;        }&#10;        .card-header {&#10;            font-weight: bold;&#10;        }&#10;        .compact-control {&#10;            font-size: 0.9rem;&#10;        }&#10;        /* Styles pour les cartes d'entrées */&#10;        .input-card {&#10;            height: 100%;&#10;            min-height: 160px;&#10;        }&#10;        /* Style pour la section scoreboard */&#10;        .score-display {&#10;            font-size: 3rem;&#10;            font-weight: bold;&#10;        }&#10;        .team-name {&#10;            font-size: 1.2rem;&#10;            font-weight: bold;&#10;            white-space: nowrap;&#10;            overflow: hidden;&#10;            text-overflow: ellipsis;&#10;        }&#10;        .set-score {&#10;            font-size: 1.5rem;&#10;            font-weight: bold;&#10;        }&#10;        /* Pulsation pour les éléments actifs */&#10;        .active-pulse {&#10;            animation: pulse 1.5s infinite;&#10;        }&#10;        @keyframes pulse {&#10;            0% { opacity: 1; }&#10;            50% { opacity: 0.6; }&#10;            100% { opacity: 1; }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;&#10;    &lt;div id=&quot;live-broadcast-app&quot; class=&quot;container-fluid py-3&quot;&gt;&#10;        &lt;!-- Système de notifications --&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;            &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;                &lt;div class=&quot;toast-body&quot;&gt;&#10;                    {% raw %}{{ notification.message }}{% endraw %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;            &lt;h1 class=&quot;h2 mb-0&quot;&gt;Diffusion en Direct&lt;/h1&gt;&#10;            &lt;div&gt;&#10;                &lt;span v-if=&quot;streamingStatus.isStreaming&quot; class=&quot;badge bg-danger active-pulse me-2&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; EN DIRECT&#10;                &lt;/span&gt;&#10;                &lt;span v-if=&quot;streamingStatus.isRecording&quot; class=&quot;badge bg-danger active-pulse&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-record-circle&quot;&gt;&lt;/i&gt; ENREGISTREMENT&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div v-if=&quot;loading&quot; class=&quot;text-center my-5&quot;&gt;&#10;            &lt;div class=&quot;spinner-border text-primary&quot; role=&quot;status&quot;&gt;&#10;                &lt;span class=&quot;visually-hidden&quot;&gt;Chargement...&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Chargement des données...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div v-if=&quot;!loading&quot; class=&quot;row g-3&quot;&gt;&#10;            &lt;!-- PREMIÈRE RANGÉE : 3 colonnes pour Live, Caméras et Audio --&gt;&#10;&#10;            &lt;!-- Section Contrôle du Streaming - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-danger text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Contrôle de la Diffusion&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row g-3&quot;&gt;&#10;                            &lt;!-- Contrôle du streaming --&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;Streaming&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;streamingChannel&quot; class=&quot;form-label&quot;&gt;Canal de streaming&lt;/label&gt;&#10;                                            &lt;select class=&quot;form-select form-select-sm&quot; id=&quot;streamingChannel&quot; v-model=&quot;streamingChannel&quot; :disabled=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;option value=&quot;0&quot;&gt;Canal 1 (par défaut)&lt;/option&gt;&#10;                                                &lt;option value=&quot;1&quot;&gt;Canal 2&lt;/option&gt;&#10;                                                &lt;option value=&quot;2&quot;&gt;Canal 3&lt;/option&gt;&#10;                                                &lt;option value=&quot;3&quot;&gt;Canal 4&lt;/option&gt;&#10;                                                &lt;option value=&quot;4&quot;&gt;Canal 5&lt;/option&gt;&#10;                                            &lt;/select&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;startStreaming&quot; class=&quot;btn btn-success&quot; :disabled=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Démarrer&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;stopStreaming&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;!streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;text-center mt-2&quot; v-if=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                            &lt;small class=&quot;text-danger&quot;&gt;En direct depuis {% raw %}{{ formatDuration(streamingStatus.streamingTime) }}{% endraw %}&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Contrôle de l'enregistrement --&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;Enregistrement&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;startRecording&quot; class=&quot;btn btn-success&quot; :disabled=&quot;streamingStatus.isRecording&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-record-circle me-1&quot;&gt;&lt;/i&gt; Démarrer&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;stopRecording&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;!streamingStatus.isRecording&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;text-center mt-2&quot; v-if=&quot;streamingStatus.isRecording&quot;&gt;&#10;                                            &lt;small class=&quot;text-danger&quot;&gt;Enregistrement depuis {% raw %}{{ formatDuration(streamingStatus.recordingTime) }}{% endraw %}&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section Caméras - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-primary text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                        &lt;span&gt;&lt;i class=&quot;bi bi-camera-video me-2&quot;&gt;&lt;/i&gt; Caméras&lt;/span&gt;&#10;                        &lt;div&gt;&#10;                            &lt;span class=&quot;badge bg-light text-primary me-2&quot;&gt;{% raw %}{{ videoInputs.filter(input =&gt; input.type.includes('Camera')).length }}{% endraw %} caméras&lt;/span&gt;&#10;                            &lt;button @click=&quot;refreshCameraInputs&quot;&#10;                                    :disabled=&quot;isRefreshing&quot;&#10;                                    class=&quot;btn btn-sm btn-light&quot;&gt;&#10;                                &lt;i class=&quot;bi&quot; :class=&quot;{'bi-arrow-clockwise': !isRefreshing, 'bi-arrow-clockwise animate-spin': isRefreshing}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div v-if=&quot;videoInputs.filter(input =&gt; input.type.includes('Camera')).length === 0&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt; Aucune caméra disponible&#10;                        &lt;/div&gt;&#10;                        &lt;div v-else&gt;&#10;                            &lt;div v-for=&quot;input in videoInputs.filter(input =&gt; input.type.includes('Camera'))&quot; :key=&quot;input.id&quot; class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;span&gt;{% raw %}{{ input.name }}{% endraw %}&lt;/span&gt;&#10;                                &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                    &lt;button @click=&quot;switchToInput(input.id, 'cut')&quot; class=&quot;btn btn-sm btn-danger&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;switchToInput(input.id, 'transition')&quot; class=&quot;btn btn-sm btn-primary&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section Contrôle Audio - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-warning text-dark d-flex justify-content-between align-items-center&quot;&gt;&#10;                        &lt;span&gt;&lt;i class=&quot;bi bi-music-note-list&quot;&gt;&lt;/i&gt; Contrôle Audio&lt;/span&gt;&#10;                        &lt;div&gt;&#10;                            &lt;span class=&quot;badge bg-dark me-2&quot;&gt;{% raw %}{{ videoInputs.length }}{% endraw %} sources&lt;/span&gt;&#10;                            &lt;button @click=&quot;refreshAudioInputs&quot;&#10;                                    :disabled=&quot;isRefreshing&quot;&#10;                                    class=&quot;btn btn-sm btn-light&quot;&gt;&#10;                                &lt;i class=&quot;bi&quot; :class=&quot;{'bi-arrow-clockwise': !isRefreshing, 'bi-arrow-clockwise animate-spin': isRefreshing}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;!-- Message si aucune source audio n'est détectée --&gt;&#10;                        &lt;div v-if=&quot;!commentatorInputId &amp;&amp; !ambientInputId&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle&quot;&gt;&lt;/i&gt; Aucune source audio détectée&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Contrôles pour le commentateur --&gt;&#10;                        &lt;div v-if=&quot;commentatorInputId&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;label class=&quot;form-label mb-0&quot;&gt;Commentateur&lt;/label&gt;&#10;                                &lt;button @click=&quot;toggleCommentatorAudio&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;commentatorAudio ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;commentatorAudio ? 'bi-mic' : 'bi-mic-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;range&quot;&#10;                                   class=&quot;form-range&quot;&#10;                                   v-model=&quot;commentatorVolume&quot;&#10;                                   @change=&quot;updateCommentatorVolume&quot;&#10;                                   min=&quot;0&quot;&#10;                                   max=&quot;100&quot;&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Contrôles pour l'ambiance --&gt;&#10;                        &lt;div v-if=&quot;ambientInputId&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;label class=&quot;form-label mb-0&quot;&gt;Ambiance&lt;/label&gt;&#10;                                &lt;button @click=&quot;toggleAmbientAudio&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;ambientAudio ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;ambientAudio ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;range&quot;&#10;                                   class=&quot;form-range&quot;&#10;                                   v-model=&quot;ambientVolume&quot;&#10;                                   @change=&quot;updateAmbientVolume&quot;&#10;                                   min=&quot;0&quot;&#10;                                   max=&quot;100&quot;&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Liste des autres sources audio --&gt;&#10;                        &lt;div v-if=&quot;videoInputs.length &gt; 0&quot;&gt;&#10;                            &lt;hr&gt;&#10;                            &lt;h6&gt;Autres sources&lt;/h6&gt;&#10;                            &lt;div v-for=&quot;input in videoInputs&quot; :key=&quot;input.id&quot; class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;span&gt;{% raw %}{{ input.name }}{% endraw %}&lt;/span&gt;&#10;                                &lt;button @click=&quot;toggleAudio(input.id)&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;audioStates[input.id] ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;audioStates[input.id] ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- DEUXIÈME RANGÉE : Replays --&gt;&#10;&#10;            &lt;!-- Section Replays - Pleine largeur --&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-info text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-arrow-counterclockwise me-2&quot;&gt;&lt;/i&gt; Gestion des Replays&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row g-3&quot;&gt;&#10;                            &lt;!-- Configuration du Replay --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Configuration&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;label for=&quot;replayDuration&quot; class=&quot;form-label&quot;&gt;Durée du buffer (secondes)&lt;/label&gt;&#10;                                        &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;replayDuration&quot; v-model=&quot;replayConfig.duration&quot; min=&quot;1&quot; max=&quot;60&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-secondary&quot; type=&quot;button&quot; @click=&quot;setReplayDuration&quot;&gt;Appliquer&lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;!-- Contrôles d'enregistrement --&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2 mt-3&quot;&gt;&#10;                                            &lt;button @click=&quot;toggleReplayRecording&quot; class=&quot;btn&quot;&#10;                                                    :class=&quot;replayStatus.isRecording ? 'btn-danger' : 'btn-outline-danger'&quot;&gt;&#10;                                                &lt;i class=&quot;bi&quot; :class=&quot;replayStatus.isRecording ? 'bi-stop-circle' : 'bi-record-circle'&quot;&gt;&lt;/i&gt;&#10;                                                &lt;span v-if=&quot;replayStatus.isRecording&quot;&gt;Arrêter l'enregistrement&lt;/span&gt;&#10;                                                &lt;span v-else&gt;Démarrer l'enregistrement&lt;/span&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Lecture du dernier replay --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Lecture du dernier replay&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(100)&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Replay (100%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(50)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (50%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(25)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (25%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;pauseReplay&quot; class=&quot;btn btn-outline-secondary&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-pause-circle me-1&quot;&gt;&lt;/i&gt; Pause&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Marquage d'événements --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Marquage d'événements&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Nom de l'événement&quot; v-model=&quot;eventName&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; @click=&quot;markReplayEvent&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-bookmark-plus&quot;&gt;&lt;/i&gt; Marquer&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;form-text mb-3&quot;&gt;Marquez des moments importants pour les rejouer plus tard&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Liste des événements marqués --&gt;&#10;                        &lt;div v-if=&quot;replayEvents.length &gt; 0&quot; class=&quot;mt-4&quot;&gt;&#10;                            &lt;h4 class=&quot;h6 border-top pt-3&quot;&gt;Événements marqués&lt;/h4&gt;&#10;                            &lt;div class=&quot;table-responsive&quot;&gt;&#10;                                &lt;table class=&quot;table table-sm table-hover&quot;&gt;&#10;                                    &lt;thead&gt;&#10;                                        &lt;tr&gt;&#10;                                            &lt;th&gt;#&lt;/th&gt;&#10;                                            &lt;th&gt;Nom&lt;/th&gt;&#10;                                            &lt;th&gt;Horodatage&lt;/th&gt;&#10;                                            &lt;th&gt;Actions&lt;/th&gt;&#10;                                        &lt;/tr&gt;&#10;                                    &lt;/thead&gt;&#10;                                    &lt;tbody&gt;&#10;                                        &lt;tr v-for=&quot;(event, index) in replayEvents&quot; :key=&quot;index&quot;&gt;&#10;                                            &lt;td&gt;{% raw %}{{ index + 1 }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;{% raw %}{{ event.name || 'Événement ' + (index + 1) }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;{% raw %}{{ formatTime(event.timestamp) }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;&#10;                                                &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 100)&quot; class=&quot;btn btn-sm btn-outline-primary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 100%&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 50)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 50%&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 25)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 25%&#10;                                                    &lt;/button&gt;&#10;                                    &lt;/tbody&gt;&#10;                                &lt;/table&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- TROISIÈME RANGÉE : Scoreboard --&gt;&#10;&#10;            &lt;!-- Section Scoreboard - Pleine largeur en bas --&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-trophy me-2&quot;&gt;&lt;/i&gt; Gestion du Score&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;!-- Équipe A --&gt;&#10;                            &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                &lt;div class=&quot;card border-primary&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary&quot;&gt;&#10;                                        {% raw %}{{ scoreData.teamA.name }}{% endraw %}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                            &lt;h3 class=&quot;score-display me-3 mb-0&quot;&gt;{% raw %}{{ scoreData.teamA.score }}{% endraw %}&lt;/h3&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button @click=&quot;incrementScore('A')&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                &lt;/button&gt;&#10;                                                &lt;button @click=&quot;decrementScore('A')&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;scoreData.teamA.score &lt;= 0&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsA &gt;= 3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                            &lt;strong&gt;{% raw %}{{ consecutivePointsA }}{% endraw %} points&lt;/strong&gt; sans ralenti&#10;                                            &lt;button @click=&quot;markReplayEvent('Point équipe A')&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Ralenti&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Zone centrale - Sets --&gt;&#10;                            &lt;div class=&quot;col-md-2&quot;&gt;&#10;                                &lt;div class=&quot;card h-100 border-secondary&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-secondary bg-opacity-10 text-secondary text-center&quot;&gt;&#10;                                        Sets&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;h3 class=&quot;set-score&quot;&gt;{% raw %}{{ scoreData.teamA.sets }}{% endraw %} - {% raw %}{{ scoreData.teamB.sets }}{% endraw %}&lt;/h3&gt;&#10;                                        &lt;div class=&quot;btn-group mt-2 d-flex&quot;&gt;&#10;                                            &lt;button @click=&quot;updateSets('A')&quot; class=&quot;btn btn-outline-primary btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; A&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;updateSets('B')&quot; class=&quot;btn btn-outline-danger btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; B&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button @click=&quot;updateScoreInVMix&quot; class=&quot;btn btn-primary w-100 mt-3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-arrow-up-circle me-1&quot;&gt;&lt;/i&gt; Mettre à jour vMix&#10;                                        &lt;/button&gt;&#10;                                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                                            &lt;button @click=&quot;resetScores()&quot; class=&quot;btn btn-warning btn-sm me-1&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-arrow-counterclockwise me-1&quot;&gt;&lt;/i&gt; Réinitialiser&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;newSet()&quot; class=&quot;btn btn-secondary btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Nouveau set&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Équipe B --&gt;&#10;                            &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;&#10;                                        {% raw %}{{ scoreData.teamB.name }}{% endraw %}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                            &lt;h3 class=&quot;score-display me-3 mb-0&quot;&gt;{% raw %}{{ scoreData.teamB.score }}{% endraw %}&lt;/h3&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button @click=&quot;incrementScore('B')&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                &lt;/button&gt;&#10;                                                &lt;button @click=&quot;decrementScore('B')&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;scoreData.teamB.score &lt;= 0&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsB &gt;= 3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                            &lt;strong&gt;{% raw %}{{ consecutivePointsB }}{% endraw %} points&lt;/strong&gt; sans ralenti&#10;                                            &lt;button @click=&quot;markReplayEvent('Point équipe B')&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Ralenti&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Vue.js --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Script personnalisé pour la diffusion en direct --&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/live_broadcast.js') }}&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Diffusion en Direct - VolleyStream&lt;/title&gt;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;!-- Bootstrap Icons --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;!-- Custom CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;    &lt;!-- Socket.io --&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        /* Styles spécifiques pour la page de diffusion */&#10;        .dashboard-card {&#10;            height: 100%;&#10;            transition: all 0.2s;&#10;        }&#10;        .dashboard-card:hover {&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;&#10;        }&#10;        .card-header {&#10;            font-weight: bold;&#10;        }&#10;        .compact-control {&#10;            font-size: 0.9rem;&#10;        }&#10;        /* Styles pour les cartes d'entrées */&#10;        .input-card {&#10;            height: 100%;&#10;            min-height: 160px;&#10;        }&#10;        /* Style pour la section scoreboard */&#10;        .score-display {&#10;            font-size: 3rem;&#10;            font-weight: bold;&#10;        }&#10;        .team-name {&#10;            font-size: 1.2rem;&#10;            font-weight: bold;&#10;            white-space: nowrap;&#10;            overflow: hidden;&#10;            text-overflow: ellipsis;&#10;        }&#10;        .set-score {&#10;            font-size: 1.5rem;&#10;            font-weight: bold;&#10;        }&#10;        /* Pulsation pour les éléments actifs */&#10;        .active-pulse {&#10;            animation: pulse 1.5s infinite;&#10;        }&#10;        @keyframes pulse {&#10;            0% { opacity: 1; }&#10;            50% { opacity: 0.6; }&#10;            100% { opacity: 1; }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;&#10;    &lt;div id=&quot;live-broadcast-app&quot; class=&quot;container-fluid py-3&quot;&gt;&#10;        &lt;!-- Système de notifications --&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;            &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;                &lt;div class=&quot;toast-body&quot;&gt;&#10;                    {% raw %}{{ notification.message }}{% endraw %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;            &lt;h1 class=&quot;h2 mb-0&quot;&gt;Diffusion en Direct&lt;/h1&gt;&#10;            &lt;div&gt;&#10;                &lt;span v-if=&quot;streamingStatus.isStreaming&quot; class=&quot;badge bg-danger active-pulse me-2&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; EN DIRECT&#10;                &lt;/span&gt;&#10;                &lt;span v-if=&quot;streamingStatus.isRecording&quot; class=&quot;badge bg-danger active-pulse&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-record-circle&quot;&gt;&lt;/i&gt; ENREGISTREMENT&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div v-if=&quot;loading&quot; class=&quot;text-center my-5&quot;&gt;&#10;            &lt;div class=&quot;spinner-border text-primary&quot; role=&quot;status&quot;&gt;&#10;                &lt;span class=&quot;visually-hidden&quot;&gt;Chargement...&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Chargement des données...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div v-if=&quot;!loading&quot; class=&quot;row g-3&quot;&gt;&#10;            &lt;!-- PREMIÈRE RANGÉE : 3 colonnes pour Live, Caméras et Audio --&gt;&#10;&#10;            &lt;!-- Section Contrôle du Streaming - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-danger text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Contrôle de la Diffusion&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row g-3&quot;&gt;&#10;                            &lt;!-- Contrôle du streaming --&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;Streaming&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;streamingChannel&quot; class=&quot;form-label&quot;&gt;Canal de streaming&lt;/label&gt;&#10;                                            &lt;select class=&quot;form-select form-select-sm&quot; id=&quot;streamingChannel&quot; v-model=&quot;streamingChannel&quot; :disabled=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;option value=&quot;0&quot;&gt;Canal 1 (par défaut)&lt;/option&gt;&#10;                                                &lt;option value=&quot;1&quot;&gt;Canal 2&lt;/option&gt;&#10;                                                &lt;option value=&quot;2&quot;&gt;Canal 3&lt;/option&gt;&#10;                                                &lt;option value=&quot;3&quot;&gt;Canal 4&lt;/option&gt;&#10;                                                &lt;option value=&quot;4&quot;&gt;Canal 5&lt;/option&gt;&#10;                                            &lt;/select&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;startStreaming&quot; class=&quot;btn btn-success&quot; :disabled=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Démarrer&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;stopStreaming&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;!streamingStatus.isStreaming&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;text-center mt-2&quot; v-if=&quot;streamingStatus.isStreaming&quot;&gt;&#10;                                            &lt;small class=&quot;text-danger&quot;&gt;En direct depuis {% raw %}{{ formatDuration(streamingStatus.streamingTime) }}{% endraw %}&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Contrôle de l'enregistrement --&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;Enregistrement&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;startRecording&quot; class=&quot;btn btn-success&quot; :disabled=&quot;streamingStatus.isRecording&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-record-circle me-1&quot;&gt;&lt;/i&gt; Démarrer&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;stopRecording&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;!streamingStatus.isRecording&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-stop-circle me-1&quot;&gt;&lt;/i&gt; Arrêter&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;text-center mt-2&quot; v-if=&quot;streamingStatus.isRecording&quot;&gt;&#10;                                            &lt;small class=&quot;text-danger&quot;&gt;Enregistrement depuis {% raw %}{{ formatDuration(streamingStatus.recordingTime) }}{% endraw %}&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section Caméras - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-primary text-white d-flex justify-content-between align-items-center&quot;&gt;&#10;                        &lt;span&gt;&lt;i class=&quot;bi bi-camera-video me-2&quot;&gt;&lt;/i&gt; Caméras&lt;/span&gt;&#10;                        &lt;div&gt;&#10;                            &lt;span class=&quot;badge bg-light text-primary me-2&quot;&gt;{% raw %}{{ videoInputs.filter(input =&gt; input.type.includes('Camera')).length }}{% endraw %} caméras&lt;/span&gt;&#10;                            &lt;button @click=&quot;refreshCameraInputs&quot;&#10;                                    :disabled=&quot;isRefreshing&quot;&#10;                                    class=&quot;btn btn-sm btn-light&quot;&gt;&#10;                                &lt;i class=&quot;bi&quot; :class=&quot;{'bi-arrow-clockwise': !isRefreshing, 'bi-arrow-clockwise animate-spin': isRefreshing}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div v-if=&quot;videoInputs.filter(input =&gt; input.type.includes('Camera')).length === 0&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt; Aucune caméra disponible&#10;                        &lt;/div&gt;&#10;                        &lt;div v-else&gt;&#10;                            &lt;div v-for=&quot;input in videoInputs.filter(input =&gt; input.type.includes('Camera'))&quot; :key=&quot;input.id&quot; class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;span&gt;{% raw %}{{ input.name }}{% endraw %}&lt;/span&gt;&#10;                                &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                    &lt;button @click=&quot;switchToInput(input.id, 'cut')&quot; class=&quot;btn btn-sm btn-danger&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-lightning-fill&quot;&gt;&lt;/i&gt; CUT&#10;                                    &lt;/button&gt;&#10;                                    &lt;button @click=&quot;switchToInput(input.id, 'transition')&quot; class=&quot;btn btn-sm btn-primary&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-film&quot;&gt;&lt;/i&gt; Transition&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section Contrôle Audio - 1/3 de la largeur --&gt;&#10;            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-warning text-dark d-flex justify-content-between align-items-center&quot;&gt;&#10;                        &lt;span&gt;&lt;i class=&quot;bi bi-music-note-list&quot;&gt;&lt;/i&gt; Contrôle Audio&lt;/span&gt;&#10;                        &lt;div&gt;&#10;                            &lt;span class=&quot;badge bg-dark me-2&quot;&gt;{% raw %}{{ videoInputs.length }}{% endraw %} sources&lt;/span&gt;&#10;                            &lt;button @click=&quot;refreshAudioInputs&quot;&#10;                                    :disabled=&quot;isRefreshing&quot;&#10;                                    class=&quot;btn btn-sm btn-light&quot;&gt;&#10;                                &lt;i class=&quot;bi&quot; :class=&quot;{'bi-arrow-clockwise': !isRefreshing, 'bi-arrow-clockwise animate-spin': isRefreshing}&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;!-- Message si aucune source audio n'est détectée --&gt;&#10;                        &lt;div v-if=&quot;!commentatorInputId &amp;&amp; !ambientInputId&quot; class=&quot;alert alert-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle&quot;&gt;&lt;/i&gt; Aucune source audio détectée&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Contrôles pour le commentateur --&gt;&#10;                        &lt;div v-if=&quot;commentatorInputId&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;label class=&quot;form-label mb-0&quot;&gt;Commentateur&lt;/label&gt;&#10;                                &lt;button @click=&quot;toggleCommentatorAudio&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;commentatorAudio ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;commentatorAudio ? 'bi-mic' : 'bi-mic-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;range&quot;&#10;                                   class=&quot;form-range&quot;&#10;                                   v-model=&quot;commentatorVolume&quot;&#10;                                   @change=&quot;updateCommentatorVolume&quot;&#10;                                   min=&quot;0&quot;&#10;                                   max=&quot;100&quot;&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Contrôles pour l'ambiance --&gt;&#10;                        &lt;div v-if=&quot;ambientInputId&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;label class=&quot;form-label mb-0&quot;&gt;Ambiance&lt;/label&gt;&#10;                                &lt;button @click=&quot;toggleAmbientAudio&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;ambientAudio ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;ambientAudio ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;range&quot;&#10;                                   class=&quot;form-range&quot;&#10;                                   v-model=&quot;ambientVolume&quot;&#10;                                   @change=&quot;updateAmbientVolume&quot;&#10;                                   min=&quot;0&quot;&#10;                                   max=&quot;100&quot;&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Liste des autres sources audio --&gt;&#10;                        &lt;div v-if=&quot;videoInputs.length &gt; 0&quot;&gt;&#10;                            &lt;hr&gt;&#10;                            &lt;h6&gt;Autres sources&lt;/h6&gt;&#10;                            &lt;div v-for=&quot;input in videoInputs&quot; :key=&quot;input.id&quot; class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                &lt;span&gt;{% raw %}{{ input.name }}{% endraw %}&lt;/span&gt;&#10;                                &lt;button @click=&quot;toggleAudio(input.id)&quot;&#10;                                        class=&quot;btn btn-sm&quot;&#10;                                        :class=&quot;audioStates[input.id] ? 'btn-success' : 'btn-danger'&quot;&gt;&#10;                                    &lt;i class=&quot;bi&quot; :class=&quot;audioStates[input.id] ? 'bi-volume-up' : 'bi-volume-mute'&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- DEUXIÈME RANGÉE : Replays --&gt;&#10;&#10;            &lt;!-- Section Replays - Pleine largeur --&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-info text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-arrow-counterclockwise me-2&quot;&gt;&lt;/i&gt; Gestion des Replays&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row g-3&quot;&gt;&#10;                            &lt;!-- Configuration du Replay --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Configuration&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;label for=&quot;replayDuration&quot; class=&quot;form-label&quot;&gt;Durée du buffer (secondes)&lt;/label&gt;&#10;                                        &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;replayDuration&quot; v-model=&quot;replayConfig.duration&quot; min=&quot;1&quot; max=&quot;60&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-secondary&quot; type=&quot;button&quot; @click=&quot;setReplayDuration&quot;&gt;Appliquer&lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;!-- Contrôles d'enregistrement --&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2 mt-3&quot;&gt;&#10;                                            &lt;button @click=&quot;toggleReplayRecording&quot; class=&quot;btn&quot;&#10;                                                    :class=&quot;replayStatus.isRecording ? 'btn-danger' : 'btn-outline-danger'&quot;&gt;&#10;                                                &lt;i class=&quot;bi&quot; :class=&quot;replayStatus.isRecording ? 'bi-stop-circle' : 'bi-record-circle'&quot;&gt;&lt;/i&gt;&#10;                                                &lt;span v-if=&quot;replayStatus.isRecording&quot;&gt;Arrêter l'enregistrement&lt;/span&gt;&#10;                                                &lt;span v-else&gt;Démarrer l'enregistrement&lt;/span&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Lecture du dernier replay --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Lecture du dernier replay&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(100)&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Replay (100%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(50)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (50%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;playLastReplay(25)&quot; class=&quot;btn btn-info text-white&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-play-circle me-1&quot;&gt;&lt;/i&gt; Ralenti (25%)&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;pauseReplay&quot; class=&quot;btn btn-outline-secondary&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-pause-circle me-1&quot;&gt;&lt;/i&gt; Pause&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Marquage d'événements --&gt;&#10;                            &lt;div class=&quot;col-md-4&quot;&gt;&#10;                                &lt;div class=&quot;card border-info h-100&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-info bg-opacity-10 text-info&quot;&gt;Marquage d'événements&lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;input-group mb-3&quot;&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Nom de l'événement&quot; v-model=&quot;eventName&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; @click=&quot;markReplayEvent&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-bookmark-plus&quot;&gt;&lt;/i&gt; Marquer&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;form-text mb-3&quot;&gt;Marquez des moments importants pour les rejouer plus tard&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Liste des événements marqués --&gt;&#10;                        &lt;div v-if=&quot;replayEvents.length &gt; 0&quot; class=&quot;mt-4&quot;&gt;&#10;                            &lt;h4 class=&quot;h6 border-top pt-3&quot;&gt;Événements marqués&lt;/h4&gt;&#10;                            &lt;div class=&quot;table-responsive&quot;&gt;&#10;                                &lt;table class=&quot;table table-sm table-hover&quot;&gt;&#10;                                    &lt;thead&gt;&#10;                                        &lt;tr&gt;&#10;                                            &lt;th&gt;#&lt;/th&gt;&#10;                                            &lt;th&gt;Nom&lt;/th&gt;&#10;                                            &lt;th&gt;Horodatage&lt;/th&gt;&#10;                                            &lt;th&gt;Actions&lt;/th&gt;&#10;                                        &lt;/tr&gt;&#10;                                    &lt;/thead&gt;&#10;                                    &lt;tbody&gt;&#10;                                        &lt;tr v-for=&quot;(event, index) in replayEvents&quot; :key=&quot;index&quot;&gt;&#10;                                            &lt;td&gt;{% raw %}{{ index + 1 }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;{% raw %}{{ event.name || 'Événement ' + (index + 1) }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;{% raw %}{{ formatTime(event.timestamp) }}{% endraw %}&lt;/td&gt;&#10;                                            &lt;td&gt;&#10;                                                &lt;div class=&quot;btn-group btn-group-sm&quot;&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 100)&quot; class=&quot;btn btn-sm btn-outline-primary&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 100%&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 50)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 50%&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;playReplayEvent(index, 25)&quot; class=&quot;btn btn-sm btn-outline-info&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-play-circle&quot;&gt;&lt;/i&gt; 25%&#10;                                                    &lt;/button&gt;&#10;                                                    &lt;button @click=&quot;deleteReplayEvent(index)&quot; class=&quot;btn btn-sm btn-outline-danger&quot; title=&quot;Supprimer l'événement&quot;&gt;&#10;                                                        &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                    &lt;/button&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/td&gt;&#10;                                        &lt;/tr&gt;&#10;                                    &lt;/tbody&gt;&#10;                                &lt;/table&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- TROISIÈME RANGÉE : Scoreboard --&gt;&#10;&#10;            &lt;!-- Section Scoreboard - Pleine largeur en bas --&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;div class=&quot;card dashboard-card shadow-sm&quot;&gt;&#10;                    &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                        &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-trophy me-2&quot;&gt;&lt;/i&gt; Gestion du Score&lt;/h2&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;!-- Équipe A --&gt;&#10;                            &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                &lt;div class=&quot;card border-primary&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary&quot;&gt;&#10;                                        {% raw %}{{ scoreData.teamA.name }}{% endraw %}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                            &lt;h3 class=&quot;score-display me-3 mb-0&quot;&gt;{% raw %}{{ scoreData.teamA.score }}{% endraw %}&lt;/h3&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button @click=&quot;incrementScore('A')&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                &lt;/button&gt;&#10;                                                &lt;button @click=&quot;decrementScore('A')&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;scoreData.teamA.score &lt;= 0&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsA &gt;= 3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                            &lt;strong&gt;{% raw %}{{ consecutivePointsA }}{% endraw %} points&lt;/strong&gt; sans ralenti&#10;                                            &lt;button @click=&quot;markReplayEvent('Point équipe A')&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Ralenti&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Zone centrale - Sets --&gt;&#10;                            &lt;div class=&quot;col-md-2&quot;&gt;&#10;                                &lt;div class=&quot;card h-100 border-secondary&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-secondary bg-opacity-10 text-secondary text-center&quot;&gt;&#10;                                        Sets&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;h3 class=&quot;set-score&quot;&gt;{% raw %}{{ scoreData.teamA.sets }}{% endraw %} - {% raw %}{{ scoreData.teamB.sets }}{% endraw %}&lt;/h3&gt;&#10;                                        &lt;div class=&quot;btn-group mt-2 d-flex&quot;&gt;&#10;                                            &lt;button @click=&quot;updateSets('A')&quot; class=&quot;btn btn-outline-primary btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; A&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;updateSets('B')&quot; class=&quot;btn btn-outline-danger btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; B&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button @click=&quot;updateScoreInVMix&quot; class=&quot;btn btn-primary w-100 mt-3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-arrow-up-circle me-1&quot;&gt;&lt;/i&gt; Mettre à jour vMix&#10;                                        &lt;/button&gt;&#10;                                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                                            &lt;button @click=&quot;resetScores()&quot; class=&quot;btn btn-warning btn-sm me-1&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-arrow-counterclockwise me-1&quot;&gt;&lt;/i&gt; Réinitialiser&#10;                                            &lt;/button&gt;&#10;                                            &lt;button @click=&quot;newSet()&quot; class=&quot;btn btn-secondary btn-sm&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Nouveau set&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;!-- Équipe B --&gt;&#10;                            &lt;div class=&quot;col-md-5&quot;&gt;&#10;                                &lt;div class=&quot;card border-danger&quot;&gt;&#10;                                    &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;&#10;                                        {% raw %}{{ scoreData.teamB.name }}{% endraw %}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;card-body&quot;&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center mb-3&quot;&gt;&#10;                                            &lt;h3 class=&quot;score-display me-3 mb-0&quot;&gt;{% raw %}{{ scoreData.teamB.score }}{% endraw %}&lt;/h3&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button @click=&quot;incrementScore('B')&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-plus-lg&quot;&gt;&lt;/i&gt; Point&#10;                                                &lt;/button&gt;&#10;                                                &lt;button @click=&quot;decrementScore('B')&quot; class=&quot;btn btn-danger&quot; :disabled=&quot;scoreData.teamB.score &lt;= 0&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-dash-lg&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;alert alert-info&quot; v-if=&quot;consecutivePointsB &gt;= 3&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-exclamation-triangle me-2&quot;&gt;&lt;/i&gt;&#10;                                            &lt;strong&gt;{% raw %}{{ consecutivePointsB }}{% endraw %} points&lt;/strong&gt; sans ralenti&#10;                                            &lt;button @click=&quot;markReplayEvent('Point équipe B')&quot; class=&quot;btn btn-sm btn-info ms-2&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-camera-reels me-1&quot;&gt;&lt;/i&gt; Ralenti&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Vue.js --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Script personnalisé pour la diffusion en direct --&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/live_broadcast.js') }}&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/templates/core/live_setup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/templates/core/live_setup.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Configuration du Direct - VolleyStream&lt;/title&gt;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;&#10;    &lt;div id=&quot;live-setup-app&quot; class=&quot;container py-4&quot;&gt;&#10;        &lt;h1 class=&quot;text-center mb-4&quot;&gt;Configuration du Direct&lt;/h1&gt;&#10;&#10;        &lt;!-- Statut vMix --&gt;&#10;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;&#10;            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Statut de connexion vMix&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div v-if=&quot;vmixStatus.connected&quot; class=&quot;text-success&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-check-circle-fill me-2&quot;&gt;&lt;/i&gt; Connecté à vMix ({% raw %}{{ vmixStatus.host }}:{{ vmixStatus.port }}{% endraw %})&#10;                        &lt;/div&gt;&#10;                        &lt;div v-else class=&quot;text-danger&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-x-circle-fill me-2&quot;&gt;&lt;/i&gt; Non connecté à vMix&#10;                        &lt;/div&gt;&#10;                        &lt;small class=&quot;text-muted&quot; v-if=&quot;vmixStatus.lastChecked&quot;&gt;Dernière vérification: {% raw %}{{ formatDateTime(vmixStatus.lastChecked) }}{% endraw %}&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button @click=&quot;checkVMixConnection&quot; class=&quot;btn btn-outline-primary&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-arrow-repeat me-1&quot;&gt;&lt;/i&gt; Vérifier&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Sélection des équipes --&gt;&#10;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;&#10;            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people-fill me-2&quot;&gt;&lt;/i&gt; Configuration des équipes&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;div class=&quot;row mb-3&quot;&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;label for=&quot;teamA&quot; class=&quot;form-label&quot;&gt;Équipe A&lt;/label&gt;&#10;                        &lt;select class=&quot;form-select&quot; id=&quot;teamA&quot; v-model=&quot;selectedTeams.teamA&quot;&gt;&#10;                            &lt;option value=&quot;&quot;&gt;Sélectionner une équipe&lt;/option&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;                        &lt;select class=&quot;form-select&quot; id=&quot;teamB&quot; v-model=&quot;selectedTeams.teamB&quot;&gt;&#10;                            &lt;option value=&quot;&quot;&gt;Sélectionner une équipe&lt;/option&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                &lt;/div&gt;&#10;                &lt;button @click=&quot;loadTeamsToVMix&quot; class=&quot;btn btn-success&quot; :disabled=&quot;!canLoadTeams&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-arrow-right-circle-fill me-1&quot;&gt;&lt;/i&gt; Charger les équipes dans vMix&#10;                &lt;/button&gt;&#10;                &lt;div v-if=&quot;teamLoadStatus&quot; class=&quot;mt-2&quot; :class=&quot;teamLoadStatus.success ? 'text-success' : 'text-danger'&quot;&gt;&#10;                    &lt;i class=&quot;bi&quot; :class=&quot;teamLoadStatus.success ? 'bi-check-circle-fill' : 'bi-x-circle-fill'&quot;&gt;&lt;/i&gt;&#10;                    {% raw %}{{ teamLoadStatus.message }}{% endraw %}&#10;                &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people-fill me-2&quot;&gt;&lt;/i&gt; Configuration des équipes&lt;/h2&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;        &lt;!-- Sélection des équipes --&gt;&#10;                &lt;div class=&quot;row mb-3&quot;&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people-fill me-2&quot;&gt;&lt;/i&gt; Configuration des équipes&lt;/h2&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;                        &lt;select class=&quot;form-select&quot; id=&quot;teamB&quot; v-model=&quot;selectedTeams.teamB&quot;&gt;&#10;                &lt;div class=&quot;row mb-3&quot;&gt;&#10;                            &lt;option value=&quot;&quot;&gt;Sélectionner une équipe&lt;/option&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;                        &lt;select class=&quot;form-select&quot; id=&quot;teamB&quot; v-model=&quot;selectedTeams.teamB&quot;&gt;&#10;                            &lt;option value=&quot;&quot;&gt;Sélectionner une équipe&lt;/option&gt;&#10;                            &lt;option v-for=&quot;team in availableTeams&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;button @click=&quot;loadTeamsToVMix&quot; class=&quot;btn btn-success&quot; :disabled=&quot;!canLoadTeams&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-arrow-right-circle-fill me-1&quot;&gt;&lt;/i&gt; Charger les équipes dans vMix&#10;                &lt;/button&gt;&#10;                &lt;div v-if=&quot;teamLoadStatus&quot; class=&quot;mt-2&quot; :class=&quot;teamLoadStatus.success ? 'text-success' : 'text-danger'&quot;&gt;&#10;                    &lt;i class=&quot;bi&quot; :class=&quot;teamLoadStatus.success ? 'bi-check-circle-fill' : 'bi-x-circle-fill'&quot;&gt;&lt;/i&gt;&#10;                    {% raw %}{{ teamLoadStatus.message }}{% endraw %}&#10;                &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people-fill me-2&quot;&gt;&lt;/i&gt; Configuration des équipes&lt;/h2&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;        &lt;!-- Configuration RTMP minimale --&gt;&#10;                &lt;div class=&quot;row mb-3&quot;&gt;&#10;                    &lt;/div&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-camera-video-fill me-2&quot;&gt;&lt;/i&gt; Configuration RTMP&lt;/h2&gt;&#10;                        &lt;label for=&quot;teamB&quot; class=&quot;form-label&quot;&gt;Équipe B&lt;/label&gt;&#10;                        &lt;select class=&quot;form-select&quot; id=&quot;teamB&quot; v-model=&quot;selectedTeams.teamB&quot;&gt;&#10;                &lt;form @submit.prevent=&quot;saveStreamingConfig&quot;&gt;&#10;                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-image me-2&quot;&gt;&lt;/i&gt; Contrôle de la miniature&lt;/h2&gt;&#10;                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;rtmpUrl&quot; v-model=&quot;streamingConfig.rtmpUrl&quot; placeholder=&quot;rtmp://...&quot;&gt;&#10;                        &lt;div class=&quot;form-text&quot;&gt;L'URL RTMP fournie par votre service de streaming&lt;/div&gt;&#10;                &lt;div class=&quot;switch-container d-flex align-items-center&quot;&gt;&#10;                    &lt;div class=&quot;form-check form-switch&quot;&gt;&#10;                        &lt;input class=&quot;form-check-input&quot; type=&quot;checkbox&quot; id=&quot;thumbnailSwitch&quot; v-model=&quot;thumbnailVisible&quot;&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                        &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature du match&lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/live_setup.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Configuration du Direct - VolleyStream&lt;/title&gt;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;&#10;    &lt;div id=&quot;live-setup-app&quot; class=&quot;container py-4&quot;&gt;&#10;        &lt;h1 class=&quot;text-center mb-4&quot;&gt;Configuration du Direct&lt;/h1&gt;&#10;&#10;        &lt;!-- Statut vMix --&gt;&#10;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;&#10;            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-broadcast me-2&quot;&gt;&lt;/i&gt; Statut de connexion vMix&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div v-if=&quot;vmixStatus.connected&quot; class=&quot;text-success&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-check-circle-fill me-2&quot;&gt;&lt;/i&gt; Connecté à vMix ({% raw %}{{ vmixStatus.host }}:{{ vmixStatus.port }}{% endraw %})&#10;                        &lt;/div&gt;&#10;                        &lt;div v-else class=&quot;text-danger&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-x-circle-fill me-2&quot;&gt;&lt;/i&gt; Non connecté à vMix&#10;                        &lt;/div&gt;&#10;                        &lt;small class=&quot;text-muted&quot; v-if=&quot;vmixStatus.lastChecked&quot;&gt;Dernière vérification: {% raw %}{{ formatDateTime(vmixStatus.lastChecked) }}{% endraw %}&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button @click=&quot;checkVMixConnection&quot; class=&quot;btn btn-outline-primary&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-arrow-repeat me-1&quot;&gt;&lt;/i&gt; Vérifier&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Configuration RTMP minimale --&gt;&#10;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;&#10;            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-camera-video-fill me-2&quot;&gt;&lt;/i&gt; Configuration RTMP&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;form @submit.prevent=&quot;saveStreamingConfig&quot;&gt;&#10;                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                        &lt;label for=&quot;streamTitle&quot; class=&quot;form-label&quot;&gt;Titre du stream&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;streamTitle&quot; v-model=&quot;streamingConfig.title&quot; placeholder=&quot;Titre du stream...&quot;&gt;&#10;                        &lt;div class=&quot;form-text&quot;&gt;Le titre qui apparaîtra sur la plateforme de streaming&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                        &lt;label for=&quot;rtmpUrl&quot; class=&quot;form-label&quot;&gt;URL RTMP&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;rtmpUrl&quot; v-model=&quot;streamingConfig.rtmpUrl&quot; placeholder=&quot;rtmp://...&quot;&gt;&#10;                        &lt;div class=&quot;form-text&quot;&gt;L'URL RTMP fournie par votre service de streaming&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                        &lt;label for=&quot;streamKey&quot; class=&quot;form-label&quot;&gt;Clé de stream&lt;/label&gt;&#10;                        &lt;div class=&quot;input-group&quot;&gt;&#10;                            &lt;input :type=&quot;showStreamKey ? 'text' : 'password'&quot; class=&quot;form-control&quot; id=&quot;streamKey&quot; v-model=&quot;streamingConfig.streamKey&quot; placeholder=&quot;Votre clé de stream...&quot;&gt;&#10;                            &lt;button class=&quot;btn btn-outline-secondary&quot; type=&quot;button&quot; @click=&quot;showStreamKey = !showStreamKey&quot;&gt;&#10;                                &lt;i class=&quot;bi&quot; :class=&quot;showStreamKey ? 'bi-eye-slash-fill' : 'bi-eye-fill'&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;form-text&quot;&gt;La clé secrète de votre stream&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-save me-1&quot;&gt;&lt;/i&gt; Enregistrer la configuration RTMP&#10;                    &lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Contrôle de la miniature --&gt;&#10;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;&#10;            &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-image me-2&quot;&gt;&lt;/i&gt; Gestion de la miniature&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;thumbnailUpload&quot; class=&quot;form-label&quot;&gt;Télécharger une miniature&lt;/label&gt;&#10;                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;thumbnailUpload&quot; @change=&quot;handleThumbnailUpload&quot; accept=&quot;image/*&quot;&gt;&#10;                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé : 1280x720px&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;div class=&quot;form-check form-switch&quot;&gt;&#10;                                &lt;input class=&quot;form-check-input&quot; type=&quot;checkbox&quot; id=&quot;thumbnailSwitch&quot; v-model=&quot;thumbnailVisible&quot; @change=&quot;toggleThumbnail&quot;&gt;&#10;                                &lt;label class=&quot;form-check-label&quot; for=&quot;thumbnailSwitch&quot;&gt;Afficher la miniature dans le direct&lt;/label&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;thumbnail-preview-container border rounded p-2 text-center&quot; v-if=&quot;thumbnailPreview&quot;&gt;&#10;                            &lt;img :src=&quot;thumbnailPreview&quot; alt=&quot;Aperçu de la miniature&quot; class=&quot;img-fluid thumbnail-preview&quot;&gt;&#10;                            &lt;div class=&quot;mt-2&quot;&gt;&#10;                                &lt;button class=&quot;btn btn-sm btn-danger&quot; @click=&quot;removeThumbnail&quot;&gt;&#10;                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt; Supprimer&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;thumbnail-preview-container border rounded p-3 text-center bg-light&quot; v-else&gt;&#10;                            &lt;i class=&quot;bi bi-image text-muted display-4&quot;&gt;&lt;/i&gt;&#10;                            &lt;p class=&quot;text-muted&quot;&gt;Aucune miniature téléchargée&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/live_setup.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/app/templates/core/team_setup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/app/templates/core/team_setup.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Configuration des Équipes&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/gh/lipis/flag-icons@7.3.2/css/flag-icons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light text-dark&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;    &lt;div id=&quot;setup-team-app&quot;&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;          &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;            &lt;div class=&quot;toast-body&quot;&gt;&#10;              {% raw %}{{ notification.message }}{% endraw %}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;container py-5&quot;&gt;&#10;            &lt;h1 class=&quot;text-center mb-4&quot;&gt;Configuration des Équipes&lt;/h1&gt;&#10;&#10;            &lt;!-- Section de configuration des équipes du match --&gt;&#10;            &lt;div id=&quot;match-teams&quot; class=&quot;card shadow-sm mb-5&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-controller me-2&quot;&gt;&lt;/i&gt; Configuration des équipes du match&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;!-- Équipe A --&gt;&#10;                        &lt;div class=&quot;col-md-6 mb-4 mb-md-0&quot;&gt;&#10;                            &lt;div class=&quot;card h-100 border-primary&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipe A (Domicile)&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;!teamA.createNew&quot; class=&quot;mb-3&quot;&gt;&#10;                                        &lt;label class=&quot;form-label&quot;&gt;Sélectionner une équipe existante&lt;/label&gt;&#10;                                        &lt;select class=&quot;form-select mb-2&quot; v-model=&quot;teamA.selectedId&quot; @change=&quot;selectTeamA&quot;&gt;&#10;                                            &lt;option value=&quot;&quot;&gt;-- Choisir une équipe --&lt;/option&gt;&#10;                                            &lt;option v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-primary btn-sm&quot; @click=&quot;teamA.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamA.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamA_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;div v-if=&quot;teamA.createNew&quot;&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                    &lt;div v-if=&quot;!teamB.createNew&quot; class=&quot;mb-3&quot;&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                    &lt;div v-if=&quot;!teamB.createNew&quot; class=&quot;mb-3&quot;&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;/button&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                        &lt;img v-if=&quot;teamA.logo&quot; :src=&quot;teamA.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe A&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                    &lt;div v-if=&quot;teamB.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                                &lt;/button&gt;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                                            &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                        &lt;img v-if=&quot;teamA.logo&quot; :src=&quot;teamA.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe A&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamA.createNew&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                    &lt;div v-if=&quot;teamB.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                                &lt;/button&gt;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamA.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                        &lt;img v-if=&quot;teamA.logo&quot; :src=&quot;teamA.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe A&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;button class=&quot;btn btn-outline-danger btn-sm&quot; @click=&quot;teamB.createNew = true&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-plus-circle me-1&quot;&gt;&lt;/i&gt; Créer une nouvelle équipe&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                    &lt;div v-if=&quot;teamB.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-2&quot;&gt;&#10;                                                &lt;label for=&quot;teamB_name&quot; class=&quot;form-label mb-0&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot; @click=&quot;teamB.createNew = false&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Retour&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;teamB_name&quot; v-model=&quot;teamB.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;teamB_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;teamB_logo&quot; @change=&quot;handleLogoUpload('B', $event)&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                            &lt;label for=&quot;playersB_csv&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;playersB_csv&quot; @change=&quot;handleCsvUpload('B', $event)&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2 mb-3&quot;&gt;&#10;                                            &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; @click=&quot;saveTeam('B')&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-save&quot;&gt;&lt;/i&gt; Enregistrer cette équipe&#10;                                            &lt;/button&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamB.selectedId &amp;&amp; !teamB.createNew&quot; class=&quot;mt-3 text-center&quot;&gt;&#10;                                        &lt;img v-if=&quot;teamB.logo&quot; :src=&quot;teamB.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe B&quot;&gt;&#10;                                        &lt;h4 class=&quot;h6&quot;&gt;{% raw %}{{ teamB.name }}{% endraw %}&lt;/h4&gt;&#10;                                        &lt;p class=&quot;mb-0 small text-muted&quot;&gt;{% raw %}{{ teamB.playerCount }}{% endraw %} joueurs&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;                                    &lt;!-- Bouton pour envoyer le roster vers vMix pour l'équipe B --&gt;&#10;                                    &lt;div class=&quot;mt-4&quot;&gt;&#10;                                        &lt;button type=&quot;button&quot; class=&quot;btn btn-success w-100&quot; @click=&quot;sendRosterToVmix('B')&quot; :disabled=&quot;!(teamB.selectedId || (teamB.createNew &amp;&amp; teamB.players))&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; Envoyer la liste des joueurs vers vMix&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;text-center mt-4&quot;&gt;&#10;                        &lt;button @click=&quot;saveMatchTeams&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-check-circle&quot;&gt;&lt;/i&gt; Configurer ce match&#10;                        &lt;/button&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section d'affichage des détails d'un joueur --&gt;&#10;            &lt;div class=&quot;card shadow-sm mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-person-badge me-2&quot;&gt;&lt;/i&gt; Détails des joueurs&lt;/h2&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row mb-3&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot;&gt;Sélectionner une équipe&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; v-model=&quot;selectedTeamId&quot; @change=&quot;loadTeamPlayers&quot;&gt;&#10;                                &lt;option value=&quot;&quot;&gt;-- Choisir une équipe --&lt;/option&gt;&#10;                                &lt;option v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;col-md-6&quot; v-if=&quot;selectedTeamId&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot;&gt;Sélectionner un joueur&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; v-model=&quot;selectedPlayerId&quot;&gt;&#10;                                &lt;option value=&quot;&quot;&gt;-- Choisir un joueur --&lt;/option&gt;&#10;                                &lt;option v-for=&quot;(player, index) in teamPlayers&quot; :key=&quot;index&quot; :value=&quot;index&quot;&gt;&#10;                                    {% raw %}{{ player.prenom }}{% endraw %} {% raw %}{{ player.nom.toUpperCase() }}{% endraw %} ({% raw %}{{ player.numero || &quot;N/A&quot; }}{% endraw %})&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                &lt;/option&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div v-if=&quot;selectedPlayerId !== ''&quot; class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-4&quot;&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                    &lt;div class=&quot;placeholder-image bg-light rounded-circle d-inline-block mb-3&quot; style=&quot;width: 120px; height: 120px; line-height: 120px; font-size: 2rem;&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-person&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;h3 class=&quot;h4&quot;&gt;{% raw %}{{ selectedPlayer.prenom }}{% endraw %} {% raw %}{{ selectedPlayer.nom.toUpperCase() }}{% endraw %}&lt;/h3&gt;&#10;                                    &lt;p class=&quot;display-6&quot;&gt;{% raw %}{{ selectedPlayer.numero || &quot;N/A&quot; }}{% endraw %}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;col-md-8&quot;&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header&quot;&gt;&#10;                                    &lt;h4 class=&quot;h6 mb-0&quot;&gt;Informations du joueur&lt;/h4&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;ul class=&quot;list-group list-group-flush&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Position:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.position || &quot;Non spécifiée&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Taille:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.taille ? selectedPlayer.taille + &quot; cm&quot; : &quot;Non spécifiée&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Âge/Date de naissance:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.date_naissance || &quot;Non spécifié&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;                                    &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-footer bg-white&quot;&gt;&#10;                                    &lt;button class=&quot;btn btn-success w-100&quot; @click=&quot;showPlayerDetailsInVmix&quot; :disabled=&quot;!selectedPlayerId&quot;&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;                                        &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; Afficher les détails du joueur dans vMix&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section de gestion des équipes --&gt;&#10;            &lt;div id=&quot;team-management&quot; class=&quot;card shadow-sm mb-5 mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-people me-2&quot;&gt;&lt;/i&gt; Gestion des équipes&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Formulaire de création d'équipe --&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Créer une nouvelle équipe&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;form @submit=&quot;createTeam&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;new_team_name&quot; v-model=&quot;newTeam.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_logo&quot; @change=&quot;newTeam.logo = $event.target.files[0]&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;new_team_players&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;new_team_players&quot; @change=&quot;newTeam.players = $event.target.files[0]&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-plus-circle&quot;&gt;&lt;/i&gt; Créer l'équipe&#10;                                        &lt;/button&gt;&#10;                                    &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;!-- Liste des équipes existantes --&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-secondary bg-opacity-10&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipes existantes&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div v-if=&quot;teams.length === 0&quot; class=&quot;text-center text-muted py-4&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-info-circle fs-3&quot;&gt;&lt;/i&gt;&#10;                                        &lt;p&gt;Aucune équipe n'a été créée.&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div v-else class=&quot;list-group&quot;&gt;&#10;                                        &lt;div v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; class=&quot;list-group-item list-group-item-action d-flex justify-content-between align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                                &lt;img v-if=&quot;team.logo&quot; :src=&quot;team.logo&quot; class=&quot;me-3&quot; style=&quot;width: 40px; height: 40px; object-fit: contain;&quot; alt=&quot;Logo équipe&quot;&gt;&#10;                                                &lt;div v-else class=&quot;bg-secondary bg-opacity-10 me-3 d-flex justify-content-center align-items-center&quot; style=&quot;width: 40px; height: 40px; border-radius: 4px;&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-people text-secondary&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;h6 class=&quot;mb-0&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/h6&gt;&#10;                                                    &lt;small class=&quot;text-muted&quot;&gt;{% raw %}{{ team.players ? team.players.length : 0 }}{% endraw %} joueurs&lt;/small&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;btn-group&quot;&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;viewTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                                &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; @click=&quot;deleteTeam(team)&quot;&gt;&#10;                                                    &lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&#10;                                                &lt;/button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/setup_team.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Configuration des Équipes&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/gh/lipis/flag-icons@7.3.2/css/flag-icons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.7.2/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-light text-dark&quot;&gt;&#10;    {% include 'core/nav.html' %}&#10;    &lt;div id=&quot;setup-team-app&quot;&gt;&#10;        &lt;div class=&quot;position-fixed top-0 end-0 p-3&quot; style=&quot;z-index: 1050&quot;&gt;&#10;          &lt;div v-for=&quot;notification in notifications&quot; :key=&quot;notification.id&quot; class=&quot;toast show&quot; :class=&quot;`text-bg-${notification.type}`&quot;&gt;&#10;            &lt;div class=&quot;toast-body&quot;&gt;&#10;              {% raw %}{{ notification.message }}{% endraw %}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;container py-5&quot;&gt;&#10;            &lt;h1 class=&quot;text-center mb-4&quot;&gt;Configuration des Équipes&lt;/h1&gt;&#10;&#10;            &lt;!-- Section de configuration des équipes du match --&gt;&#10;            &lt;div id=&quot;match-teams&quot; class=&quot;card shadow-sm mb-5&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-controller me-2&quot;&gt;&lt;/i&gt; Configuration des équipes du match&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;!-- Équipe A --&gt;&#10;                        &lt;div class=&quot;col-md-6 mb-4 mb-md-0&quot;&gt;&#10;                            &lt;div class=&quot;card h-100 border-primary&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-primary bg-opacity-10 text-primary&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipe A (Domicile)&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                                        &lt;label class=&quot;form-label&quot;&gt;Sélectionner une équipe existante&lt;/label&gt;&#10;                                        &lt;select class=&quot;form-select mb-2&quot; v-model=&quot;teamA.selectedId&quot; @change=&quot;selectTeamA&quot;&gt;&#10;                                            &lt;option value=&quot;&quot;&gt;-- Choisir une équipe --&lt;/option&gt;&#10;                                            &lt;option v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;form-check form-switch&quot;&gt;&#10;                                                &lt;input class=&quot;form-check-input&quot; type=&quot;checkbox&quot; id=&quot;createNewTeamA&quot; v-model=&quot;teamA.createNew&quot;&gt;&#10;                                                &lt;label class=&quot;form-check-label&quot; for=&quot;createNewTeamA&quot;&gt;Créer une nouvelle équipe&lt;/label&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamA.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;teamA_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;teamA_name&quot; v-model=&quot;teamA.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;teamA_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;teamA_logo&quot; @change=&quot;handleLogoUpload('A', $event)&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;playersA_csv&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;playersA_csv&quot; @change=&quot;handleCsvUpload('A', $event)&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2 mb-3&quot;&gt;&#10;                                            &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; @click=&quot;saveTeam('A')&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-save&quot;&gt;&lt;/i&gt; Enregistrer cette équipe&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamA.selectedId &amp;&amp; !teamA.createNew&quot; class=&quot;mt-3 text-center&quot;&gt;&#10;                                        &lt;img v-if=&quot;teamA.logo&quot; :src=&quot;teamA.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe A&quot;&gt;&#10;                                        &lt;h4 class=&quot;h6&quot;&gt;{% raw %}{{ teamA.name }}{% endraw %}&lt;/h4&gt;&#10;                                        &lt;p class=&quot;mb-0 small text-muted&quot;&gt;{% raw %}{{ teamA.playerCount }}{% endraw %} joueurs&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Bouton pour envoyer le roster vers vMix pour l'équipe A --&gt;&#10;                                    &lt;div class=&quot;mt-4&quot;&gt;&#10;                                        &lt;button type=&quot;button&quot; class=&quot;btn btn-success w-100&quot; @click=&quot;sendRosterToVmix('A')&quot; :disabled=&quot;!(teamA.selectedId || (teamA.createNew &amp;&amp; teamA.players))&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; Envoyer la liste des joueurs vers vMix&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Équipe B --&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;div class=&quot;card h-100 border-danger&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-danger bg-opacity-10 text-danger&quot;&gt;&#10;                                    &lt;h3 class=&quot;h6 mb-0&quot;&gt;Équipe B (Visiteur)&lt;/h3&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;div class=&quot;mb-3&quot;&gt;&#10;                                        &lt;label class=&quot;form-label&quot;&gt;Sélectionner une équipe existante&lt;/label&gt;&#10;                                        &lt;select class=&quot;form-select mb-2&quot; v-model=&quot;teamB.selectedId&quot; @change=&quot;selectTeamB&quot;&gt;&#10;                                            &lt;option value=&quot;&quot;&gt;-- Choisir une équipe --&lt;/option&gt;&#10;                                            &lt;option v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                        &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                                            &lt;div class=&quot;form-check form-switch&quot;&gt;&#10;                                                &lt;input class=&quot;form-check-input&quot; type=&quot;checkbox&quot; id=&quot;createNewTeamB&quot; v-model=&quot;teamB.createNew&quot;&gt;&#10;                                                &lt;label class=&quot;form-check-label&quot; for=&quot;createNewTeamB&quot;&gt;Créer une nouvelle équipe&lt;/label&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamB.createNew&quot;&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;teamB_name&quot; class=&quot;form-label&quot;&gt;Nom de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;teamB_name&quot; v-model=&quot;teamB.name&quot; required&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;teamB_logo&quot; class=&quot;form-label&quot;&gt;Logo de l'équipe&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;teamB_logo&quot; @change=&quot;handleLogoUpload('B', $event)&quot; accept=&quot;.jpg,.jpeg,.png&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format recommandé: PNG avec fond transparent, ratio 1:1&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                                            &lt;label for=&quot;playersB_csv&quot; class=&quot;form-label&quot;&gt;Liste des joueurs (CSV)&lt;/label&gt;&#10;                                            &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;playersB_csv&quot; @change=&quot;handleCsvUpload('B', $event)&quot; accept=&quot;.csv&quot;&gt;&#10;                                            &lt;div class=&quot;form-text&quot;&gt;Format: numéro,nom,prénom,position,taille,date_naissance&lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;d-grid gap-2 mb-3&quot;&gt;&#10;                                            &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; @click=&quot;saveTeam('B')&quot;&gt;&#10;                                                &lt;i class=&quot;bi bi-save&quot;&gt;&lt;/i&gt; Enregistrer cette équipe&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div v-if=&quot;teamB.selectedId &amp;&amp; !teamB.createNew&quot; class=&quot;mt-3 text-center&quot;&gt;&#10;                                        &lt;img v-if=&quot;teamB.logo&quot; :src=&quot;teamB.logo&quot; class=&quot;img-fluid mb-2&quot; style=&quot;max-height: 80px;&quot; alt=&quot;Logo équipe B&quot;&gt;&#10;                                        &lt;h4 class=&quot;h6&quot;&gt;{% raw %}{{ teamB.name }}{% endraw %}&lt;/h4&gt;&#10;                                        &lt;p class=&quot;mb-0 small text-muted&quot;&gt;{% raw %}{{ teamB.playerCount }}{% endraw %} joueurs&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Bouton pour envoyer le roster vers vMix pour l'équipe B --&gt;&#10;                                    &lt;div class=&quot;mt-4&quot;&gt;&#10;                                        &lt;button type=&quot;button&quot; class=&quot;btn btn-success w-100&quot; @click=&quot;sendRosterToVmix('B')&quot; :disabled=&quot;!(teamB.selectedId || (teamB.createNew &amp;&amp; teamB.players))&quot;&gt;&#10;                                            &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; Envoyer la liste des joueurs vers vMix&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;text-center mt-4&quot;&gt;&#10;                        &lt;button @click=&quot;saveMatchTeams&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-check-circle&quot;&gt;&lt;/i&gt; Configurer ce match&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Section d'affichage des détails d'un joueur --&gt;&#10;            &lt;div class=&quot;card shadow-sm mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                    &lt;h2 class=&quot;h5 mb-0&quot;&gt;&lt;i class=&quot;bi bi-person-badge me-2&quot;&gt;&lt;/i&gt; Détails des joueurs&lt;/h2&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;div class=&quot;row mb-3&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot;&gt;Sélectionner une équipe&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; v-model=&quot;selectedTeamId&quot; @change=&quot;loadTeamPlayers&quot;&gt;&#10;                                &lt;option value=&quot;&quot;&gt;-- Choisir une équipe --&lt;/option&gt;&#10;                                &lt;option v-for=&quot;team in teams&quot; :key=&quot;team.id&quot; :value=&quot;team.id&quot;&gt;{% raw %}{{ team.name }}{% endraw %}&lt;/option&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;col-md-6&quot; v-if=&quot;selectedTeamId&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot;&gt;Sélectionner un joueur&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; v-model=&quot;selectedPlayerId&quot;&gt;&#10;                                &lt;option value=&quot;&quot;&gt;-- Choisir un joueur --&lt;/option&gt;&#10;                                &lt;option v-for=&quot;(player, index) in teamPlayers&quot; :key=&quot;index&quot; :value=&quot;index&quot;&gt;&#10;                                    {% raw %}{{ player.prenom }}{% endraw %} {% raw %}{{ player.nom.toUpperCase() }}{% endraw %} ({% raw %}{{ player.numero || &quot;N/A&quot; }}{% endraw %})&#10;                                &lt;/option&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div v-if=&quot;selectedPlayerId !== ''&quot; class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-4&quot;&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                    &lt;div class=&quot;placeholder-image bg-light rounded-circle d-inline-block mb-3&quot; style=&quot;width: 120px; height: 120px; line-height: 120px; font-size: 2rem;&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-person&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;h3 class=&quot;h4&quot;&gt;{% raw %}{{ selectedPlayer.prenom }}{% endraw %} {% raw %}{{ selectedPlayer.nom.toUpperCase() }}{% endraw %}&lt;/h3&gt;&#10;                                    &lt;p class=&quot;display-6&quot;&gt;{% raw %}{{ selectedPlayer.numero || &quot;N/A&quot; }}{% endraw %}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;col-md-8&quot;&gt;&#10;                            &lt;div class=&quot;card mb-3&quot;&gt;&#10;                                &lt;div class=&quot;card-header&quot;&gt;&#10;                                    &lt;h4 class=&quot;h6 mb-0&quot;&gt;Informations du joueur&lt;/h4&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body&quot;&gt;&#10;                                    &lt;ul class=&quot;list-group list-group-flush&quot;&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Position:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.position || &quot;Non spécifiée&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Taille:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.taille ? selectedPlayer.taille + &quot; cm&quot; : &quot;Non spécifiée&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;                                        &lt;li class=&quot;list-group-item d-flex justify-content-between&quot;&gt;&#10;                                            &lt;span&gt;Âge/Date de naissance:&lt;/span&gt;&#10;                                            &lt;span class=&quot;fw-bold&quot;&gt;{% raw %}{{ selectedPlayer.date_naissance || &quot;Non spécifié&quot; }}{% endraw %}&lt;/span&gt;&#10;                                        &lt;/li&gt;&#10;                                    &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-footer bg-white&quot;&gt;&#10;                                    &lt;button class=&quot;btn btn-success w-100&quot; @click=&quot;showPlayerDetailsInVmix&quot; :disabled=&quot;!selectedPlayerId&quot;&gt;&#10;                                        &lt;i class=&quot;bi bi-broadcast&quot;&gt;&lt;/i&gt; Afficher les détails du joueur dans vMix&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/setup_team.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/v3_0/tips.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/v3_0/tips.md" />
              <option name="originalContent" value="Conseils pour l'implémentation&#10;Plutôt que de vous donner directement le code à implémenter, voici quelques questions et suggestions pour vous guider dans votre réflexion :&#10;Pour le fichier app/init.py&#10;Comment allez-vous initialiser l'application Flask ?&#10;Quelles extensions sont nécessaires pour votre projet (pensez à Flask-SocketIO) ?&#10;Comment organiserez-vous l'enregistrement des différents blueprints ?&#10;Pour core/vmix_manager.py&#10;Quelles fonctionnalités essentielles doivent être incluses dans ce gestionnaire ?&#10;Comment allez-vous gérer la connexion à l'API vMix ?&#10;Quelles méthodes seront nécessaires pour contrôler les inputs, les overlays, etc. ?&#10;Pour core/team_manager.py&#10;Comment structurer les données des équipes ?&#10;Quelles opérations CRUD (Create, Read, Update, Delete) devez-vous implémenter ?&#10;Comment gérer la persistance des données d'équipe ?&#10;Pour api/routes.py&#10;Quelles routes API sont essentielles pour votre application ?&#10;Comment organiser logiquement ces routes par fonctionnalité ?&#10;Comment structurer les réponses JSON pour qu'elles soient cohérentes ?&#10;Défis à relever&#10;" />
              <option name="updatedContent" value="# Conseils pour l'implémentation&#10;&#10;Voici quelques questions et suggestions pour guider votre réflexion dans l'implémentation du projet.&#10;&#10;## Pour le fichier app/__init__.py&#10;&#10;- Comment allez-vous initialiser l'application Flask ?&#10;- Quelles extensions sont nécessaires pour votre projet (pensez à Flask-SocketIO) ?&#10;- Comment organiserez-vous l'enregistrement des différents blueprints ?&#10;&#10;## Pour core/vmix_manager.py&#10;&#10;- Quelles fonctionnalités essentielles doivent être incluses dans ce gestionnaire ?&#10;- Comment allez-vous gérer la connexion à l'API vMix ?&#10;- Quelles méthodes seront nécessaires pour contrôler les inputs, les overlays, etc. ?&#10;&#10;## Pour core/team_manager.py&#10;&#10;- Comment structurer les données des équipes ?&#10;- Quelles opérations CRUD (Create, Read, Update, Delete) devez-vous implémenter ?&#10;- Comment gérer la persistance des données d'équipe ?&#10;&#10;## Pour api/routes.py&#10;&#10;- Quelles routes API sont essentielles pour votre application ?&#10;- Comment organiser logiquement ces routes par fonctionnalité ?&#10;- Comment structurer les réponses JSON pour qu'elles soient cohérentes ?&#10;&#10;## Défis à relever&#10;&#10;Pour vous mettre au défi et vous aider à approfondir votre compréhension, réfléchissez à ces questions :&#10;&#10;1. **Architecture** : Comment assurer que votre code reste modulaire et facilement extensible ? Pensez au principe de responsabilité unique.&#10;&#10;2. **Gestion d'état** : Comment synchroniser l'état de vMix avec votre application ? Envisagez un système de cache ou d'événements.&#10;&#10;3. **Sécurité** : Quelles précautions devez-vous prendre concernant les entrées utilisateur, surtout pour les uploads de fichiers ?&#10;&#10;4. **Expérience utilisateur** : Comment concevoir votre API pour qu'elle soit intuitive et prévisible pour le frontend ?&#10;&#10;5. **Robustesse** : Comment gérer les erreurs de connexion à vMix ou les problèmes de réseau ?&#10;&#10;En développant votre implémentation en gardant ces questions à l'esprit, vous créerez un système plus solide et plus facile à maintenir. Complétez d'abord la structure du projet, puis concentrez-vous sur l'implémentation des fonctionnalités de base avant d'ajouter des fonctionnalités plus complexes." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>